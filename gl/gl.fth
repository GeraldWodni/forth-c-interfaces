\ This file has been generated using SWIG and fsi,
\ and is already platform dependent, search for the corresponding
\ fsi-file to compile it where no one has compiled it before ;)
\ Forth systems have their own own dynamic loader and don't need addional C-Code.
\ That's why this file will just print normal forth-code once compiled
\ and can be used directly with include or require.
\ As all comments are stripped during the compilation, please
\ insert the copyright notice of the original file here.

\ ----===< prefix >===-----
( none )

\ ----===< int constants >===-----
#1	constant GL_VERSION_1_1
#1	constant GL_VERSION_1_2
#1	constant GL_VERSION_1_3
#1	constant GL_ARB_imaging
#0	constant GL_FALSE
#1	constant GL_TRUE
#5120	constant GL_BYTE
#5121	constant GL_UNSIGNED_BYTE
#5122	constant GL_SHORT
#5123	constant GL_UNSIGNED_SHORT
#5124	constant GL_INT
#5125	constant GL_UNSIGNED_INT
#5126	constant GL_FLOAT
#5127	constant GL_2_BYTES
#5128	constant GL_3_BYTES
#5129	constant GL_4_BYTES
#5130	constant GL_DOUBLE
#0	constant GL_POINTS
#1	constant GL_LINES
#2	constant GL_LINE_LOOP
#3	constant GL_LINE_STRIP
#4	constant GL_TRIANGLES
#5	constant GL_TRIANGLE_STRIP
#6	constant GL_TRIANGLE_FAN
#7	constant GL_QUADS
#8	constant GL_QUAD_STRIP
#9	constant GL_POLYGON
#32884	constant GL_VERTEX_ARRAY
#32885	constant GL_NORMAL_ARRAY
#32886	constant GL_COLOR_ARRAY
#32887	constant GL_INDEX_ARRAY
#32888	constant GL_TEXTURE_COORD_ARRAY
#32889	constant GL_EDGE_FLAG_ARRAY
#32890	constant GL_VERTEX_ARRAY_SIZE
#32891	constant GL_VERTEX_ARRAY_TYPE
#32892	constant GL_VERTEX_ARRAY_STRIDE
#32894	constant GL_NORMAL_ARRAY_TYPE
#32895	constant GL_NORMAL_ARRAY_STRIDE
#32897	constant GL_COLOR_ARRAY_SIZE
#32898	constant GL_COLOR_ARRAY_TYPE
#32899	constant GL_COLOR_ARRAY_STRIDE
#32901	constant GL_INDEX_ARRAY_TYPE
#32902	constant GL_INDEX_ARRAY_STRIDE
#32904	constant GL_TEXTURE_COORD_ARRAY_SIZE
#32905	constant GL_TEXTURE_COORD_ARRAY_TYPE
#32906	constant GL_TEXTURE_COORD_ARRAY_STRIDE
#32908	constant GL_EDGE_FLAG_ARRAY_STRIDE
#32910	constant GL_VERTEX_ARRAY_POINTER
#32911	constant GL_NORMAL_ARRAY_POINTER
#32912	constant GL_COLOR_ARRAY_POINTER
#32913	constant GL_INDEX_ARRAY_POINTER
#32914	constant GL_TEXTURE_COORD_ARRAY_POINTER
#32915	constant GL_EDGE_FLAG_ARRAY_POINTER
#10784	constant GL_V2F
#10785	constant GL_V3F
#10786	constant GL_C4UB_V2F
#10787	constant GL_C4UB_V3F
#10788	constant GL_C3F_V3F
#10789	constant GL_N3F_V3F
#10790	constant GL_C4F_N3F_V3F
#10791	constant GL_T2F_V3F
#10792	constant GL_T4F_V4F
#10793	constant GL_T2F_C4UB_V3F
#10794	constant GL_T2F_C3F_V3F
#10795	constant GL_T2F_N3F_V3F
#10796	constant GL_T2F_C4F_N3F_V3F
#10797	constant GL_T4F_C4F_N3F_V4F
#2976	constant GL_MATRIX_MODE
#5888	constant GL_MODELVIEW
#5889	constant GL_PROJECTION
#5890	constant GL_TEXTURE
#2832	constant GL_POINT_SMOOTH
#2833	constant GL_POINT_SIZE
#2835	constant GL_POINT_SIZE_GRANULARITY
#2834	constant GL_POINT_SIZE_RANGE
#2848	constant GL_LINE_SMOOTH
#2852	constant GL_LINE_STIPPLE
#2853	constant GL_LINE_STIPPLE_PATTERN
#2854	constant GL_LINE_STIPPLE_REPEAT
#2849	constant GL_LINE_WIDTH
#2851	constant GL_LINE_WIDTH_GRANULARITY
#2850	constant GL_LINE_WIDTH_RANGE
#6912	constant GL_POINT
#6913	constant GL_LINE
#6914	constant GL_FILL
#2304	constant GL_CW
#2305	constant GL_CCW
#1028	constant GL_FRONT
#1029	constant GL_BACK
#2880	constant GL_POLYGON_MODE
#2881	constant GL_POLYGON_SMOOTH
#2882	constant GL_POLYGON_STIPPLE
#2883	constant GL_EDGE_FLAG
#2884	constant GL_CULL_FACE
#2885	constant GL_CULL_FACE_MODE
#2886	constant GL_FRONT_FACE
#32824	constant GL_POLYGON_OFFSET_FACTOR
#10752	constant GL_POLYGON_OFFSET_UNITS
#10753	constant GL_POLYGON_OFFSET_POINT
#10754	constant GL_POLYGON_OFFSET_LINE
#32823	constant GL_POLYGON_OFFSET_FILL
#4864	constant GL_COMPILE
#4865	constant GL_COMPILE_AND_EXECUTE
#2866	constant GL_LIST_BASE
#2867	constant GL_LIST_INDEX
#2864	constant GL_LIST_MODE
#512	constant GL_NEVER
#513	constant GL_LESS
#514	constant GL_EQUAL
#515	constant GL_LEQUAL
#516	constant GL_GREATER
#517	constant GL_NOTEQUAL
#518	constant GL_GEQUAL
#519	constant GL_ALWAYS
#2929	constant GL_DEPTH_TEST
#3414	constant GL_DEPTH_BITS
#2931	constant GL_DEPTH_CLEAR_VALUE
#2932	constant GL_DEPTH_FUNC
#2928	constant GL_DEPTH_RANGE
#2930	constant GL_DEPTH_WRITEMASK
#6402	constant GL_DEPTH_COMPONENT
#2896	constant GL_LIGHTING
#16384	constant GL_LIGHT0
#16385	constant GL_LIGHT1
#16386	constant GL_LIGHT2
#16387	constant GL_LIGHT3
#16388	constant GL_LIGHT4
#16389	constant GL_LIGHT5
#16390	constant GL_LIGHT6
#16391	constant GL_LIGHT7
#4613	constant GL_SPOT_EXPONENT
#4614	constant GL_SPOT_CUTOFF
#4615	constant GL_CONSTANT_ATTENUATION
#4616	constant GL_LINEAR_ATTENUATION
#4617	constant GL_QUADRATIC_ATTENUATION
#4608	constant GL_AMBIENT
#4609	constant GL_DIFFUSE
#4610	constant GL_SPECULAR
#5633	constant GL_SHININESS
#5632	constant GL_EMISSION
#4611	constant GL_POSITION
#4612	constant GL_SPOT_DIRECTION
#5634	constant GL_AMBIENT_AND_DIFFUSE
#5635	constant GL_COLOR_INDEXES
#2898	constant GL_LIGHT_MODEL_TWO_SIDE
#2897	constant GL_LIGHT_MODEL_LOCAL_VIEWER
#2899	constant GL_LIGHT_MODEL_AMBIENT
#1032	constant GL_FRONT_AND_BACK
#2900	constant GL_SHADE_MODEL
#7424	constant GL_FLAT
#7425	constant GL_SMOOTH
#2903	constant GL_COLOR_MATERIAL
#2901	constant GL_COLOR_MATERIAL_FACE
#2902	constant GL_COLOR_MATERIAL_PARAMETER
#2977	constant GL_NORMALIZE
#12288	constant GL_CLIP_PLANE0
#12289	constant GL_CLIP_PLANE1
#12290	constant GL_CLIP_PLANE2
#12291	constant GL_CLIP_PLANE3
#12292	constant GL_CLIP_PLANE4
#12293	constant GL_CLIP_PLANE5
#3416	constant GL_ACCUM_RED_BITS
#3417	constant GL_ACCUM_GREEN_BITS
#3418	constant GL_ACCUM_BLUE_BITS
#3419	constant GL_ACCUM_ALPHA_BITS
#2944	constant GL_ACCUM_CLEAR_VALUE
#256	constant GL_ACCUM
#260	constant GL_ADD
#257	constant GL_LOAD
#259	constant GL_MULT
#258	constant GL_RETURN
#3008	constant GL_ALPHA_TEST
#3010	constant GL_ALPHA_TEST_REF
#3009	constant GL_ALPHA_TEST_FUNC
#3042	constant GL_BLEND
#3041	constant GL_BLEND_SRC
#3040	constant GL_BLEND_DST
#0	constant GL_ZERO
#1	constant GL_ONE
#768	constant GL_SRC_COLOR
#769	constant GL_ONE_MINUS_SRC_COLOR
#770	constant GL_SRC_ALPHA
#771	constant GL_ONE_MINUS_SRC_ALPHA
#772	constant GL_DST_ALPHA
#773	constant GL_ONE_MINUS_DST_ALPHA
#774	constant GL_DST_COLOR
#775	constant GL_ONE_MINUS_DST_COLOR
#776	constant GL_SRC_ALPHA_SATURATE
#7169	constant GL_FEEDBACK
#7168	constant GL_RENDER
#7170	constant GL_SELECT
#1536	constant GL_2D
#1537	constant GL_3D
#1538	constant GL_3D_COLOR
#1539	constant GL_3D_COLOR_TEXTURE
#1540	constant GL_4D_COLOR_TEXTURE
#1793	constant GL_POINT_TOKEN
#1794	constant GL_LINE_TOKEN
#1799	constant GL_LINE_RESET_TOKEN
#1795	constant GL_POLYGON_TOKEN
#1796	constant GL_BITMAP_TOKEN
#1797	constant GL_DRAW_PIXEL_TOKEN
#1798	constant GL_COPY_PIXEL_TOKEN
#1792	constant GL_PASS_THROUGH_TOKEN
#3568	constant GL_FEEDBACK_BUFFER_POINTER
#3569	constant GL_FEEDBACK_BUFFER_SIZE
#3570	constant GL_FEEDBACK_BUFFER_TYPE
#3571	constant GL_SELECTION_BUFFER_POINTER
#3572	constant GL_SELECTION_BUFFER_SIZE
#2912	constant GL_FOG
#2917	constant GL_FOG_MODE
#2914	constant GL_FOG_DENSITY
#2918	constant GL_FOG_COLOR
#2913	constant GL_FOG_INDEX
#2915	constant GL_FOG_START
#2916	constant GL_FOG_END
#9729	constant GL_LINEAR
#2048	constant GL_EXP
#2049	constant GL_EXP2
#3057	constant GL_LOGIC_OP
#3057	constant GL_INDEX_LOGIC_OP
#3058	constant GL_COLOR_LOGIC_OP
#3056	constant GL_LOGIC_OP_MODE
#5376	constant GL_CLEAR
#5391	constant GL_SET
#5379	constant GL_COPY
#5388	constant GL_COPY_INVERTED
#5381	constant GL_NOOP
#5386	constant GL_INVERT
#5377	constant GL_AND
#5390	constant GL_NAND
#5383	constant GL_OR
#5384	constant GL_NOR
#5382	constant GL_XOR
#5385	constant GL_EQUIV
#5378	constant GL_AND_REVERSE
#5380	constant GL_AND_INVERTED
#5387	constant GL_OR_REVERSE
#5389	constant GL_OR_INVERTED
#3415	constant GL_STENCIL_BITS
#2960	constant GL_STENCIL_TEST
#2961	constant GL_STENCIL_CLEAR_VALUE
#2962	constant GL_STENCIL_FUNC
#2963	constant GL_STENCIL_VALUE_MASK
#2964	constant GL_STENCIL_FAIL
#2965	constant GL_STENCIL_PASS_DEPTH_FAIL
#2966	constant GL_STENCIL_PASS_DEPTH_PASS
#2967	constant GL_STENCIL_REF
#2968	constant GL_STENCIL_WRITEMASK
#6401	constant GL_STENCIL_INDEX
#7680	constant GL_KEEP
#7681	constant GL_REPLACE
#7682	constant GL_INCR
#7683	constant GL_DECR
#0	constant GL_NONE
#1030	constant GL_LEFT
#1031	constant GL_RIGHT
#1024	constant GL_FRONT_LEFT
#1025	constant GL_FRONT_RIGHT
#1026	constant GL_BACK_LEFT
#1027	constant GL_BACK_RIGHT
#1033	constant GL_AUX0
#1034	constant GL_AUX1
#1035	constant GL_AUX2
#1036	constant GL_AUX3
#6400	constant GL_COLOR_INDEX
#6403	constant GL_RED
#6404	constant GL_GREEN
#6405	constant GL_BLUE
#6406	constant GL_ALPHA
#6409	constant GL_LUMINANCE
#6410	constant GL_LUMINANCE_ALPHA
#3413	constant GL_ALPHA_BITS
#3410	constant GL_RED_BITS
#3411	constant GL_GREEN_BITS
#3412	constant GL_BLUE_BITS
#3409	constant GL_INDEX_BITS
#3408	constant GL_SUBPIXEL_BITS
#3072	constant GL_AUX_BUFFERS
#3074	constant GL_READ_BUFFER
#3073	constant GL_DRAW_BUFFER
#3122	constant GL_DOUBLEBUFFER
#3123	constant GL_STEREO
#6656	constant GL_BITMAP
#6144	constant GL_COLOR
#6145	constant GL_DEPTH
#6146	constant GL_STENCIL
#3024	constant GL_DITHER
#6407	constant GL_RGB
#6408	constant GL_RGBA
#2865	constant GL_MAX_LIST_NESTING
#3376	constant GL_MAX_EVAL_ORDER
#3377	constant GL_MAX_LIGHTS
#3378	constant GL_MAX_CLIP_PLANES
#3379	constant GL_MAX_TEXTURE_SIZE
#3380	constant GL_MAX_PIXEL_MAP_TABLE
#3381	constant GL_MAX_ATTRIB_STACK_DEPTH
#3382	constant GL_MAX_MODELVIEW_STACK_DEPTH
#3383	constant GL_MAX_NAME_STACK_DEPTH
#3384	constant GL_MAX_PROJECTION_STACK_DEPTH
#3385	constant GL_MAX_TEXTURE_STACK_DEPTH
#3386	constant GL_MAX_VIEWPORT_DIMS
#3387	constant GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
#2992	constant GL_ATTRIB_STACK_DEPTH
#2993	constant GL_CLIENT_ATTRIB_STACK_DEPTH
#3106	constant GL_COLOR_CLEAR_VALUE
#3107	constant GL_COLOR_WRITEMASK
#2817	constant GL_CURRENT_INDEX
#2816	constant GL_CURRENT_COLOR
#2818	constant GL_CURRENT_NORMAL
#2820	constant GL_CURRENT_RASTER_COLOR
#2825	constant GL_CURRENT_RASTER_DISTANCE
#2821	constant GL_CURRENT_RASTER_INDEX
#2823	constant GL_CURRENT_RASTER_POSITION
#2822	constant GL_CURRENT_RASTER_TEXTURE_COORDS
#2824	constant GL_CURRENT_RASTER_POSITION_VALID
#2819	constant GL_CURRENT_TEXTURE_COORDS
#3104	constant GL_INDEX_CLEAR_VALUE
#3120	constant GL_INDEX_MODE
#3105	constant GL_INDEX_WRITEMASK
#2982	constant GL_MODELVIEW_MATRIX
#2979	constant GL_MODELVIEW_STACK_DEPTH
#3440	constant GL_NAME_STACK_DEPTH
#2983	constant GL_PROJECTION_MATRIX
#2980	constant GL_PROJECTION_STACK_DEPTH
#3136	constant GL_RENDER_MODE
#3121	constant GL_RGBA_MODE
#2984	constant GL_TEXTURE_MATRIX
#2981	constant GL_TEXTURE_STACK_DEPTH
#2978	constant GL_VIEWPORT
#3456	constant GL_AUTO_NORMAL
#3472	constant GL_MAP1_COLOR_4
#3473	constant GL_MAP1_INDEX
#3474	constant GL_MAP1_NORMAL
#3475	constant GL_MAP1_TEXTURE_COORD_1
#3476	constant GL_MAP1_TEXTURE_COORD_2
#3477	constant GL_MAP1_TEXTURE_COORD_3
#3478	constant GL_MAP1_TEXTURE_COORD_4
#3479	constant GL_MAP1_VERTEX_3
#3480	constant GL_MAP1_VERTEX_4
#3504	constant GL_MAP2_COLOR_4
#3505	constant GL_MAP2_INDEX
#3506	constant GL_MAP2_NORMAL
#3507	constant GL_MAP2_TEXTURE_COORD_1
#3508	constant GL_MAP2_TEXTURE_COORD_2
#3509	constant GL_MAP2_TEXTURE_COORD_3
#3510	constant GL_MAP2_TEXTURE_COORD_4
#3511	constant GL_MAP2_VERTEX_3
#3512	constant GL_MAP2_VERTEX_4
#3536	constant GL_MAP1_GRID_DOMAIN
#3537	constant GL_MAP1_GRID_SEGMENTS
#3538	constant GL_MAP2_GRID_DOMAIN
#3539	constant GL_MAP2_GRID_SEGMENTS
#2560	constant GL_COEFF
#2561	constant GL_ORDER
#2562	constant GL_DOMAIN
#3152	constant GL_PERSPECTIVE_CORRECTION_HINT
#3153	constant GL_POINT_SMOOTH_HINT
#3154	constant GL_LINE_SMOOTH_HINT
#3155	constant GL_POLYGON_SMOOTH_HINT
#3156	constant GL_FOG_HINT
#4352	constant GL_DONT_CARE
#4353	constant GL_FASTEST
#4354	constant GL_NICEST
#3088	constant GL_SCISSOR_BOX
#3089	constant GL_SCISSOR_TEST
#3344	constant GL_MAP_COLOR
#3345	constant GL_MAP_STENCIL
#3346	constant GL_INDEX_SHIFT
#3347	constant GL_INDEX_OFFSET
#3348	constant GL_RED_SCALE
#3349	constant GL_RED_BIAS
#3352	constant GL_GREEN_SCALE
#3353	constant GL_GREEN_BIAS
#3354	constant GL_BLUE_SCALE
#3355	constant GL_BLUE_BIAS
#3356	constant GL_ALPHA_SCALE
#3357	constant GL_ALPHA_BIAS
#3358	constant GL_DEPTH_SCALE
#3359	constant GL_DEPTH_BIAS
#3249	constant GL_PIXEL_MAP_S_TO_S_SIZE
#3248	constant GL_PIXEL_MAP_I_TO_I_SIZE
#3250	constant GL_PIXEL_MAP_I_TO_R_SIZE
#3251	constant GL_PIXEL_MAP_I_TO_G_SIZE
#3252	constant GL_PIXEL_MAP_I_TO_B_SIZE
#3253	constant GL_PIXEL_MAP_I_TO_A_SIZE
#3254	constant GL_PIXEL_MAP_R_TO_R_SIZE
#3255	constant GL_PIXEL_MAP_G_TO_G_SIZE
#3256	constant GL_PIXEL_MAP_B_TO_B_SIZE
#3257	constant GL_PIXEL_MAP_A_TO_A_SIZE
#3185	constant GL_PIXEL_MAP_S_TO_S
#3184	constant GL_PIXEL_MAP_I_TO_I
#3186	constant GL_PIXEL_MAP_I_TO_R
#3187	constant GL_PIXEL_MAP_I_TO_G
#3188	constant GL_PIXEL_MAP_I_TO_B
#3189	constant GL_PIXEL_MAP_I_TO_A
#3190	constant GL_PIXEL_MAP_R_TO_R
#3191	constant GL_PIXEL_MAP_G_TO_G
#3192	constant GL_PIXEL_MAP_B_TO_B
#3193	constant GL_PIXEL_MAP_A_TO_A
#3333	constant GL_PACK_ALIGNMENT
#3329	constant GL_PACK_LSB_FIRST
#3330	constant GL_PACK_ROW_LENGTH
#3332	constant GL_PACK_SKIP_PIXELS
#3331	constant GL_PACK_SKIP_ROWS
#3328	constant GL_PACK_SWAP_BYTES
#3317	constant GL_UNPACK_ALIGNMENT
#3313	constant GL_UNPACK_LSB_FIRST
#3314	constant GL_UNPACK_ROW_LENGTH
#3316	constant GL_UNPACK_SKIP_PIXELS
#3315	constant GL_UNPACK_SKIP_ROWS
#3312	constant GL_UNPACK_SWAP_BYTES
#3350	constant GL_ZOOM_X
#3351	constant GL_ZOOM_Y
#8960	constant GL_TEXTURE_ENV
#8704	constant GL_TEXTURE_ENV_MODE
#3552	constant GL_TEXTURE_1D
#3553	constant GL_TEXTURE_2D
#10242	constant GL_TEXTURE_WRAP_S
#10243	constant GL_TEXTURE_WRAP_T
#10240	constant GL_TEXTURE_MAG_FILTER
#10241	constant GL_TEXTURE_MIN_FILTER
#8705	constant GL_TEXTURE_ENV_COLOR
#3168	constant GL_TEXTURE_GEN_S
#3169	constant GL_TEXTURE_GEN_T
#3170	constant GL_TEXTURE_GEN_R
#3171	constant GL_TEXTURE_GEN_Q
#9472	constant GL_TEXTURE_GEN_MODE
#4100	constant GL_TEXTURE_BORDER_COLOR
#4096	constant GL_TEXTURE_WIDTH
#4097	constant GL_TEXTURE_HEIGHT
#4101	constant GL_TEXTURE_BORDER
#4099	constant GL_TEXTURE_COMPONENTS
#32860	constant GL_TEXTURE_RED_SIZE
#32861	constant GL_TEXTURE_GREEN_SIZE
#32862	constant GL_TEXTURE_BLUE_SIZE
#32863	constant GL_TEXTURE_ALPHA_SIZE
#32864	constant GL_TEXTURE_LUMINANCE_SIZE
#32865	constant GL_TEXTURE_INTENSITY_SIZE
#9984	constant GL_NEAREST_MIPMAP_NEAREST
#9986	constant GL_NEAREST_MIPMAP_LINEAR
#9985	constant GL_LINEAR_MIPMAP_NEAREST
#9987	constant GL_LINEAR_MIPMAP_LINEAR
#9217	constant GL_OBJECT_LINEAR
#9473	constant GL_OBJECT_PLANE
#9216	constant GL_EYE_LINEAR
#9474	constant GL_EYE_PLANE
#9218	constant GL_SPHERE_MAP
#8449	constant GL_DECAL
#8448	constant GL_MODULATE
#9728	constant GL_NEAREST
#10497	constant GL_REPEAT
#10496	constant GL_CLAMP
#8192	constant GL_S
#8193	constant GL_T
#8194	constant GL_R
#8195	constant GL_Q
#7936	constant GL_VENDOR
#7937	constant GL_RENDERER
#7938	constant GL_VERSION
#7939	constant GL_EXTENSIONS
#0	constant GL_NO_ERROR
#1280	constant GL_INVALID_ENUM
#1281	constant GL_INVALID_VALUE
#1282	constant GL_INVALID_OPERATION
#1283	constant GL_STACK_OVERFLOW
#1284	constant GL_STACK_UNDERFLOW
#1285	constant GL_OUT_OF_MEMORY
#1	constant GL_CURRENT_BIT
#2	constant GL_POINT_BIT
#4	constant GL_LINE_BIT
#8	constant GL_POLYGON_BIT
#16	constant GL_POLYGON_STIPPLE_BIT
#32	constant GL_PIXEL_MODE_BIT
#64	constant GL_LIGHTING_BIT
#128	constant GL_FOG_BIT
#256	constant GL_DEPTH_BUFFER_BIT
#512	constant GL_ACCUM_BUFFER_BIT
#1024	constant GL_STENCIL_BUFFER_BIT
#2048	constant GL_VIEWPORT_BIT
#4096	constant GL_TRANSFORM_BIT
#8192	constant GL_ENABLE_BIT
#16384	constant GL_COLOR_BUFFER_BIT
#32768	constant GL_HINT_BIT
#65536	constant GL_EVAL_BIT
#131072	constant GL_LIST_BIT
#262144	constant GL_TEXTURE_BIT
#524288	constant GL_SCISSOR_BIT
#4294967295	constant GL_ALL_ATTRIB_BITS
#32867	constant GL_PROXY_TEXTURE_1D
#32868	constant GL_PROXY_TEXTURE_2D
#32870	constant GL_TEXTURE_PRIORITY
#32871	constant GL_TEXTURE_RESIDENT
#32872	constant GL_TEXTURE_BINDING_1D
#32873	constant GL_TEXTURE_BINDING_2D
#4099	constant GL_TEXTURE_INTERNAL_FORMAT
#32827	constant GL_ALPHA4
#32828	constant GL_ALPHA8
#32829	constant GL_ALPHA12
#32830	constant GL_ALPHA16
#32831	constant GL_LUMINANCE4
#32832	constant GL_LUMINANCE8
#32833	constant GL_LUMINANCE12
#32834	constant GL_LUMINANCE16
#32835	constant GL_LUMINANCE4_ALPHA4
#32836	constant GL_LUMINANCE6_ALPHA2
#32837	constant GL_LUMINANCE8_ALPHA8
#32838	constant GL_LUMINANCE12_ALPHA4
#32839	constant GL_LUMINANCE12_ALPHA12
#32840	constant GL_LUMINANCE16_ALPHA16
#32841	constant GL_INTENSITY
#32842	constant GL_INTENSITY4
#32843	constant GL_INTENSITY8
#32844	constant GL_INTENSITY12
#32845	constant GL_INTENSITY16
#10768	constant GL_R3_G3_B2
#32847	constant GL_RGB4
#32848	constant GL_RGB5
#32849	constant GL_RGB8
#32850	constant GL_RGB10
#32851	constant GL_RGB12
#32852	constant GL_RGB16
#32853	constant GL_RGBA2
#32854	constant GL_RGBA4
#32855	constant GL_RGB5_A1
#32856	constant GL_RGBA8
#32857	constant GL_RGB10_A2
#32858	constant GL_RGBA12
#32859	constant GL_RGBA16
#1	constant GL_CLIENT_PIXEL_STORE_BIT
#2	constant GL_CLIENT_VERTEX_ARRAY_BIT
#4294967295	constant GL_ALL_CLIENT_ATTRIB_BITS
#4294967295	constant GL_CLIENT_ALL_ATTRIB_BITS
#32826	constant GL_RESCALE_NORMAL
#33071	constant GL_CLAMP_TO_EDGE
#33000	constant GL_MAX_ELEMENTS_VERTICES
#33001	constant GL_MAX_ELEMENTS_INDICES
#32992	constant GL_BGR
#32993	constant GL_BGRA
#32818	constant GL_UNSIGNED_BYTE_3_3_2
#33634	constant GL_UNSIGNED_BYTE_2_3_3_REV
#33635	constant GL_UNSIGNED_SHORT_5_6_5
#33636	constant GL_UNSIGNED_SHORT_5_6_5_REV
#32819	constant GL_UNSIGNED_SHORT_4_4_4_4
#33637	constant GL_UNSIGNED_SHORT_4_4_4_4_REV
#32820	constant GL_UNSIGNED_SHORT_5_5_5_1
#33638	constant GL_UNSIGNED_SHORT_1_5_5_5_REV
#32821	constant GL_UNSIGNED_INT_8_8_8_8
#33639	constant GL_UNSIGNED_INT_8_8_8_8_REV
#32822	constant GL_UNSIGNED_INT_10_10_10_2
#33640	constant GL_UNSIGNED_INT_2_10_10_10_REV
#33272	constant GL_LIGHT_MODEL_COLOR_CONTROL
#33273	constant GL_SINGLE_COLOR
#33274	constant GL_SEPARATE_SPECULAR_COLOR
#33082	constant GL_TEXTURE_MIN_LOD
#33083	constant GL_TEXTURE_MAX_LOD
#33084	constant GL_TEXTURE_BASE_LEVEL
#33085	constant GL_TEXTURE_MAX_LEVEL
#2834	constant GL_SMOOTH_POINT_SIZE_RANGE
#2835	constant GL_SMOOTH_POINT_SIZE_GRANULARITY
#2850	constant GL_SMOOTH_LINE_WIDTH_RANGE
#2851	constant GL_SMOOTH_LINE_WIDTH_GRANULARITY
#33901	constant GL_ALIASED_POINT_SIZE_RANGE
#33902	constant GL_ALIASED_LINE_WIDTH_RANGE
#32875	constant GL_PACK_SKIP_IMAGES
#32876	constant GL_PACK_IMAGE_HEIGHT
#32877	constant GL_UNPACK_SKIP_IMAGES
#32878	constant GL_UNPACK_IMAGE_HEIGHT
#32879	constant GL_TEXTURE_3D
#32880	constant GL_PROXY_TEXTURE_3D
#32881	constant GL_TEXTURE_DEPTH
#32882	constant GL_TEXTURE_WRAP_R
#32883	constant GL_MAX_3D_TEXTURE_SIZE
#32874	constant GL_TEXTURE_BINDING_3D
#32769	constant GL_CONSTANT_COLOR
#32770	constant GL_ONE_MINUS_CONSTANT_COLOR
#32771	constant GL_CONSTANT_ALPHA
#32772	constant GL_ONE_MINUS_CONSTANT_ALPHA
#32976	constant GL_COLOR_TABLE
#32977	constant GL_POST_CONVOLUTION_COLOR_TABLE
#32978	constant GL_POST_COLOR_MATRIX_COLOR_TABLE
#32979	constant GL_PROXY_COLOR_TABLE
#32980	constant GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
#32981	constant GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
#32982	constant GL_COLOR_TABLE_SCALE
#32983	constant GL_COLOR_TABLE_BIAS
#32984	constant GL_COLOR_TABLE_FORMAT
#32985	constant GL_COLOR_TABLE_WIDTH
#32986	constant GL_COLOR_TABLE_RED_SIZE
#32987	constant GL_COLOR_TABLE_GREEN_SIZE
#32988	constant GL_COLOR_TABLE_BLUE_SIZE
#32989	constant GL_COLOR_TABLE_ALPHA_SIZE
#32990	constant GL_COLOR_TABLE_LUMINANCE_SIZE
#32991	constant GL_COLOR_TABLE_INTENSITY_SIZE
#32784	constant GL_CONVOLUTION_1D
#32785	constant GL_CONVOLUTION_2D
#32786	constant GL_SEPARABLE_2D
#32787	constant GL_CONVOLUTION_BORDER_MODE
#32788	constant GL_CONVOLUTION_FILTER_SCALE
#32789	constant GL_CONVOLUTION_FILTER_BIAS
#32790	constant GL_REDUCE
#32791	constant GL_CONVOLUTION_FORMAT
#32792	constant GL_CONVOLUTION_WIDTH
#32793	constant GL_CONVOLUTION_HEIGHT
#32794	constant GL_MAX_CONVOLUTION_WIDTH
#32795	constant GL_MAX_CONVOLUTION_HEIGHT
#32796	constant GL_POST_CONVOLUTION_RED_SCALE
#32797	constant GL_POST_CONVOLUTION_GREEN_SCALE
#32798	constant GL_POST_CONVOLUTION_BLUE_SCALE
#32799	constant GL_POST_CONVOLUTION_ALPHA_SCALE
#32800	constant GL_POST_CONVOLUTION_RED_BIAS
#32801	constant GL_POST_CONVOLUTION_GREEN_BIAS
#32802	constant GL_POST_CONVOLUTION_BLUE_BIAS
#32803	constant GL_POST_CONVOLUTION_ALPHA_BIAS
#33105	constant GL_CONSTANT_BORDER
#33107	constant GL_REPLICATE_BORDER
#33108	constant GL_CONVOLUTION_BORDER_COLOR
#32945	constant GL_COLOR_MATRIX
#32946	constant GL_COLOR_MATRIX_STACK_DEPTH
#32947	constant GL_MAX_COLOR_MATRIX_STACK_DEPTH
#32948	constant GL_POST_COLOR_MATRIX_RED_SCALE
#32949	constant GL_POST_COLOR_MATRIX_GREEN_SCALE
#32950	constant GL_POST_COLOR_MATRIX_BLUE_SCALE
#32951	constant GL_POST_COLOR_MATRIX_ALPHA_SCALE
#32952	constant GL_POST_COLOR_MATRIX_RED_BIAS
#32953	constant GL_POST_COLOR_MATRIX_GREEN_BIAS
#32954	constant GL_POST_COLOR_MATRIX_BLUE_BIAS
#32955	constant GL_POST_COLOR_MATRIX_ALPHA_BIAS
#32804	constant GL_HISTOGRAM
#32805	constant GL_PROXY_HISTOGRAM
#32806	constant GL_HISTOGRAM_WIDTH
#32807	constant GL_HISTOGRAM_FORMAT
#32808	constant GL_HISTOGRAM_RED_SIZE
#32809	constant GL_HISTOGRAM_GREEN_SIZE
#32810	constant GL_HISTOGRAM_BLUE_SIZE
#32811	constant GL_HISTOGRAM_ALPHA_SIZE
#32812	constant GL_HISTOGRAM_LUMINANCE_SIZE
#32813	constant GL_HISTOGRAM_SINK
#32814	constant GL_MINMAX
#32815	constant GL_MINMAX_FORMAT
#32816	constant GL_MINMAX_SINK
#32817	constant GL_TABLE_TOO_LARGE
#32777	constant GL_BLEND_EQUATION
#32775	constant GL_MIN
#32776	constant GL_MAX
#32774	constant GL_FUNC_ADD
#32778	constant GL_FUNC_SUBTRACT
#32779	constant GL_FUNC_REVERSE_SUBTRACT
#32773	constant GL_BLEND_COLOR
#33984	constant GL_TEXTURE0
#33985	constant GL_TEXTURE1
#33986	constant GL_TEXTURE2
#33987	constant GL_TEXTURE3
#33988	constant GL_TEXTURE4
#33989	constant GL_TEXTURE5
#33990	constant GL_TEXTURE6
#33991	constant GL_TEXTURE7
#33992	constant GL_TEXTURE8
#33993	constant GL_TEXTURE9
#33994	constant GL_TEXTURE10
#33995	constant GL_TEXTURE11
#33996	constant GL_TEXTURE12
#33997	constant GL_TEXTURE13
#33998	constant GL_TEXTURE14
#33999	constant GL_TEXTURE15
#34000	constant GL_TEXTURE16
#34001	constant GL_TEXTURE17
#34002	constant GL_TEXTURE18
#34003	constant GL_TEXTURE19
#34004	constant GL_TEXTURE20
#34005	constant GL_TEXTURE21
#34006	constant GL_TEXTURE22
#34007	constant GL_TEXTURE23
#34008	constant GL_TEXTURE24
#34009	constant GL_TEXTURE25
#34010	constant GL_TEXTURE26
#34011	constant GL_TEXTURE27
#34012	constant GL_TEXTURE28
#34013	constant GL_TEXTURE29
#34014	constant GL_TEXTURE30
#34015	constant GL_TEXTURE31
#34016	constant GL_ACTIVE_TEXTURE
#34017	constant GL_CLIENT_ACTIVE_TEXTURE
#34018	constant GL_MAX_TEXTURE_UNITS
#34065	constant GL_NORMAL_MAP
#34066	constant GL_REFLECTION_MAP
#34067	constant GL_TEXTURE_CUBE_MAP
#34068	constant GL_TEXTURE_BINDING_CUBE_MAP
#34069	constant GL_TEXTURE_CUBE_MAP_POSITIVE_X
#34070	constant GL_TEXTURE_CUBE_MAP_NEGATIVE_X
#34071	constant GL_TEXTURE_CUBE_MAP_POSITIVE_Y
#34072	constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
#34073	constant GL_TEXTURE_CUBE_MAP_POSITIVE_Z
#34074	constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
#34075	constant GL_PROXY_TEXTURE_CUBE_MAP
#34076	constant GL_MAX_CUBE_MAP_TEXTURE_SIZE
#34025	constant GL_COMPRESSED_ALPHA
#34026	constant GL_COMPRESSED_LUMINANCE
#34027	constant GL_COMPRESSED_LUMINANCE_ALPHA
#34028	constant GL_COMPRESSED_INTENSITY
#34029	constant GL_COMPRESSED_RGB
#34030	constant GL_COMPRESSED_RGBA
#34031	constant GL_TEXTURE_COMPRESSION_HINT
#34464	constant GL_TEXTURE_COMPRESSED_IMAGE_SIZE
#34465	constant GL_TEXTURE_COMPRESSED
#34466	constant GL_NUM_COMPRESSED_TEXTURE_FORMATS
#34467	constant GL_COMPRESSED_TEXTURE_FORMATS
#32925	constant GL_MULTISAMPLE
#32926	constant GL_SAMPLE_ALPHA_TO_COVERAGE
#32927	constant GL_SAMPLE_ALPHA_TO_ONE
#32928	constant GL_SAMPLE_COVERAGE
#32936	constant GL_SAMPLE_BUFFERS
#32937	constant GL_SAMPLES
#32938	constant GL_SAMPLE_COVERAGE_VALUE
#32939	constant GL_SAMPLE_COVERAGE_INVERT
#536870912	constant GL_MULTISAMPLE_BIT
#34019	constant GL_TRANSPOSE_MODELVIEW_MATRIX
#34020	constant GL_TRANSPOSE_PROJECTION_MATRIX
#34021	constant GL_TRANSPOSE_TEXTURE_MATRIX
#34022	constant GL_TRANSPOSE_COLOR_MATRIX
#34160	constant GL_COMBINE
#34161	constant GL_COMBINE_RGB
#34162	constant GL_COMBINE_ALPHA
#34176	constant GL_SOURCE0_RGB
#34177	constant GL_SOURCE1_RGB
#34178	constant GL_SOURCE2_RGB
#34184	constant GL_SOURCE0_ALPHA
#34185	constant GL_SOURCE1_ALPHA
#34186	constant GL_SOURCE2_ALPHA
#34192	constant GL_OPERAND0_RGB
#34193	constant GL_OPERAND1_RGB
#34194	constant GL_OPERAND2_RGB
#34200	constant GL_OPERAND0_ALPHA
#34201	constant GL_OPERAND1_ALPHA
#34202	constant GL_OPERAND2_ALPHA
#34163	constant GL_RGB_SCALE
#34164	constant GL_ADD_SIGNED
#34165	constant GL_INTERPOLATE
#34023	constant GL_SUBTRACT
#34166	constant GL_CONSTANT
#34167	constant GL_PRIMARY_COLOR
#34168	constant GL_PREVIOUS
#34478	constant GL_DOT3_RGB
#34479	constant GL_DOT3_RGBA
#33069	constant GL_CLAMP_TO_BORDER
#1	constant GL_ARB_multitexture
#33984	constant GL_TEXTURE0_ARB
#33985	constant GL_TEXTURE1_ARB
#33986	constant GL_TEXTURE2_ARB
#33987	constant GL_TEXTURE3_ARB
#33988	constant GL_TEXTURE4_ARB
#33989	constant GL_TEXTURE5_ARB
#33990	constant GL_TEXTURE6_ARB
#33991	constant GL_TEXTURE7_ARB
#33992	constant GL_TEXTURE8_ARB
#33993	constant GL_TEXTURE9_ARB
#33994	constant GL_TEXTURE10_ARB
#33995	constant GL_TEXTURE11_ARB
#33996	constant GL_TEXTURE12_ARB
#33997	constant GL_TEXTURE13_ARB
#33998	constant GL_TEXTURE14_ARB
#33999	constant GL_TEXTURE15_ARB
#34000	constant GL_TEXTURE16_ARB
#34001	constant GL_TEXTURE17_ARB
#34002	constant GL_TEXTURE18_ARB
#34003	constant GL_TEXTURE19_ARB
#34004	constant GL_TEXTURE20_ARB
#34005	constant GL_TEXTURE21_ARB
#34006	constant GL_TEXTURE22_ARB
#34007	constant GL_TEXTURE23_ARB
#34008	constant GL_TEXTURE24_ARB
#34009	constant GL_TEXTURE25_ARB
#34010	constant GL_TEXTURE26_ARB
#34011	constant GL_TEXTURE27_ARB
#34012	constant GL_TEXTURE28_ARB
#34013	constant GL_TEXTURE29_ARB
#34014	constant GL_TEXTURE30_ARB
#34015	constant GL_TEXTURE31_ARB
#34016	constant GL_ACTIVE_TEXTURE_ARB
#34017	constant GL_CLIENT_ACTIVE_TEXTURE_ARB
#34018	constant GL_MAX_TEXTURE_UNITS_ARB
#1	constant GL_MESA_packed_depth_stencil
#34640	constant GL_DEPTH_STENCIL_MESA
#34641	constant GL_UNSIGNED_INT_24_8_MESA
#34642	constant GL_UNSIGNED_INT_8_24_REV_MESA
#34643	constant GL_UNSIGNED_SHORT_15_1_MESA
#34644	constant GL_UNSIGNED_SHORT_1_15_REV_MESA
#1	constant GL_ATI_blend_equation_separate
#34877	constant GL_ALPHA_BLEND_EQUATION_ATI
#1	constant GL_OES_EGL_image
#1	constant __glext_h_
#20171010	constant GL_GLEXT_VERSION
#1	constant GL_VERSION_1_4
#32968	constant GL_BLEND_DST_RGB
#32969	constant GL_BLEND_SRC_RGB
#32970	constant GL_BLEND_DST_ALPHA
#32971	constant GL_BLEND_SRC_ALPHA
#33064	constant GL_POINT_FADE_THRESHOLD_SIZE
#33189	constant GL_DEPTH_COMPONENT16
#33190	constant GL_DEPTH_COMPONENT24
#33191	constant GL_DEPTH_COMPONENT32
#33648	constant GL_MIRRORED_REPEAT
#34045	constant GL_MAX_TEXTURE_LOD_BIAS
#34049	constant GL_TEXTURE_LOD_BIAS
#34055	constant GL_INCR_WRAP
#34056	constant GL_DECR_WRAP
#34890	constant GL_TEXTURE_DEPTH_SIZE
#34892	constant GL_TEXTURE_COMPARE_MODE
#34893	constant GL_TEXTURE_COMPARE_FUNC
#33062	constant GL_POINT_SIZE_MIN
#33063	constant GL_POINT_SIZE_MAX
#33065	constant GL_POINT_DISTANCE_ATTENUATION
#33169	constant GL_GENERATE_MIPMAP
#33170	constant GL_GENERATE_MIPMAP_HINT
#33872	constant GL_FOG_COORDINATE_SOURCE
#33873	constant GL_FOG_COORDINATE
#33874	constant GL_FRAGMENT_DEPTH
#33875	constant GL_CURRENT_FOG_COORDINATE
#33876	constant GL_FOG_COORDINATE_ARRAY_TYPE
#33877	constant GL_FOG_COORDINATE_ARRAY_STRIDE
#33878	constant GL_FOG_COORDINATE_ARRAY_POINTER
#33879	constant GL_FOG_COORDINATE_ARRAY
#33880	constant GL_COLOR_SUM
#33881	constant GL_CURRENT_SECONDARY_COLOR
#33882	constant GL_SECONDARY_COLOR_ARRAY_SIZE
#33883	constant GL_SECONDARY_COLOR_ARRAY_TYPE
#33884	constant GL_SECONDARY_COLOR_ARRAY_STRIDE
#33885	constant GL_SECONDARY_COLOR_ARRAY_POINTER
#33886	constant GL_SECONDARY_COLOR_ARRAY
#34048	constant GL_TEXTURE_FILTER_CONTROL
#34891	constant GL_DEPTH_TEXTURE_MODE
#34894	constant GL_COMPARE_R_TO_TEXTURE
#1	constant GL_VERSION_1_5
#34660	constant GL_BUFFER_SIZE
#34661	constant GL_BUFFER_USAGE
#34916	constant GL_QUERY_COUNTER_BITS
#34917	constant GL_CURRENT_QUERY
#34918	constant GL_QUERY_RESULT
#34919	constant GL_QUERY_RESULT_AVAILABLE
#34962	constant GL_ARRAY_BUFFER
#34963	constant GL_ELEMENT_ARRAY_BUFFER
#34964	constant GL_ARRAY_BUFFER_BINDING
#34965	constant GL_ELEMENT_ARRAY_BUFFER_BINDING
#34975	constant GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#35000	constant GL_READ_ONLY
#35001	constant GL_WRITE_ONLY
#35002	constant GL_READ_WRITE
#35003	constant GL_BUFFER_ACCESS
#35004	constant GL_BUFFER_MAPPED
#35005	constant GL_BUFFER_MAP_POINTER
#35040	constant GL_STREAM_DRAW
#35041	constant GL_STREAM_READ
#35042	constant GL_STREAM_COPY
#35044	constant GL_STATIC_DRAW
#35045	constant GL_STATIC_READ
#35046	constant GL_STATIC_COPY
#35048	constant GL_DYNAMIC_DRAW
#35049	constant GL_DYNAMIC_READ
#35050	constant GL_DYNAMIC_COPY
#35092	constant GL_SAMPLES_PASSED
#34185	constant GL_SRC1_ALPHA
#34966	constant GL_VERTEX_ARRAY_BUFFER_BINDING
#34967	constant GL_NORMAL_ARRAY_BUFFER_BINDING
#34968	constant GL_COLOR_ARRAY_BUFFER_BINDING
#34969	constant GL_INDEX_ARRAY_BUFFER_BINDING
#34970	constant GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
#34971	constant GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
#34972	constant GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
#34973	constant GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
#34974	constant GL_WEIGHT_ARRAY_BUFFER_BINDING
#33872	constant GL_FOG_COORD_SRC
#33873	constant GL_FOG_COORD
#33875	constant GL_CURRENT_FOG_COORD
#33876	constant GL_FOG_COORD_ARRAY_TYPE
#33877	constant GL_FOG_COORD_ARRAY_STRIDE
#33878	constant GL_FOG_COORD_ARRAY_POINTER
#33879	constant GL_FOG_COORD_ARRAY
#34973	constant GL_FOG_COORD_ARRAY_BUFFER_BINDING
#34176	constant GL_SRC0_RGB
#34177	constant GL_SRC1_RGB
#34178	constant GL_SRC2_RGB
#34184	constant GL_SRC0_ALPHA
#34186	constant GL_SRC2_ALPHA
#1	constant GL_VERSION_2_0
#32777	constant GL_BLEND_EQUATION_RGB
#34338	constant GL_VERTEX_ATTRIB_ARRAY_ENABLED
#34339	constant GL_VERTEX_ATTRIB_ARRAY_SIZE
#34340	constant GL_VERTEX_ATTRIB_ARRAY_STRIDE
#34341	constant GL_VERTEX_ATTRIB_ARRAY_TYPE
#34342	constant GL_CURRENT_VERTEX_ATTRIB
#34370	constant GL_VERTEX_PROGRAM_POINT_SIZE
#34373	constant GL_VERTEX_ATTRIB_ARRAY_POINTER
#34816	constant GL_STENCIL_BACK_FUNC
#34817	constant GL_STENCIL_BACK_FAIL
#34818	constant GL_STENCIL_BACK_PASS_DEPTH_FAIL
#34819	constant GL_STENCIL_BACK_PASS_DEPTH_PASS
#34852	constant GL_MAX_DRAW_BUFFERS
#34853	constant GL_DRAW_BUFFER0
#34854	constant GL_DRAW_BUFFER1
#34855	constant GL_DRAW_BUFFER2
#34856	constant GL_DRAW_BUFFER3
#34857	constant GL_DRAW_BUFFER4
#34858	constant GL_DRAW_BUFFER5
#34859	constant GL_DRAW_BUFFER6
#34860	constant GL_DRAW_BUFFER7
#34861	constant GL_DRAW_BUFFER8
#34862	constant GL_DRAW_BUFFER9
#34863	constant GL_DRAW_BUFFER10
#34864	constant GL_DRAW_BUFFER11
#34865	constant GL_DRAW_BUFFER12
#34866	constant GL_DRAW_BUFFER13
#34867	constant GL_DRAW_BUFFER14
#34868	constant GL_DRAW_BUFFER15
#34877	constant GL_BLEND_EQUATION_ALPHA
#34921	constant GL_MAX_VERTEX_ATTRIBS
#34922	constant GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
#34930	constant GL_MAX_TEXTURE_IMAGE_UNITS
#35632	constant GL_FRAGMENT_SHADER
#35633	constant GL_VERTEX_SHADER
#35657	constant GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
#35658	constant GL_MAX_VERTEX_UNIFORM_COMPONENTS
#35659	constant GL_MAX_VARYING_FLOATS
#35660	constant GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
#35661	constant GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
#35663	constant GL_SHADER_TYPE
#35664	constant GL_FLOAT_VEC2
#35665	constant GL_FLOAT_VEC3
#35666	constant GL_FLOAT_VEC4
#35667	constant GL_INT_VEC2
#35668	constant GL_INT_VEC3
#35669	constant GL_INT_VEC4
#35670	constant GL_BOOL
#35671	constant GL_BOOL_VEC2
#35672	constant GL_BOOL_VEC3
#35673	constant GL_BOOL_VEC4
#35674	constant GL_FLOAT_MAT2
#35675	constant GL_FLOAT_MAT3
#35676	constant GL_FLOAT_MAT4
#35677	constant GL_SAMPLER_1D
#35678	constant GL_SAMPLER_2D
#35679	constant GL_SAMPLER_3D
#35680	constant GL_SAMPLER_CUBE
#35681	constant GL_SAMPLER_1D_SHADOW
#35682	constant GL_SAMPLER_2D_SHADOW
#35712	constant GL_DELETE_STATUS
#35713	constant GL_COMPILE_STATUS
#35714	constant GL_LINK_STATUS
#35715	constant GL_VALIDATE_STATUS
#35716	constant GL_INFO_LOG_LENGTH
#35717	constant GL_ATTACHED_SHADERS
#35718	constant GL_ACTIVE_UNIFORMS
#35719	constant GL_ACTIVE_UNIFORM_MAX_LENGTH
#35720	constant GL_SHADER_SOURCE_LENGTH
#35721	constant GL_ACTIVE_ATTRIBUTES
#35722	constant GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
#35723	constant GL_FRAGMENT_SHADER_DERIVATIVE_HINT
#35724	constant GL_SHADING_LANGUAGE_VERSION
#35725	constant GL_CURRENT_PROGRAM
#36000	constant GL_POINT_SPRITE_COORD_ORIGIN
#36001	constant GL_LOWER_LEFT
#36002	constant GL_UPPER_LEFT
#36003	constant GL_STENCIL_BACK_REF
#36004	constant GL_STENCIL_BACK_VALUE_MASK
#36005	constant GL_STENCIL_BACK_WRITEMASK
#34371	constant GL_VERTEX_PROGRAM_TWO_SIDE
#34913	constant GL_POINT_SPRITE
#34914	constant GL_COORD_REPLACE
#34929	constant GL_MAX_TEXTURE_COORDS
#1	constant GL_VERSION_2_1
#35051	constant GL_PIXEL_PACK_BUFFER
#35052	constant GL_PIXEL_UNPACK_BUFFER
#35053	constant GL_PIXEL_PACK_BUFFER_BINDING
#35055	constant GL_PIXEL_UNPACK_BUFFER_BINDING
#35685	constant GL_FLOAT_MAT2x3
#35686	constant GL_FLOAT_MAT2x4
#35687	constant GL_FLOAT_MAT3x2
#35688	constant GL_FLOAT_MAT3x4
#35689	constant GL_FLOAT_MAT4x2
#35690	constant GL_FLOAT_MAT4x3
#35904	constant GL_SRGB
#35905	constant GL_SRGB8
#35906	constant GL_SRGB_ALPHA
#35907	constant GL_SRGB8_ALPHA8
#35912	constant GL_COMPRESSED_SRGB
#35913	constant GL_COMPRESSED_SRGB_ALPHA
#33887	constant GL_CURRENT_RASTER_SECONDARY_COLOR
#35908	constant GL_SLUMINANCE_ALPHA
#35909	constant GL_SLUMINANCE8_ALPHA8
#35910	constant GL_SLUMINANCE
#35911	constant GL_SLUMINANCE8
#35914	constant GL_COMPRESSED_SLUMINANCE
#35915	constant GL_COMPRESSED_SLUMINANCE_ALPHA
#1	constant GL_VERSION_3_0
#34894	constant GL_COMPARE_REF_TO_TEXTURE
#12288	constant GL_CLIP_DISTANCE0
#12289	constant GL_CLIP_DISTANCE1
#12290	constant GL_CLIP_DISTANCE2
#12291	constant GL_CLIP_DISTANCE3
#12292	constant GL_CLIP_DISTANCE4
#12293	constant GL_CLIP_DISTANCE5
#12294	constant GL_CLIP_DISTANCE6
#12295	constant GL_CLIP_DISTANCE7
#3378	constant GL_MAX_CLIP_DISTANCES
#33307	constant GL_MAJOR_VERSION
#33308	constant GL_MINOR_VERSION
#33309	constant GL_NUM_EXTENSIONS
#33310	constant GL_CONTEXT_FLAGS
#33317	constant GL_COMPRESSED_RED
#33318	constant GL_COMPRESSED_RG
#1	constant GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
#34836	constant GL_RGBA32F
#34837	constant GL_RGB32F
#34842	constant GL_RGBA16F
#34843	constant GL_RGB16F
#35069	constant GL_VERTEX_ATTRIB_ARRAY_INTEGER
#35071	constant GL_MAX_ARRAY_TEXTURE_LAYERS
#35076	constant GL_MIN_PROGRAM_TEXEL_OFFSET
#35077	constant GL_MAX_PROGRAM_TEXEL_OFFSET
#35100	constant GL_CLAMP_READ_COLOR
#35101	constant GL_FIXED_ONLY
#35659	constant GL_MAX_VARYING_COMPONENTS
#35864	constant GL_TEXTURE_1D_ARRAY
#35865	constant GL_PROXY_TEXTURE_1D_ARRAY
#35866	constant GL_TEXTURE_2D_ARRAY
#35867	constant GL_PROXY_TEXTURE_2D_ARRAY
#35868	constant GL_TEXTURE_BINDING_1D_ARRAY
#35869	constant GL_TEXTURE_BINDING_2D_ARRAY
#35898	constant GL_R11F_G11F_B10F
#35899	constant GL_UNSIGNED_INT_10F_11F_11F_REV
#35901	constant GL_RGB9_E5
#35902	constant GL_UNSIGNED_INT_5_9_9_9_REV
#35903	constant GL_TEXTURE_SHARED_SIZE
#35958	constant GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
#35967	constant GL_TRANSFORM_FEEDBACK_BUFFER_MODE
#35968	constant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
#35971	constant GL_TRANSFORM_FEEDBACK_VARYINGS
#35972	constant GL_TRANSFORM_FEEDBACK_BUFFER_START
#35973	constant GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
#35975	constant GL_PRIMITIVES_GENERATED
#35976	constant GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
#35977	constant GL_RASTERIZER_DISCARD
#35978	constant GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
#35979	constant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
#35980	constant GL_INTERLEAVED_ATTRIBS
#35981	constant GL_SEPARATE_ATTRIBS
#35982	constant GL_TRANSFORM_FEEDBACK_BUFFER
#35983	constant GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
#36208	constant GL_RGBA32UI
#36209	constant GL_RGB32UI
#36214	constant GL_RGBA16UI
#36215	constant GL_RGB16UI
#36220	constant GL_RGBA8UI
#36221	constant GL_RGB8UI
#36226	constant GL_RGBA32I
#36227	constant GL_RGB32I
#36232	constant GL_RGBA16I
#36233	constant GL_RGB16I
#36238	constant GL_RGBA8I
#36239	constant GL_RGB8I
#36244	constant GL_RED_INTEGER
#36245	constant GL_GREEN_INTEGER
#36246	constant GL_BLUE_INTEGER
#36248	constant GL_RGB_INTEGER
#36249	constant GL_RGBA_INTEGER
#36250	constant GL_BGR_INTEGER
#36251	constant GL_BGRA_INTEGER
#36288	constant GL_SAMPLER_1D_ARRAY
#36289	constant GL_SAMPLER_2D_ARRAY
#36291	constant GL_SAMPLER_1D_ARRAY_SHADOW
#36292	constant GL_SAMPLER_2D_ARRAY_SHADOW
#36293	constant GL_SAMPLER_CUBE_SHADOW
#36294	constant GL_UNSIGNED_INT_VEC2
#36295	constant GL_UNSIGNED_INT_VEC3
#36296	constant GL_UNSIGNED_INT_VEC4
#36297	constant GL_INT_SAMPLER_1D
#36298	constant GL_INT_SAMPLER_2D
#36299	constant GL_INT_SAMPLER_3D
#36300	constant GL_INT_SAMPLER_CUBE
#36302	constant GL_INT_SAMPLER_1D_ARRAY
#36303	constant GL_INT_SAMPLER_2D_ARRAY
#36305	constant GL_UNSIGNED_INT_SAMPLER_1D
#36306	constant GL_UNSIGNED_INT_SAMPLER_2D
#36307	constant GL_UNSIGNED_INT_SAMPLER_3D
#36308	constant GL_UNSIGNED_INT_SAMPLER_CUBE
#36310	constant GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
#36311	constant GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
#36371	constant GL_QUERY_WAIT
#36372	constant GL_QUERY_NO_WAIT
#36373	constant GL_QUERY_BY_REGION_WAIT
#36374	constant GL_QUERY_BY_REGION_NO_WAIT
#37151	constant GL_BUFFER_ACCESS_FLAGS
#37152	constant GL_BUFFER_MAP_LENGTH
#37153	constant GL_BUFFER_MAP_OFFSET
#36012	constant GL_DEPTH_COMPONENT32F
#36013	constant GL_DEPTH32F_STENCIL8
#36269	constant GL_FLOAT_32_UNSIGNED_INT_24_8_REV
#1286	constant GL_INVALID_FRAMEBUFFER_OPERATION
#33296	constant GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
#33297	constant GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
#33298	constant GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
#33299	constant GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
#33300	constant GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
#33301	constant GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
#33302	constant GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
#33303	constant GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
#33304	constant GL_FRAMEBUFFER_DEFAULT
#33305	constant GL_FRAMEBUFFER_UNDEFINED
#33306	constant GL_DEPTH_STENCIL_ATTACHMENT
#34024	constant GL_MAX_RENDERBUFFER_SIZE
#34041	constant GL_DEPTH_STENCIL
#34042	constant GL_UNSIGNED_INT_24_8
#35056	constant GL_DEPTH24_STENCIL8
#35057	constant GL_TEXTURE_STENCIL_SIZE
#35856	constant GL_TEXTURE_RED_TYPE
#35857	constant GL_TEXTURE_GREEN_TYPE
#35858	constant GL_TEXTURE_BLUE_TYPE
#35859	constant GL_TEXTURE_ALPHA_TYPE
#35862	constant GL_TEXTURE_DEPTH_TYPE
#35863	constant GL_UNSIGNED_NORMALIZED
#36006	constant GL_FRAMEBUFFER_BINDING
#36006	constant GL_DRAW_FRAMEBUFFER_BINDING
#36007	constant GL_RENDERBUFFER_BINDING
#36008	constant GL_READ_FRAMEBUFFER
#36009	constant GL_DRAW_FRAMEBUFFER
#36010	constant GL_READ_FRAMEBUFFER_BINDING
#36011	constant GL_RENDERBUFFER_SAMPLES
#36048	constant GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
#36049	constant GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
#36050	constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
#36051	constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
#36052	constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
#36053	constant GL_FRAMEBUFFER_COMPLETE
#36054	constant GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
#36055	constant GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
#36059	constant GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
#36060	constant GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
#36061	constant GL_FRAMEBUFFER_UNSUPPORTED
#36063	constant GL_MAX_COLOR_ATTACHMENTS
#36064	constant GL_COLOR_ATTACHMENT0
#36065	constant GL_COLOR_ATTACHMENT1
#36066	constant GL_COLOR_ATTACHMENT2
#36067	constant GL_COLOR_ATTACHMENT3
#36068	constant GL_COLOR_ATTACHMENT4
#36069	constant GL_COLOR_ATTACHMENT5
#36070	constant GL_COLOR_ATTACHMENT6
#36071	constant GL_COLOR_ATTACHMENT7
#36072	constant GL_COLOR_ATTACHMENT8
#36073	constant GL_COLOR_ATTACHMENT9
#36074	constant GL_COLOR_ATTACHMENT10
#36075	constant GL_COLOR_ATTACHMENT11
#36076	constant GL_COLOR_ATTACHMENT12
#36077	constant GL_COLOR_ATTACHMENT13
#36078	constant GL_COLOR_ATTACHMENT14
#36079	constant GL_COLOR_ATTACHMENT15
#36080	constant GL_COLOR_ATTACHMENT16
#36081	constant GL_COLOR_ATTACHMENT17
#36082	constant GL_COLOR_ATTACHMENT18
#36083	constant GL_COLOR_ATTACHMENT19
#36084	constant GL_COLOR_ATTACHMENT20
#36085	constant GL_COLOR_ATTACHMENT21
#36086	constant GL_COLOR_ATTACHMENT22
#36087	constant GL_COLOR_ATTACHMENT23
#36088	constant GL_COLOR_ATTACHMENT24
#36089	constant GL_COLOR_ATTACHMENT25
#36090	constant GL_COLOR_ATTACHMENT26
#36091	constant GL_COLOR_ATTACHMENT27
#36092	constant GL_COLOR_ATTACHMENT28
#36093	constant GL_COLOR_ATTACHMENT29
#36094	constant GL_COLOR_ATTACHMENT30
#36095	constant GL_COLOR_ATTACHMENT31
#36096	constant GL_DEPTH_ATTACHMENT
#36128	constant GL_STENCIL_ATTACHMENT
#36160	constant GL_FRAMEBUFFER
#36161	constant GL_RENDERBUFFER
#36162	constant GL_RENDERBUFFER_WIDTH
#36163	constant GL_RENDERBUFFER_HEIGHT
#36164	constant GL_RENDERBUFFER_INTERNAL_FORMAT
#36166	constant GL_STENCIL_INDEX1
#36167	constant GL_STENCIL_INDEX4
#36168	constant GL_STENCIL_INDEX8
#36169	constant GL_STENCIL_INDEX16
#36176	constant GL_RENDERBUFFER_RED_SIZE
#36177	constant GL_RENDERBUFFER_GREEN_SIZE
#36178	constant GL_RENDERBUFFER_BLUE_SIZE
#36179	constant GL_RENDERBUFFER_ALPHA_SIZE
#36180	constant GL_RENDERBUFFER_DEPTH_SIZE
#36181	constant GL_RENDERBUFFER_STENCIL_SIZE
#36182	constant GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
#36183	constant GL_MAX_SAMPLES
#33314	constant GL_INDEX
#35860	constant GL_TEXTURE_LUMINANCE_TYPE
#35861	constant GL_TEXTURE_INTENSITY_TYPE
#36281	constant GL_FRAMEBUFFER_SRGB
#5131	constant GL_HALF_FLOAT
#1	constant GL_MAP_READ_BIT
#2	constant GL_MAP_WRITE_BIT
#4	constant GL_MAP_INVALIDATE_RANGE_BIT
#8	constant GL_MAP_INVALIDATE_BUFFER_BIT
#16	constant GL_MAP_FLUSH_EXPLICIT_BIT
#32	constant GL_MAP_UNSYNCHRONIZED_BIT
#36283	constant GL_COMPRESSED_RED_RGTC1
#36284	constant GL_COMPRESSED_SIGNED_RED_RGTC1
#36285	constant GL_COMPRESSED_RG_RGTC2
#36286	constant GL_COMPRESSED_SIGNED_RG_RGTC2
#33319	constant GL_RG
#33320	constant GL_RG_INTEGER
#33321	constant GL_R8
#33322	constant GL_R16
#33323	constant GL_RG8
#33324	constant GL_RG16
#33325	constant GL_R16F
#33326	constant GL_R32F
#33327	constant GL_RG16F
#33328	constant GL_RG32F
#33329	constant GL_R8I
#33330	constant GL_R8UI
#33331	constant GL_R16I
#33332	constant GL_R16UI
#33333	constant GL_R32I
#33334	constant GL_R32UI
#33335	constant GL_RG8I
#33336	constant GL_RG8UI
#33337	constant GL_RG16I
#33338	constant GL_RG16UI
#33339	constant GL_RG32I
#33340	constant GL_RG32UI
#34229	constant GL_VERTEX_ARRAY_BINDING
#35098	constant GL_CLAMP_VERTEX_COLOR
#35099	constant GL_CLAMP_FRAGMENT_COLOR
#36247	constant GL_ALPHA_INTEGER
#1	constant GL_VERSION_3_1
#35683	constant GL_SAMPLER_2D_RECT
#35684	constant GL_SAMPLER_2D_RECT_SHADOW
#36290	constant GL_SAMPLER_BUFFER
#36301	constant GL_INT_SAMPLER_2D_RECT
#36304	constant GL_INT_SAMPLER_BUFFER
#36309	constant GL_UNSIGNED_INT_SAMPLER_2D_RECT
#36312	constant GL_UNSIGNED_INT_SAMPLER_BUFFER
#35882	constant GL_TEXTURE_BUFFER
#35883	constant GL_MAX_TEXTURE_BUFFER_SIZE
#35884	constant GL_TEXTURE_BINDING_BUFFER
#35885	constant GL_TEXTURE_BUFFER_DATA_STORE_BINDING
#34037	constant GL_TEXTURE_RECTANGLE
#34038	constant GL_TEXTURE_BINDING_RECTANGLE
#34039	constant GL_PROXY_TEXTURE_RECTANGLE
#34040	constant GL_MAX_RECTANGLE_TEXTURE_SIZE
#36756	constant GL_R8_SNORM
#36757	constant GL_RG8_SNORM
#36758	constant GL_RGB8_SNORM
#36759	constant GL_RGBA8_SNORM
#36760	constant GL_R16_SNORM
#36761	constant GL_RG16_SNORM
#36762	constant GL_RGB16_SNORM
#36763	constant GL_RGBA16_SNORM
#36764	constant GL_SIGNED_NORMALIZED
#36765	constant GL_PRIMITIVE_RESTART
#36766	constant GL_PRIMITIVE_RESTART_INDEX
#36662	constant GL_COPY_READ_BUFFER
#36663	constant GL_COPY_WRITE_BUFFER
#35345	constant GL_UNIFORM_BUFFER
#35368	constant GL_UNIFORM_BUFFER_BINDING
#35369	constant GL_UNIFORM_BUFFER_START
#35370	constant GL_UNIFORM_BUFFER_SIZE
#35371	constant GL_MAX_VERTEX_UNIFORM_BLOCKS
#35372	constant GL_MAX_GEOMETRY_UNIFORM_BLOCKS
#35373	constant GL_MAX_FRAGMENT_UNIFORM_BLOCKS
#35374	constant GL_MAX_COMBINED_UNIFORM_BLOCKS
#35375	constant GL_MAX_UNIFORM_BUFFER_BINDINGS
#35376	constant GL_MAX_UNIFORM_BLOCK_SIZE
#35377	constant GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
#35378	constant GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
#35379	constant GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
#35380	constant GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
#35381	constant GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
#35382	constant GL_ACTIVE_UNIFORM_BLOCKS
#35383	constant GL_UNIFORM_TYPE
#35384	constant GL_UNIFORM_SIZE
#35385	constant GL_UNIFORM_NAME_LENGTH
#35386	constant GL_UNIFORM_BLOCK_INDEX
#35387	constant GL_UNIFORM_OFFSET
#35388	constant GL_UNIFORM_ARRAY_STRIDE
#35389	constant GL_UNIFORM_MATRIX_STRIDE
#35390	constant GL_UNIFORM_IS_ROW_MAJOR
#35391	constant GL_UNIFORM_BLOCK_BINDING
#35392	constant GL_UNIFORM_BLOCK_DATA_SIZE
#35393	constant GL_UNIFORM_BLOCK_NAME_LENGTH
#35394	constant GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
#35395	constant GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
#35396	constant GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
#35397	constant GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
#35398	constant GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
#4294967295	constant GL_INVALID_INDEX
#1	constant GL_VERSION_3_2
#1	constant GL_CONTEXT_CORE_PROFILE_BIT
#2	constant GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
#10	constant GL_LINES_ADJACENCY
#11	constant GL_LINE_STRIP_ADJACENCY
#12	constant GL_TRIANGLES_ADJACENCY
#13	constant GL_TRIANGLE_STRIP_ADJACENCY
#34370	constant GL_PROGRAM_POINT_SIZE
#35881	constant GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
#36263	constant GL_FRAMEBUFFER_ATTACHMENT_LAYERED
#36264	constant GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
#36313	constant GL_GEOMETRY_SHADER
#35094	constant GL_GEOMETRY_VERTICES_OUT
#35095	constant GL_GEOMETRY_INPUT_TYPE
#35096	constant GL_GEOMETRY_OUTPUT_TYPE
#36319	constant GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
#36320	constant GL_MAX_GEOMETRY_OUTPUT_VERTICES
#36321	constant GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
#37154	constant GL_MAX_VERTEX_OUTPUT_COMPONENTS
#37155	constant GL_MAX_GEOMETRY_INPUT_COMPONENTS
#37156	constant GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
#37157	constant GL_MAX_FRAGMENT_INPUT_COMPONENTS
#37158	constant GL_CONTEXT_PROFILE_MASK
#34383	constant GL_DEPTH_CLAMP
#36428	constant GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
#36429	constant GL_FIRST_VERTEX_CONVENTION
#36430	constant GL_LAST_VERTEX_CONVENTION
#36431	constant GL_PROVOKING_VERTEX
#34895	constant GL_TEXTURE_CUBE_MAP_SEAMLESS
#37137	constant GL_MAX_SERVER_WAIT_TIMEOUT
#37138	constant GL_OBJECT_TYPE
#37139	constant GL_SYNC_CONDITION
#37140	constant GL_SYNC_STATUS
#37141	constant GL_SYNC_FLAGS
#37142	constant GL_SYNC_FENCE
#37143	constant GL_SYNC_GPU_COMMANDS_COMPLETE
#37144	constant GL_UNSIGNALED
#37145	constant GL_SIGNALED
#37146	constant GL_ALREADY_SIGNALED
#37147	constant GL_TIMEOUT_EXPIRED
#37148	constant GL_CONDITION_SATISFIED
#37149	constant GL_WAIT_FAILED
#1	constant GL_SYNC_FLUSH_COMMANDS_BIT
#36432	constant GL_SAMPLE_POSITION
#36433	constant GL_SAMPLE_MASK
#36434	constant GL_SAMPLE_MASK_VALUE
#36441	constant GL_MAX_SAMPLE_MASK_WORDS
#37120	constant GL_TEXTURE_2D_MULTISAMPLE
#37121	constant GL_PROXY_TEXTURE_2D_MULTISAMPLE
#37122	constant GL_TEXTURE_2D_MULTISAMPLE_ARRAY
#37123	constant GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
#37124	constant GL_TEXTURE_BINDING_2D_MULTISAMPLE
#37125	constant GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
#37126	constant GL_TEXTURE_SAMPLES
#37127	constant GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
#37128	constant GL_SAMPLER_2D_MULTISAMPLE
#37129	constant GL_INT_SAMPLER_2D_MULTISAMPLE
#37130	constant GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
#37131	constant GL_SAMPLER_2D_MULTISAMPLE_ARRAY
#37132	constant GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#37133	constant GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
#37134	constant GL_MAX_COLOR_TEXTURE_SAMPLES
#37135	constant GL_MAX_DEPTH_TEXTURE_SAMPLES
#37136	constant GL_MAX_INTEGER_SAMPLES
#1	constant GL_VERSION_3_3
#35070	constant GL_VERTEX_ATTRIB_ARRAY_DIVISOR
#35065	constant GL_SRC1_COLOR
#35066	constant GL_ONE_MINUS_SRC1_COLOR
#35067	constant GL_ONE_MINUS_SRC1_ALPHA
#35068	constant GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
#35887	constant GL_ANY_SAMPLES_PASSED
#35097	constant GL_SAMPLER_BINDING
#36975	constant GL_RGB10_A2UI
#36418	constant GL_TEXTURE_SWIZZLE_R
#36419	constant GL_TEXTURE_SWIZZLE_G
#36420	constant GL_TEXTURE_SWIZZLE_B
#36421	constant GL_TEXTURE_SWIZZLE_A
#36422	constant GL_TEXTURE_SWIZZLE_RGBA
#35007	constant GL_TIME_ELAPSED
#36392	constant GL_TIMESTAMP
#36255	constant GL_INT_2_10_10_10_REV
#1	constant GL_VERSION_4_0
#35894	constant GL_SAMPLE_SHADING
#35895	constant GL_MIN_SAMPLE_SHADING_VALUE
#36446	constant GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
#36447	constant GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
#36873	constant GL_TEXTURE_CUBE_MAP_ARRAY
#36874	constant GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
#36875	constant GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
#36876	constant GL_SAMPLER_CUBE_MAP_ARRAY
#36877	constant GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
#36878	constant GL_INT_SAMPLER_CUBE_MAP_ARRAY
#36879	constant GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
#36671	constant GL_DRAW_INDIRECT_BUFFER
#36675	constant GL_DRAW_INDIRECT_BUFFER_BINDING
#34943	constant GL_GEOMETRY_SHADER_INVOCATIONS
#36442	constant GL_MAX_GEOMETRY_SHADER_INVOCATIONS
#36443	constant GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
#36444	constant GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
#36445	constant GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
#36465	constant GL_MAX_VERTEX_STREAMS
#36860	constant GL_DOUBLE_VEC2
#36861	constant GL_DOUBLE_VEC3
#36862	constant GL_DOUBLE_VEC4
#36678	constant GL_DOUBLE_MAT2
#36679	constant GL_DOUBLE_MAT3
#36680	constant GL_DOUBLE_MAT4
#36681	constant GL_DOUBLE_MAT2x3
#36682	constant GL_DOUBLE_MAT2x4
#36683	constant GL_DOUBLE_MAT3x2
#36684	constant GL_DOUBLE_MAT3x4
#36685	constant GL_DOUBLE_MAT4x2
#36686	constant GL_DOUBLE_MAT4x3
#36325	constant GL_ACTIVE_SUBROUTINES
#36326	constant GL_ACTIVE_SUBROUTINE_UNIFORMS
#36423	constant GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
#36424	constant GL_ACTIVE_SUBROUTINE_MAX_LENGTH
#36425	constant GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
#36327	constant GL_MAX_SUBROUTINES
#36328	constant GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
#36426	constant GL_NUM_COMPATIBLE_SUBROUTINES
#36427	constant GL_COMPATIBLE_SUBROUTINES
#14	constant GL_PATCHES
#36466	constant GL_PATCH_VERTICES
#36467	constant GL_PATCH_DEFAULT_INNER_LEVEL
#36468	constant GL_PATCH_DEFAULT_OUTER_LEVEL
#36469	constant GL_TESS_CONTROL_OUTPUT_VERTICES
#36470	constant GL_TESS_GEN_MODE
#36471	constant GL_TESS_GEN_SPACING
#36472	constant GL_TESS_GEN_VERTEX_ORDER
#36473	constant GL_TESS_GEN_POINT_MODE
#36474	constant GL_ISOLINES
#36475	constant GL_FRACTIONAL_ODD
#36476	constant GL_FRACTIONAL_EVEN
#36477	constant GL_MAX_PATCH_VERTICES
#36478	constant GL_MAX_TESS_GEN_LEVEL
#36479	constant GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
#36480	constant GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
#36481	constant GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
#36482	constant GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
#36483	constant GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
#36484	constant GL_MAX_TESS_PATCH_COMPONENTS
#36485	constant GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
#36486	constant GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
#36489	constant GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
#36490	constant GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
#34924	constant GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
#34925	constant GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
#36382	constant GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
#36383	constant GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
#34032	constant GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
#34033	constant GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
#36487	constant GL_TESS_EVALUATION_SHADER
#36488	constant GL_TESS_CONTROL_SHADER
#36386	constant GL_TRANSFORM_FEEDBACK
#36387	constant GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
#36388	constant GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
#36389	constant GL_TRANSFORM_FEEDBACK_BINDING
#36464	constant GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
#1	constant GL_VERSION_4_1
#5132	constant GL_FIXED
#35738	constant GL_IMPLEMENTATION_COLOR_READ_TYPE
#35739	constant GL_IMPLEMENTATION_COLOR_READ_FORMAT
#36336	constant GL_LOW_FLOAT
#36337	constant GL_MEDIUM_FLOAT
#36338	constant GL_HIGH_FLOAT
#36339	constant GL_LOW_INT
#36340	constant GL_MEDIUM_INT
#36341	constant GL_HIGH_INT
#36346	constant GL_SHADER_COMPILER
#36344	constant GL_SHADER_BINARY_FORMATS
#36345	constant GL_NUM_SHADER_BINARY_FORMATS
#36347	constant GL_MAX_VERTEX_UNIFORM_VECTORS
#36348	constant GL_MAX_VARYING_VECTORS
#36349	constant GL_MAX_FRAGMENT_UNIFORM_VECTORS
#36194	constant GL_RGB565
#33367	constant GL_PROGRAM_BINARY_RETRIEVABLE_HINT
#34625	constant GL_PROGRAM_BINARY_LENGTH
#34814	constant GL_NUM_PROGRAM_BINARY_FORMATS
#34815	constant GL_PROGRAM_BINARY_FORMATS
#1	constant GL_VERTEX_SHADER_BIT
#2	constant GL_FRAGMENT_SHADER_BIT
#4	constant GL_GEOMETRY_SHADER_BIT
#8	constant GL_TESS_CONTROL_SHADER_BIT
#16	constant GL_TESS_EVALUATION_SHADER_BIT
#4294967295	constant GL_ALL_SHADER_BITS
#33368	constant GL_PROGRAM_SEPARABLE
#33369	constant GL_ACTIVE_PROGRAM
#33370	constant GL_PROGRAM_PIPELINE_BINDING
#33371	constant GL_MAX_VIEWPORTS
#33372	constant GL_VIEWPORT_SUBPIXEL_BITS
#33373	constant GL_VIEWPORT_BOUNDS_RANGE
#33374	constant GL_LAYER_PROVOKING_VERTEX
#33375	constant GL_VIEWPORT_INDEX_PROVOKING_VERTEX
#33376	constant GL_UNDEFINED_VERTEX
#1	constant GL_VERSION_4_2
#36662	constant GL_COPY_READ_BUFFER_BINDING
#36663	constant GL_COPY_WRITE_BUFFER_BINDING
#36388	constant GL_TRANSFORM_FEEDBACK_ACTIVE
#36387	constant GL_TRANSFORM_FEEDBACK_PAUSED
#37159	constant GL_UNPACK_COMPRESSED_BLOCK_WIDTH
#37160	constant GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
#37161	constant GL_UNPACK_COMPRESSED_BLOCK_DEPTH
#37162	constant GL_UNPACK_COMPRESSED_BLOCK_SIZE
#37163	constant GL_PACK_COMPRESSED_BLOCK_WIDTH
#37164	constant GL_PACK_COMPRESSED_BLOCK_HEIGHT
#37165	constant GL_PACK_COMPRESSED_BLOCK_DEPTH
#37166	constant GL_PACK_COMPRESSED_BLOCK_SIZE
#37760	constant GL_NUM_SAMPLE_COUNTS
#37052	constant GL_MIN_MAP_BUFFER_ALIGNMENT
#37568	constant GL_ATOMIC_COUNTER_BUFFER
#37569	constant GL_ATOMIC_COUNTER_BUFFER_BINDING
#37570	constant GL_ATOMIC_COUNTER_BUFFER_START
#37571	constant GL_ATOMIC_COUNTER_BUFFER_SIZE
#37572	constant GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
#37573	constant GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
#37574	constant GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
#37575	constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
#37576	constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
#37577	constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
#37578	constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
#37579	constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
#37580	constant GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
#37581	constant GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
#37582	constant GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
#37583	constant GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
#37584	constant GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
#37585	constant GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
#37586	constant GL_MAX_VERTEX_ATOMIC_COUNTERS
#37587	constant GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
#37588	constant GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
#37589	constant GL_MAX_GEOMETRY_ATOMIC_COUNTERS
#37590	constant GL_MAX_FRAGMENT_ATOMIC_COUNTERS
#37591	constant GL_MAX_COMBINED_ATOMIC_COUNTERS
#37592	constant GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
#37596	constant GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
#37593	constant GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
#37594	constant GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
#37595	constant GL_UNSIGNED_INT_ATOMIC_COUNTER
#1	constant GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
#2	constant GL_ELEMENT_ARRAY_BARRIER_BIT
#4	constant GL_UNIFORM_BARRIER_BIT
#8	constant GL_TEXTURE_FETCH_BARRIER_BIT
#32	constant GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
#64	constant GL_COMMAND_BARRIER_BIT
#128	constant GL_PIXEL_BUFFER_BARRIER_BIT
#256	constant GL_TEXTURE_UPDATE_BARRIER_BIT
#512	constant GL_BUFFER_UPDATE_BARRIER_BIT
#1024	constant GL_FRAMEBUFFER_BARRIER_BIT
#2048	constant GL_TRANSFORM_FEEDBACK_BARRIER_BIT
#4096	constant GL_ATOMIC_COUNTER_BARRIER_BIT
#4294967295	constant GL_ALL_BARRIER_BITS
#36664	constant GL_MAX_IMAGE_UNITS
#36665	constant GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
#36666	constant GL_IMAGE_BINDING_NAME
#36667	constant GL_IMAGE_BINDING_LEVEL
#36668	constant GL_IMAGE_BINDING_LAYERED
#36669	constant GL_IMAGE_BINDING_LAYER
#36670	constant GL_IMAGE_BINDING_ACCESS
#36940	constant GL_IMAGE_1D
#36941	constant GL_IMAGE_2D
#36942	constant GL_IMAGE_3D
#36943	constant GL_IMAGE_2D_RECT
#36944	constant GL_IMAGE_CUBE
#36945	constant GL_IMAGE_BUFFER
#36946	constant GL_IMAGE_1D_ARRAY
#36947	constant GL_IMAGE_2D_ARRAY
#36948	constant GL_IMAGE_CUBE_MAP_ARRAY
#36949	constant GL_IMAGE_2D_MULTISAMPLE
#36950	constant GL_IMAGE_2D_MULTISAMPLE_ARRAY
#36951	constant GL_INT_IMAGE_1D
#36952	constant GL_INT_IMAGE_2D
#36953	constant GL_INT_IMAGE_3D
#36954	constant GL_INT_IMAGE_2D_RECT
#36955	constant GL_INT_IMAGE_CUBE
#36956	constant GL_INT_IMAGE_BUFFER
#36957	constant GL_INT_IMAGE_1D_ARRAY
#36958	constant GL_INT_IMAGE_2D_ARRAY
#36959	constant GL_INT_IMAGE_CUBE_MAP_ARRAY
#36960	constant GL_INT_IMAGE_2D_MULTISAMPLE
#36961	constant GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#36962	constant GL_UNSIGNED_INT_IMAGE_1D
#36963	constant GL_UNSIGNED_INT_IMAGE_2D
#36964	constant GL_UNSIGNED_INT_IMAGE_3D
#36965	constant GL_UNSIGNED_INT_IMAGE_2D_RECT
#36966	constant GL_UNSIGNED_INT_IMAGE_CUBE
#36967	constant GL_UNSIGNED_INT_IMAGE_BUFFER
#36968	constant GL_UNSIGNED_INT_IMAGE_1D_ARRAY
#36969	constant GL_UNSIGNED_INT_IMAGE_2D_ARRAY
#36970	constant GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
#36971	constant GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
#36972	constant GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
#36973	constant GL_MAX_IMAGE_SAMPLES
#36974	constant GL_IMAGE_BINDING_FORMAT
#37063	constant GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
#37064	constant GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
#37065	constant GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
#37066	constant GL_MAX_VERTEX_IMAGE_UNIFORMS
#37067	constant GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
#37068	constant GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
#37069	constant GL_MAX_GEOMETRY_IMAGE_UNIFORMS
#37070	constant GL_MAX_FRAGMENT_IMAGE_UNIFORMS
#37071	constant GL_MAX_COMBINED_IMAGE_UNIFORMS
#36492	constant GL_COMPRESSED_RGBA_BPTC_UNORM
#36493	constant GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
#36494	constant GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
#36495	constant GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
#37167	constant GL_TEXTURE_IMMUTABLE_FORMAT
#1	constant GL_VERSION_4_3
#33513	constant GL_NUM_SHADING_LANGUAGE_VERSIONS
#34638	constant GL_VERTEX_ATTRIB_ARRAY_LONG
#37492	constant GL_COMPRESSED_RGB8_ETC2
#37493	constant GL_COMPRESSED_SRGB8_ETC2
#37494	constant GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
#37495	constant GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
#37496	constant GL_COMPRESSED_RGBA8_ETC2_EAC
#37497	constant GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
#37488	constant GL_COMPRESSED_R11_EAC
#37489	constant GL_COMPRESSED_SIGNED_R11_EAC
#37490	constant GL_COMPRESSED_RG11_EAC
#37491	constant GL_COMPRESSED_SIGNED_RG11_EAC
#36201	constant GL_PRIMITIVE_RESTART_FIXED_INDEX
#36202	constant GL_ANY_SAMPLES_PASSED_CONSERVATIVE
#36203	constant GL_MAX_ELEMENT_INDEX
#37305	constant GL_COMPUTE_SHADER
#37307	constant GL_MAX_COMPUTE_UNIFORM_BLOCKS
#37308	constant GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
#37309	constant GL_MAX_COMPUTE_IMAGE_UNIFORMS
#33378	constant GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
#33379	constant GL_MAX_COMPUTE_UNIFORM_COMPONENTS
#33380	constant GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
#33381	constant GL_MAX_COMPUTE_ATOMIC_COUNTERS
#33382	constant GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
#37099	constant GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
#37310	constant GL_MAX_COMPUTE_WORK_GROUP_COUNT
#37311	constant GL_MAX_COMPUTE_WORK_GROUP_SIZE
#33383	constant GL_COMPUTE_WORK_GROUP_SIZE
#37100	constant GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
#37101	constant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
#37102	constant GL_DISPATCH_INDIRECT_BUFFER
#37103	constant GL_DISPATCH_INDIRECT_BUFFER_BINDING
#32	constant GL_COMPUTE_SHADER_BIT
#33346	constant GL_DEBUG_OUTPUT_SYNCHRONOUS
#33347	constant GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
#33348	constant GL_DEBUG_CALLBACK_FUNCTION
#33349	constant GL_DEBUG_CALLBACK_USER_PARAM
#33350	constant GL_DEBUG_SOURCE_API
#33351	constant GL_DEBUG_SOURCE_WINDOW_SYSTEM
#33352	constant GL_DEBUG_SOURCE_SHADER_COMPILER
#33353	constant GL_DEBUG_SOURCE_THIRD_PARTY
#33354	constant GL_DEBUG_SOURCE_APPLICATION
#33355	constant GL_DEBUG_SOURCE_OTHER
#33356	constant GL_DEBUG_TYPE_ERROR
#33357	constant GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
#33358	constant GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
#33359	constant GL_DEBUG_TYPE_PORTABILITY
#33360	constant GL_DEBUG_TYPE_PERFORMANCE
#33361	constant GL_DEBUG_TYPE_OTHER
#37187	constant GL_MAX_DEBUG_MESSAGE_LENGTH
#37188	constant GL_MAX_DEBUG_LOGGED_MESSAGES
#37189	constant GL_DEBUG_LOGGED_MESSAGES
#37190	constant GL_DEBUG_SEVERITY_HIGH
#37191	constant GL_DEBUG_SEVERITY_MEDIUM
#37192	constant GL_DEBUG_SEVERITY_LOW
#33384	constant GL_DEBUG_TYPE_MARKER
#33385	constant GL_DEBUG_TYPE_PUSH_GROUP
#33386	constant GL_DEBUG_TYPE_POP_GROUP
#33387	constant GL_DEBUG_SEVERITY_NOTIFICATION
#33388	constant GL_MAX_DEBUG_GROUP_STACK_DEPTH
#33389	constant GL_DEBUG_GROUP_STACK_DEPTH
#33504	constant GL_BUFFER
#33505	constant GL_SHADER
#33506	constant GL_PROGRAM
#33507	constant GL_QUERY
#33508	constant GL_PROGRAM_PIPELINE
#33510	constant GL_SAMPLER
#33512	constant GL_MAX_LABEL_LENGTH
#37600	constant GL_DEBUG_OUTPUT
#2	constant GL_CONTEXT_FLAG_DEBUG_BIT
#33390	constant GL_MAX_UNIFORM_LOCATIONS
#37648	constant GL_FRAMEBUFFER_DEFAULT_WIDTH
#37649	constant GL_FRAMEBUFFER_DEFAULT_HEIGHT
#37650	constant GL_FRAMEBUFFER_DEFAULT_LAYERS
#37651	constant GL_FRAMEBUFFER_DEFAULT_SAMPLES
#37652	constant GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
#37653	constant GL_MAX_FRAMEBUFFER_WIDTH
#37654	constant GL_MAX_FRAMEBUFFER_HEIGHT
#37655	constant GL_MAX_FRAMEBUFFER_LAYERS
#37656	constant GL_MAX_FRAMEBUFFER_SAMPLES
#33391	constant GL_INTERNALFORMAT_SUPPORTED
#33392	constant GL_INTERNALFORMAT_PREFERRED
#33393	constant GL_INTERNALFORMAT_RED_SIZE
#33394	constant GL_INTERNALFORMAT_GREEN_SIZE
#33395	constant GL_INTERNALFORMAT_BLUE_SIZE
#33396	constant GL_INTERNALFORMAT_ALPHA_SIZE
#33397	constant GL_INTERNALFORMAT_DEPTH_SIZE
#33398	constant GL_INTERNALFORMAT_STENCIL_SIZE
#33399	constant GL_INTERNALFORMAT_SHARED_SIZE
#33400	constant GL_INTERNALFORMAT_RED_TYPE
#33401	constant GL_INTERNALFORMAT_GREEN_TYPE
#33402	constant GL_INTERNALFORMAT_BLUE_TYPE
#33403	constant GL_INTERNALFORMAT_ALPHA_TYPE
#33404	constant GL_INTERNALFORMAT_DEPTH_TYPE
#33405	constant GL_INTERNALFORMAT_STENCIL_TYPE
#33406	constant GL_MAX_WIDTH
#33407	constant GL_MAX_HEIGHT
#33408	constant GL_MAX_DEPTH
#33409	constant GL_MAX_LAYERS
#33410	constant GL_MAX_COMBINED_DIMENSIONS
#33411	constant GL_COLOR_COMPONENTS
#33412	constant GL_DEPTH_COMPONENTS
#33413	constant GL_STENCIL_COMPONENTS
#33414	constant GL_COLOR_RENDERABLE
#33415	constant GL_DEPTH_RENDERABLE
#33416	constant GL_STENCIL_RENDERABLE
#33417	constant GL_FRAMEBUFFER_RENDERABLE
#33418	constant GL_FRAMEBUFFER_RENDERABLE_LAYERED
#33419	constant GL_FRAMEBUFFER_BLEND
#33420	constant GL_READ_PIXELS
#33421	constant GL_READ_PIXELS_FORMAT
#33422	constant GL_READ_PIXELS_TYPE
#33423	constant GL_TEXTURE_IMAGE_FORMAT
#33424	constant GL_TEXTURE_IMAGE_TYPE
#33425	constant GL_GET_TEXTURE_IMAGE_FORMAT
#33426	constant GL_GET_TEXTURE_IMAGE_TYPE
#33427	constant GL_MIPMAP
#33428	constant GL_MANUAL_GENERATE_MIPMAP
#33429	constant GL_AUTO_GENERATE_MIPMAP
#33430	constant GL_COLOR_ENCODING
#33431	constant GL_SRGB_READ
#33432	constant GL_SRGB_WRITE
#33434	constant GL_FILTER
#33435	constant GL_VERTEX_TEXTURE
#33436	constant GL_TESS_CONTROL_TEXTURE
#33437	constant GL_TESS_EVALUATION_TEXTURE
#33438	constant GL_GEOMETRY_TEXTURE
#33439	constant GL_FRAGMENT_TEXTURE
#33440	constant GL_COMPUTE_TEXTURE
#33441	constant GL_TEXTURE_SHADOW
#33442	constant GL_TEXTURE_GATHER
#33443	constant GL_TEXTURE_GATHER_SHADOW
#33444	constant GL_SHADER_IMAGE_LOAD
#33445	constant GL_SHADER_IMAGE_STORE
#33446	constant GL_SHADER_IMAGE_ATOMIC
#33447	constant GL_IMAGE_TEXEL_SIZE
#33448	constant GL_IMAGE_COMPATIBILITY_CLASS
#33449	constant GL_IMAGE_PIXEL_FORMAT
#33450	constant GL_IMAGE_PIXEL_TYPE
#33452	constant GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
#33453	constant GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
#33454	constant GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
#33455	constant GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
#33457	constant GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
#33458	constant GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
#33459	constant GL_TEXTURE_COMPRESSED_BLOCK_SIZE
#33460	constant GL_CLEAR_BUFFER
#33461	constant GL_TEXTURE_VIEW
#33462	constant GL_VIEW_COMPATIBILITY_CLASS
#33463	constant GL_FULL_SUPPORT
#33464	constant GL_CAVEAT_SUPPORT
#33465	constant GL_IMAGE_CLASS_4_X_32
#33466	constant GL_IMAGE_CLASS_2_X_32
#33467	constant GL_IMAGE_CLASS_1_X_32
#33468	constant GL_IMAGE_CLASS_4_X_16
#33469	constant GL_IMAGE_CLASS_2_X_16
#33470	constant GL_IMAGE_CLASS_1_X_16
#33471	constant GL_IMAGE_CLASS_4_X_8
#33472	constant GL_IMAGE_CLASS_2_X_8
#33473	constant GL_IMAGE_CLASS_1_X_8
#33474	constant GL_IMAGE_CLASS_11_11_10
#33475	constant GL_IMAGE_CLASS_10_10_10_2
#33476	constant GL_VIEW_CLASS_128_BITS
#33477	constant GL_VIEW_CLASS_96_BITS
#33478	constant GL_VIEW_CLASS_64_BITS
#33479	constant GL_VIEW_CLASS_48_BITS
#33480	constant GL_VIEW_CLASS_32_BITS
#33481	constant GL_VIEW_CLASS_24_BITS
#33482	constant GL_VIEW_CLASS_16_BITS
#33483	constant GL_VIEW_CLASS_8_BITS
#33484	constant GL_VIEW_CLASS_S3TC_DXT1_RGB
#33485	constant GL_VIEW_CLASS_S3TC_DXT1_RGBA
#33486	constant GL_VIEW_CLASS_S3TC_DXT3_RGBA
#33487	constant GL_VIEW_CLASS_S3TC_DXT5_RGBA
#33488	constant GL_VIEW_CLASS_RGTC1_RED
#33489	constant GL_VIEW_CLASS_RGTC2_RG
#33490	constant GL_VIEW_CLASS_BPTC_UNORM
#33491	constant GL_VIEW_CLASS_BPTC_FLOAT
#37601	constant GL_UNIFORM
#37602	constant GL_UNIFORM_BLOCK
#37603	constant GL_PROGRAM_INPUT
#37604	constant GL_PROGRAM_OUTPUT
#37605	constant GL_BUFFER_VARIABLE
#37606	constant GL_SHADER_STORAGE_BLOCK
#37608	constant GL_VERTEX_SUBROUTINE
#37609	constant GL_TESS_CONTROL_SUBROUTINE
#37610	constant GL_TESS_EVALUATION_SUBROUTINE
#37611	constant GL_GEOMETRY_SUBROUTINE
#37612	constant GL_FRAGMENT_SUBROUTINE
#37613	constant GL_COMPUTE_SUBROUTINE
#37614	constant GL_VERTEX_SUBROUTINE_UNIFORM
#37615	constant GL_TESS_CONTROL_SUBROUTINE_UNIFORM
#37616	constant GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
#37617	constant GL_GEOMETRY_SUBROUTINE_UNIFORM
#37618	constant GL_FRAGMENT_SUBROUTINE_UNIFORM
#37619	constant GL_COMPUTE_SUBROUTINE_UNIFORM
#37620	constant GL_TRANSFORM_FEEDBACK_VARYING
#37621	constant GL_ACTIVE_RESOURCES
#37622	constant GL_MAX_NAME_LENGTH
#37623	constant GL_MAX_NUM_ACTIVE_VARIABLES
#37624	constant GL_MAX_NUM_COMPATIBLE_SUBROUTINES
#37625	constant GL_NAME_LENGTH
#37626	constant GL_TYPE
#37627	constant GL_ARRAY_SIZE
#37628	constant GL_OFFSET
#37629	constant GL_BLOCK_INDEX
#37630	constant GL_ARRAY_STRIDE
#37631	constant GL_MATRIX_STRIDE
#37632	constant GL_IS_ROW_MAJOR
#37633	constant GL_ATOMIC_COUNTER_BUFFER_INDEX
#37634	constant GL_BUFFER_BINDING
#37635	constant GL_BUFFER_DATA_SIZE
#37636	constant GL_NUM_ACTIVE_VARIABLES
#37637	constant GL_ACTIVE_VARIABLES
#37638	constant GL_REFERENCED_BY_VERTEX_SHADER
#37639	constant GL_REFERENCED_BY_TESS_CONTROL_SHADER
#37640	constant GL_REFERENCED_BY_TESS_EVALUATION_SHADER
#37641	constant GL_REFERENCED_BY_GEOMETRY_SHADER
#37642	constant GL_REFERENCED_BY_FRAGMENT_SHADER
#37643	constant GL_REFERENCED_BY_COMPUTE_SHADER
#37644	constant GL_TOP_LEVEL_ARRAY_SIZE
#37645	constant GL_TOP_LEVEL_ARRAY_STRIDE
#37646	constant GL_LOCATION
#37647	constant GL_LOCATION_INDEX
#37607	constant GL_IS_PER_PATCH
#37074	constant GL_SHADER_STORAGE_BUFFER
#37075	constant GL_SHADER_STORAGE_BUFFER_BINDING
#37076	constant GL_SHADER_STORAGE_BUFFER_START
#37077	constant GL_SHADER_STORAGE_BUFFER_SIZE
#37078	constant GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
#37079	constant GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
#37080	constant GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
#37081	constant GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
#37082	constant GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
#37083	constant GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
#37084	constant GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
#37085	constant GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
#37086	constant GL_MAX_SHADER_STORAGE_BLOCK_SIZE
#37087	constant GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
#8192	constant GL_SHADER_STORAGE_BARRIER_BIT
#36665	constant GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
#37098	constant GL_DEPTH_STENCIL_TEXTURE_MODE
#37277	constant GL_TEXTURE_BUFFER_OFFSET
#37278	constant GL_TEXTURE_BUFFER_SIZE
#37279	constant GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
#33499	constant GL_TEXTURE_VIEW_MIN_LEVEL
#33500	constant GL_TEXTURE_VIEW_NUM_LEVELS
#33501	constant GL_TEXTURE_VIEW_MIN_LAYER
#33502	constant GL_TEXTURE_VIEW_NUM_LAYERS
#33503	constant GL_TEXTURE_IMMUTABLE_LEVELS
#33492	constant GL_VERTEX_ATTRIB_BINDING
#33493	constant GL_VERTEX_ATTRIB_RELATIVE_OFFSET
#33494	constant GL_VERTEX_BINDING_DIVISOR
#33495	constant GL_VERTEX_BINDING_OFFSET
#33496	constant GL_VERTEX_BINDING_STRIDE
#33497	constant GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
#33498	constant GL_MAX_VERTEX_ATTRIB_BINDINGS
#36687	constant GL_VERTEX_BINDING_BUFFER
#33511	constant GL_DISPLAY_LIST
#1	constant GL_VERSION_4_4
#33509	constant GL_MAX_VERTEX_ATTRIB_STRIDE
#33313	constant GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
#35882	constant GL_TEXTURE_BUFFER_BINDING
#64	constant GL_MAP_PERSISTENT_BIT
#128	constant GL_MAP_COHERENT_BIT
#256	constant GL_DYNAMIC_STORAGE_BIT
#512	constant GL_CLIENT_STORAGE_BIT
#16384	constant GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
#33311	constant GL_BUFFER_IMMUTABLE_STORAGE
#33312	constant GL_BUFFER_STORAGE_FLAGS
#37733	constant GL_CLEAR_TEXTURE
#37706	constant GL_LOCATION_COMPONENT
#37707	constant GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
#37708	constant GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
#37266	constant GL_QUERY_BUFFER
#32768	constant GL_QUERY_BUFFER_BARRIER_BIT
#37267	constant GL_QUERY_BUFFER_BINDING
#37268	constant GL_QUERY_RESULT_NO_WAIT
#34627	constant GL_MIRROR_CLAMP_TO_EDGE
#1	constant GL_VERSION_4_5
#1287	constant GL_CONTEXT_LOST
#37726	constant GL_NEGATIVE_ONE_TO_ONE
#37727	constant GL_ZERO_TO_ONE
#37724	constant GL_CLIP_ORIGIN
#37725	constant GL_CLIP_DEPTH_MODE
#36375	constant GL_QUERY_WAIT_INVERTED
#36376	constant GL_QUERY_NO_WAIT_INVERTED
#36377	constant GL_QUERY_BY_REGION_WAIT_INVERTED
#36378	constant GL_QUERY_BY_REGION_NO_WAIT_INVERTED
#33529	constant GL_MAX_CULL_DISTANCES
#33530	constant GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
#4102	constant GL_TEXTURE_TARGET
#33514	constant GL_QUERY_TARGET
#33363	constant GL_GUILTY_CONTEXT_RESET
#33364	constant GL_INNOCENT_CONTEXT_RESET
#33365	constant GL_UNKNOWN_CONTEXT_RESET
#33366	constant GL_RESET_NOTIFICATION_STRATEGY
#33362	constant GL_LOSE_CONTEXT_ON_RESET
#33377	constant GL_NO_RESET_NOTIFICATION
#4	constant GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
#33531	constant GL_CONTEXT_RELEASE_BEHAVIOR
#33532	constant GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
#1	constant GL_VERSION_4_6
#38225	constant GL_SHADER_BINARY_FORMAT_SPIR_V
#38226	constant GL_SPIR_V_BINARY
#33006	constant GL_PARAMETER_BUFFER
#33007	constant GL_PARAMETER_BUFFER_BINDING
#8	constant GL_CONTEXT_FLAG_NO_ERROR_BIT
#33518	constant GL_VERTICES_SUBMITTED
#33519	constant GL_PRIMITIVES_SUBMITTED
#33520	constant GL_VERTEX_SHADER_INVOCATIONS
#33521	constant GL_TESS_CONTROL_SHADER_PATCHES
#33522	constant GL_TESS_EVALUATION_SHADER_INVOCATIONS
#33523	constant GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED
#33524	constant GL_FRAGMENT_SHADER_INVOCATIONS
#33525	constant GL_COMPUTE_SHADER_INVOCATIONS
#33526	constant GL_CLIPPING_INPUT_PRIMITIVES
#33527	constant GL_CLIPPING_OUTPUT_PRIMITIVES
#36379	constant GL_POLYGON_OFFSET_CLAMP
#38227	constant GL_SPIR_V_EXTENSIONS
#38228	constant GL_NUM_SPIR_V_EXTENSIONS
#34046	constant GL_TEXTURE_MAX_ANISOTROPY
#34047	constant GL_MAX_TEXTURE_MAX_ANISOTROPY
#33516	constant GL_TRANSFORM_FEEDBACK_OVERFLOW
#33517	constant GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW
#1	constant GL_ARB_ES2_compatibility
#1	constant GL_ARB_ES3_1_compatibility
#1	constant GL_ARB_ES3_2_compatibility
#37566	constant GL_PRIMITIVE_BOUNDING_BOX_ARB
#37761	constant GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB
#37762	constant GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
#1	constant GL_ARB_ES3_compatibility
#1	constant GL_ARB_arrays_of_arrays
#1	constant GL_ARB_base_instance
#1	constant GL_ARB_bindless_texture
#5135	constant GL_UNSIGNED_INT64_ARB
#1	constant GL_ARB_blend_func_extended
#1	constant GL_ARB_buffer_storage
#1	constant GL_ARB_cl_event
#33344	constant GL_SYNC_CL_EVENT_ARB
#33345	constant GL_SYNC_CL_EVENT_COMPLETE_ARB
#1	constant GL_ARB_clear_buffer_object
#1	constant GL_ARB_clear_texture
#1	constant GL_ARB_clip_control
#1	constant GL_ARB_color_buffer_float
#34848	constant GL_RGBA_FLOAT_MODE_ARB
#35098	constant GL_CLAMP_VERTEX_COLOR_ARB
#35099	constant GL_CLAMP_FRAGMENT_COLOR_ARB
#35100	constant GL_CLAMP_READ_COLOR_ARB
#35101	constant GL_FIXED_ONLY_ARB
#1	constant GL_ARB_compatibility
#1	constant GL_ARB_compressed_texture_pixel_storage
#1	constant GL_ARB_compute_shader
#1	constant GL_ARB_compute_variable_group_size
#37700	constant GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
#37099	constant GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
#37701	constant GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
#37311	constant GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
#1	constant GL_ARB_conditional_render_inverted
#1	constant GL_ARB_conservative_depth
#1	constant GL_ARB_copy_buffer
#1	constant GL_ARB_copy_image
#1	constant GL_ARB_cull_distance
#1	constant GL_ARB_debug_output
#33346	constant GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
#33347	constant GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
#33348	constant GL_DEBUG_CALLBACK_FUNCTION_ARB
#33349	constant GL_DEBUG_CALLBACK_USER_PARAM_ARB
#33350	constant GL_DEBUG_SOURCE_API_ARB
#33351	constant GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
#33352	constant GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
#33353	constant GL_DEBUG_SOURCE_THIRD_PARTY_ARB
#33354	constant GL_DEBUG_SOURCE_APPLICATION_ARB
#33355	constant GL_DEBUG_SOURCE_OTHER_ARB
#33356	constant GL_DEBUG_TYPE_ERROR_ARB
#33357	constant GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
#33358	constant GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
#33359	constant GL_DEBUG_TYPE_PORTABILITY_ARB
#33360	constant GL_DEBUG_TYPE_PERFORMANCE_ARB
#33361	constant GL_DEBUG_TYPE_OTHER_ARB
#37187	constant GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
#37188	constant GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
#37189	constant GL_DEBUG_LOGGED_MESSAGES_ARB
#37190	constant GL_DEBUG_SEVERITY_HIGH_ARB
#37191	constant GL_DEBUG_SEVERITY_MEDIUM_ARB
#37192	constant GL_DEBUG_SEVERITY_LOW_ARB
#1	constant GL_ARB_depth_buffer_float
#1	constant GL_ARB_depth_clamp
#1	constant GL_ARB_depth_texture
#33189	constant GL_DEPTH_COMPONENT16_ARB
#33190	constant GL_DEPTH_COMPONENT24_ARB
#33191	constant GL_DEPTH_COMPONENT32_ARB
#34890	constant GL_TEXTURE_DEPTH_SIZE_ARB
#34891	constant GL_DEPTH_TEXTURE_MODE_ARB
#1	constant GL_ARB_derivative_control
#1	constant GL_ARB_direct_state_access
#1	constant GL_ARB_draw_buffers
#34852	constant GL_MAX_DRAW_BUFFERS_ARB
#34853	constant GL_DRAW_BUFFER0_ARB
#34854	constant GL_DRAW_BUFFER1_ARB
#34855	constant GL_DRAW_BUFFER2_ARB
#34856	constant GL_DRAW_BUFFER3_ARB
#34857	constant GL_DRAW_BUFFER4_ARB
#34858	constant GL_DRAW_BUFFER5_ARB
#34859	constant GL_DRAW_BUFFER6_ARB
#34860	constant GL_DRAW_BUFFER7_ARB
#34861	constant GL_DRAW_BUFFER8_ARB
#34862	constant GL_DRAW_BUFFER9_ARB
#34863	constant GL_DRAW_BUFFER10_ARB
#34864	constant GL_DRAW_BUFFER11_ARB
#34865	constant GL_DRAW_BUFFER12_ARB
#34866	constant GL_DRAW_BUFFER13_ARB
#34867	constant GL_DRAW_BUFFER14_ARB
#34868	constant GL_DRAW_BUFFER15_ARB
#1	constant GL_ARB_draw_buffers_blend
#1	constant GL_ARB_draw_elements_base_vertex
#1	constant GL_ARB_draw_indirect
#1	constant GL_ARB_draw_instanced
#1	constant GL_ARB_enhanced_layouts
#1	constant GL_ARB_explicit_attrib_location
#1	constant GL_ARB_explicit_uniform_location
#1	constant GL_ARB_fragment_coord_conventions
#1	constant GL_ARB_fragment_layer_viewport
#1	constant GL_ARB_fragment_program
#34820	constant GL_FRAGMENT_PROGRAM_ARB
#34933	constant GL_PROGRAM_FORMAT_ASCII_ARB
#34343	constant GL_PROGRAM_LENGTH_ARB
#34934	constant GL_PROGRAM_FORMAT_ARB
#34423	constant GL_PROGRAM_BINDING_ARB
#34976	constant GL_PROGRAM_INSTRUCTIONS_ARB
#34977	constant GL_MAX_PROGRAM_INSTRUCTIONS_ARB
#34978	constant GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#34979	constant GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#34980	constant GL_PROGRAM_TEMPORARIES_ARB
#34981	constant GL_MAX_PROGRAM_TEMPORARIES_ARB
#34982	constant GL_PROGRAM_NATIVE_TEMPORARIES_ARB
#34983	constant GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
#34984	constant GL_PROGRAM_PARAMETERS_ARB
#34985	constant GL_MAX_PROGRAM_PARAMETERS_ARB
#34986	constant GL_PROGRAM_NATIVE_PARAMETERS_ARB
#34987	constant GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
#34988	constant GL_PROGRAM_ATTRIBS_ARB
#34989	constant GL_MAX_PROGRAM_ATTRIBS_ARB
#34990	constant GL_PROGRAM_NATIVE_ATTRIBS_ARB
#34991	constant GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
#34996	constant GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
#34997	constant GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
#34998	constant GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
#34821	constant GL_PROGRAM_ALU_INSTRUCTIONS_ARB
#34822	constant GL_PROGRAM_TEX_INSTRUCTIONS_ARB
#34823	constant GL_PROGRAM_TEX_INDIRECTIONS_ARB
#34824	constant GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#34825	constant GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#34826	constant GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#34827	constant GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
#34828	constant GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
#34829	constant GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
#34830	constant GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#34831	constant GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#34832	constant GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#34344	constant GL_PROGRAM_STRING_ARB
#34379	constant GL_PROGRAM_ERROR_POSITION_ARB
#34369	constant GL_CURRENT_MATRIX_ARB
#34999	constant GL_TRANSPOSE_CURRENT_MATRIX_ARB
#34368	constant GL_CURRENT_MATRIX_STACK_DEPTH_ARB
#34351	constant GL_MAX_PROGRAM_MATRICES_ARB
#34350	constant GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
#34929	constant GL_MAX_TEXTURE_COORDS_ARB
#34930	constant GL_MAX_TEXTURE_IMAGE_UNITS_ARB
#34932	constant GL_PROGRAM_ERROR_STRING_ARB
#35008	constant GL_MATRIX0_ARB
#35009	constant GL_MATRIX1_ARB
#35010	constant GL_MATRIX2_ARB
#35011	constant GL_MATRIX3_ARB
#35012	constant GL_MATRIX4_ARB
#35013	constant GL_MATRIX5_ARB
#35014	constant GL_MATRIX6_ARB
#35015	constant GL_MATRIX7_ARB
#35016	constant GL_MATRIX8_ARB
#35017	constant GL_MATRIX9_ARB
#35018	constant GL_MATRIX10_ARB
#35019	constant GL_MATRIX11_ARB
#35020	constant GL_MATRIX12_ARB
#35021	constant GL_MATRIX13_ARB
#35022	constant GL_MATRIX14_ARB
#35023	constant GL_MATRIX15_ARB
#35024	constant GL_MATRIX16_ARB
#35025	constant GL_MATRIX17_ARB
#35026	constant GL_MATRIX18_ARB
#35027	constant GL_MATRIX19_ARB
#35028	constant GL_MATRIX20_ARB
#35029	constant GL_MATRIX21_ARB
#35030	constant GL_MATRIX22_ARB
#35031	constant GL_MATRIX23_ARB
#35032	constant GL_MATRIX24_ARB
#35033	constant GL_MATRIX25_ARB
#35034	constant GL_MATRIX26_ARB
#35035	constant GL_MATRIX27_ARB
#35036	constant GL_MATRIX28_ARB
#35037	constant GL_MATRIX29_ARB
#35038	constant GL_MATRIX30_ARB
#35039	constant GL_MATRIX31_ARB
#1	constant GL_ARB_fragment_program_shadow
#1	constant GL_ARB_fragment_shader
#35632	constant GL_FRAGMENT_SHADER_ARB
#35657	constant GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
#35723	constant GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
#1	constant GL_ARB_fragment_shader_interlock
#1	constant GL_ARB_framebuffer_no_attachments
#1	constant GL_ARB_framebuffer_object
#1	constant GL_ARB_framebuffer_sRGB
#1	constant GL_ARB_geometry_shader4
#10	constant GL_LINES_ADJACENCY_ARB
#11	constant GL_LINE_STRIP_ADJACENCY_ARB
#12	constant GL_TRIANGLES_ADJACENCY_ARB
#13	constant GL_TRIANGLE_STRIP_ADJACENCY_ARB
#34370	constant GL_PROGRAM_POINT_SIZE_ARB
#35881	constant GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
#36263	constant GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
#36264	constant GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
#36265	constant GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
#36313	constant GL_GEOMETRY_SHADER_ARB
#36314	constant GL_GEOMETRY_VERTICES_OUT_ARB
#36315	constant GL_GEOMETRY_INPUT_TYPE_ARB
#36316	constant GL_GEOMETRY_OUTPUT_TYPE_ARB
#36317	constant GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
#36318	constant GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
#36319	constant GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
#36320	constant GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
#36321	constant GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
#1	constant GL_ARB_get_program_binary
#1	constant GL_ARB_get_texture_sub_image
#1	constant GL_ARB_gl_spirv
#38225	constant GL_SHADER_BINARY_FORMAT_SPIR_V_ARB
#38226	constant GL_SPIR_V_BINARY_ARB
#1	constant GL_ARB_gpu_shader5
#1	constant GL_ARB_gpu_shader_fp64
#1	constant GL_ARB_gpu_shader_int64
#5134	constant GL_INT64_ARB
#36841	constant GL_INT64_VEC2_ARB
#36842	constant GL_INT64_VEC3_ARB
#36843	constant GL_INT64_VEC4_ARB
#36853	constant GL_UNSIGNED_INT64_VEC2_ARB
#36854	constant GL_UNSIGNED_INT64_VEC3_ARB
#36855	constant GL_UNSIGNED_INT64_VEC4_ARB
#1	constant GL_ARB_half_float_pixel
#5131	constant GL_HALF_FLOAT_ARB
#1	constant GL_ARB_half_float_vertex
#1	constant GL_ARB_indirect_parameters
#33006	constant GL_PARAMETER_BUFFER_ARB
#33007	constant GL_PARAMETER_BUFFER_BINDING_ARB
#1	constant GL_ARB_instanced_arrays
#35070	constant GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
#1	constant GL_ARB_internalformat_query
#1	constant GL_ARB_internalformat_query2
#33433	constant GL_SRGB_DECODE_ARB
#1	constant GL_ARB_invalidate_subdata
#1	constant GL_ARB_map_buffer_alignment
#1	constant GL_ARB_map_buffer_range
#1	constant GL_ARB_matrix_palette
#34880	constant GL_MATRIX_PALETTE_ARB
#34881	constant GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
#34882	constant GL_MAX_PALETTE_MATRICES_ARB
#34883	constant GL_CURRENT_PALETTE_MATRIX_ARB
#34884	constant GL_MATRIX_INDEX_ARRAY_ARB
#34885	constant GL_CURRENT_MATRIX_INDEX_ARB
#34886	constant GL_MATRIX_INDEX_ARRAY_SIZE_ARB
#34887	constant GL_MATRIX_INDEX_ARRAY_TYPE_ARB
#34888	constant GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
#34889	constant GL_MATRIX_INDEX_ARRAY_POINTER_ARB
#1	constant GL_ARB_multi_bind
#1	constant GL_ARB_multi_draw_indirect
#1	constant GL_ARB_multisample
#32925	constant GL_MULTISAMPLE_ARB
#32926	constant GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
#32927	constant GL_SAMPLE_ALPHA_TO_ONE_ARB
#32928	constant GL_SAMPLE_COVERAGE_ARB
#32936	constant GL_SAMPLE_BUFFERS_ARB
#32937	constant GL_SAMPLES_ARB
#32938	constant GL_SAMPLE_COVERAGE_VALUE_ARB
#32939	constant GL_SAMPLE_COVERAGE_INVERT_ARB
#536870912	constant GL_MULTISAMPLE_BIT_ARB
#1	constant GL_ARB_occlusion_query
#34916	constant GL_QUERY_COUNTER_BITS_ARB
#34917	constant GL_CURRENT_QUERY_ARB
#34918	constant GL_QUERY_RESULT_ARB
#34919	constant GL_QUERY_RESULT_AVAILABLE_ARB
#35092	constant GL_SAMPLES_PASSED_ARB
#1	constant GL_ARB_occlusion_query2
#1	constant GL_ARB_parallel_shader_compile
#37296	constant GL_MAX_SHADER_COMPILER_THREADS_ARB
#37297	constant GL_COMPLETION_STATUS_ARB
#1	constant GL_ARB_pipeline_statistics_query
#33518	constant GL_VERTICES_SUBMITTED_ARB
#33519	constant GL_PRIMITIVES_SUBMITTED_ARB
#33520	constant GL_VERTEX_SHADER_INVOCATIONS_ARB
#33521	constant GL_TESS_CONTROL_SHADER_PATCHES_ARB
#33522	constant GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
#33523	constant GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
#33524	constant GL_FRAGMENT_SHADER_INVOCATIONS_ARB
#33525	constant GL_COMPUTE_SHADER_INVOCATIONS_ARB
#33526	constant GL_CLIPPING_INPUT_PRIMITIVES_ARB
#33527	constant GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
#1	constant GL_ARB_pixel_buffer_object
#35051	constant GL_PIXEL_PACK_BUFFER_ARB
#35052	constant GL_PIXEL_UNPACK_BUFFER_ARB
#35053	constant GL_PIXEL_PACK_BUFFER_BINDING_ARB
#35055	constant GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
#1	constant GL_ARB_point_parameters
#33062	constant GL_POINT_SIZE_MIN_ARB
#33063	constant GL_POINT_SIZE_MAX_ARB
#33064	constant GL_POINT_FADE_THRESHOLD_SIZE_ARB
#33065	constant GL_POINT_DISTANCE_ATTENUATION_ARB
#1	constant GL_ARB_point_sprite
#34913	constant GL_POINT_SPRITE_ARB
#34914	constant GL_COORD_REPLACE_ARB
#1	constant GL_ARB_polygon_offset_clamp
#1	constant GL_ARB_post_depth_coverage
#1	constant GL_ARB_program_interface_query
#1	constant GL_ARB_provoking_vertex
#1	constant GL_ARB_query_buffer_object
#1	constant GL_ARB_robust_buffer_access_behavior
#1	constant GL_ARB_robustness
#4	constant GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
#33362	constant GL_LOSE_CONTEXT_ON_RESET_ARB
#33363	constant GL_GUILTY_CONTEXT_RESET_ARB
#33364	constant GL_INNOCENT_CONTEXT_RESET_ARB
#33365	constant GL_UNKNOWN_CONTEXT_RESET_ARB
#33366	constant GL_RESET_NOTIFICATION_STRATEGY_ARB
#33377	constant GL_NO_RESET_NOTIFICATION_ARB
#1	constant GL_ARB_robustness_isolation
#1	constant GL_ARB_sample_locations
#37693	constant GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB
#37694	constant GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
#37695	constant GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
#37696	constant GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
#36432	constant GL_SAMPLE_LOCATION_ARB
#37697	constant GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
#37698	constant GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
#37699	constant GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
#1	constant GL_ARB_sample_shading
#35894	constant GL_SAMPLE_SHADING_ARB
#35895	constant GL_MIN_SAMPLE_SHADING_VALUE_ARB
#1	constant GL_ARB_sampler_objects
#1	constant GL_ARB_seamless_cube_map
#1	constant GL_ARB_seamless_cubemap_per_texture
#1	constant GL_ARB_separate_shader_objects
#1	constant GL_ARB_shader_atomic_counter_ops
#1	constant GL_ARB_shader_atomic_counters
#1	constant GL_ARB_shader_ballot
#1	constant GL_ARB_shader_bit_encoding
#1	constant GL_ARB_shader_clock
#1	constant GL_ARB_shader_draw_parameters
#1	constant GL_ARB_shader_group_vote
#1	constant GL_ARB_shader_image_load_store
#1	constant GL_ARB_shader_image_size
#1	constant GL_ARB_shader_objects
#35648	constant GL_PROGRAM_OBJECT_ARB
#35656	constant GL_SHADER_OBJECT_ARB
#35662	constant GL_OBJECT_TYPE_ARB
#35663	constant GL_OBJECT_SUBTYPE_ARB
#35664	constant GL_FLOAT_VEC2_ARB
#35665	constant GL_FLOAT_VEC3_ARB
#35666	constant GL_FLOAT_VEC4_ARB
#35667	constant GL_INT_VEC2_ARB
#35668	constant GL_INT_VEC3_ARB
#35669	constant GL_INT_VEC4_ARB
#35670	constant GL_BOOL_ARB
#35671	constant GL_BOOL_VEC2_ARB
#35672	constant GL_BOOL_VEC3_ARB
#35673	constant GL_BOOL_VEC4_ARB
#35674	constant GL_FLOAT_MAT2_ARB
#35675	constant GL_FLOAT_MAT3_ARB
#35676	constant GL_FLOAT_MAT4_ARB
#35677	constant GL_SAMPLER_1D_ARB
#35678	constant GL_SAMPLER_2D_ARB
#35679	constant GL_SAMPLER_3D_ARB
#35680	constant GL_SAMPLER_CUBE_ARB
#35681	constant GL_SAMPLER_1D_SHADOW_ARB
#35682	constant GL_SAMPLER_2D_SHADOW_ARB
#35683	constant GL_SAMPLER_2D_RECT_ARB
#35684	constant GL_SAMPLER_2D_RECT_SHADOW_ARB
#35712	constant GL_OBJECT_DELETE_STATUS_ARB
#35713	constant GL_OBJECT_COMPILE_STATUS_ARB
#35714	constant GL_OBJECT_LINK_STATUS_ARB
#35715	constant GL_OBJECT_VALIDATE_STATUS_ARB
#35716	constant GL_OBJECT_INFO_LOG_LENGTH_ARB
#35717	constant GL_OBJECT_ATTACHED_OBJECTS_ARB
#35718	constant GL_OBJECT_ACTIVE_UNIFORMS_ARB
#35719	constant GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
#35720	constant GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
#1	constant GL_ARB_shader_precision
#1	constant GL_ARB_shader_stencil_export
#1	constant GL_ARB_shader_storage_buffer_object
#1	constant GL_ARB_shader_subroutine
#1	constant GL_ARB_shader_texture_image_samples
#1	constant GL_ARB_shader_texture_lod
#1	constant GL_ARB_shader_viewport_layer_array
#1	constant GL_ARB_shading_language_100
#35724	constant GL_SHADING_LANGUAGE_VERSION_ARB
#1	constant GL_ARB_shading_language_420pack
#1	constant GL_ARB_shading_language_include
#36270	constant GL_SHADER_INCLUDE_ARB
#36329	constant GL_NAMED_STRING_LENGTH_ARB
#36330	constant GL_NAMED_STRING_TYPE_ARB
#1	constant GL_ARB_shading_language_packing
#1	constant GL_ARB_shadow
#34892	constant GL_TEXTURE_COMPARE_MODE_ARB
#34893	constant GL_TEXTURE_COMPARE_FUNC_ARB
#34894	constant GL_COMPARE_R_TO_TEXTURE_ARB
#1	constant GL_ARB_shadow_ambient
#32959	constant GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
#1	constant GL_ARB_sparse_buffer
#1024	constant GL_SPARSE_STORAGE_BIT_ARB
#33528	constant GL_SPARSE_BUFFER_PAGE_SIZE_ARB
#1	constant GL_ARB_sparse_texture
#37286	constant GL_TEXTURE_SPARSE_ARB
#37287	constant GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
#37290	constant GL_NUM_SPARSE_LEVELS_ARB
#37288	constant GL_NUM_VIRTUAL_PAGE_SIZES_ARB
#37269	constant GL_VIRTUAL_PAGE_SIZE_X_ARB
#37270	constant GL_VIRTUAL_PAGE_SIZE_Y_ARB
#37271	constant GL_VIRTUAL_PAGE_SIZE_Z_ARB
#37272	constant GL_MAX_SPARSE_TEXTURE_SIZE_ARB
#37273	constant GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
#37274	constant GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
#37289	constant GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
#1	constant GL_ARB_sparse_texture2
#1	constant GL_ARB_sparse_texture_clamp
#1	constant GL_ARB_spirv_extensions
#1	constant GL_ARB_stencil_texturing
#1	constant GL_ARB_sync
#1	constant GL_ARB_tessellation_shader
#1	constant GL_ARB_texture_barrier
#1	constant GL_ARB_texture_border_clamp
#33069	constant GL_CLAMP_TO_BORDER_ARB
#1	constant GL_ARB_texture_buffer_object
#35882	constant GL_TEXTURE_BUFFER_ARB
#35883	constant GL_MAX_TEXTURE_BUFFER_SIZE_ARB
#35884	constant GL_TEXTURE_BINDING_BUFFER_ARB
#35885	constant GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
#35886	constant GL_TEXTURE_BUFFER_FORMAT_ARB
#1	constant GL_ARB_texture_buffer_object_rgb32
#1	constant GL_ARB_texture_buffer_range
#1	constant GL_ARB_texture_compression
#34025	constant GL_COMPRESSED_ALPHA_ARB
#34026	constant GL_COMPRESSED_LUMINANCE_ARB
#34027	constant GL_COMPRESSED_LUMINANCE_ALPHA_ARB
#34028	constant GL_COMPRESSED_INTENSITY_ARB
#34029	constant GL_COMPRESSED_RGB_ARB
#34030	constant GL_COMPRESSED_RGBA_ARB
#34031	constant GL_TEXTURE_COMPRESSION_HINT_ARB
#34464	constant GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
#34465	constant GL_TEXTURE_COMPRESSED_ARB
#34466	constant GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
#34467	constant GL_COMPRESSED_TEXTURE_FORMATS_ARB
#1	constant GL_ARB_texture_compression_bptc
#36492	constant GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
#36493	constant GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
#36494	constant GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
#36495	constant GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
#1	constant GL_ARB_texture_compression_rgtc
#1	constant GL_ARB_texture_cube_map
#34065	constant GL_NORMAL_MAP_ARB
#34066	constant GL_REFLECTION_MAP_ARB
#34067	constant GL_TEXTURE_CUBE_MAP_ARB
#34068	constant GL_TEXTURE_BINDING_CUBE_MAP_ARB
#34069	constant GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#34070	constant GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#34071	constant GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#34072	constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#34073	constant GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#34074	constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#34075	constant GL_PROXY_TEXTURE_CUBE_MAP_ARB
#34076	constant GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
#1	constant GL_ARB_texture_cube_map_array
#36873	constant GL_TEXTURE_CUBE_MAP_ARRAY_ARB
#36874	constant GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
#36875	constant GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
#36876	constant GL_SAMPLER_CUBE_MAP_ARRAY_ARB
#36877	constant GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
#36878	constant GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
#36879	constant GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
#1	constant GL_ARB_texture_env_add
#1	constant GL_ARB_texture_env_combine
#34160	constant GL_COMBINE_ARB
#34161	constant GL_COMBINE_RGB_ARB
#34162	constant GL_COMBINE_ALPHA_ARB
#34176	constant GL_SOURCE0_RGB_ARB
#34177	constant GL_SOURCE1_RGB_ARB
#34178	constant GL_SOURCE2_RGB_ARB
#34184	constant GL_SOURCE0_ALPHA_ARB
#34185	constant GL_SOURCE1_ALPHA_ARB
#34186	constant GL_SOURCE2_ALPHA_ARB
#34192	constant GL_OPERAND0_RGB_ARB
#34193	constant GL_OPERAND1_RGB_ARB
#34194	constant GL_OPERAND2_RGB_ARB
#34200	constant GL_OPERAND0_ALPHA_ARB
#34201	constant GL_OPERAND1_ALPHA_ARB
#34202	constant GL_OPERAND2_ALPHA_ARB
#34163	constant GL_RGB_SCALE_ARB
#34164	constant GL_ADD_SIGNED_ARB
#34165	constant GL_INTERPOLATE_ARB
#34023	constant GL_SUBTRACT_ARB
#34166	constant GL_CONSTANT_ARB
#34167	constant GL_PRIMARY_COLOR_ARB
#34168	constant GL_PREVIOUS_ARB
#1	constant GL_ARB_texture_env_crossbar
#1	constant GL_ARB_texture_env_dot3
#34478	constant GL_DOT3_RGB_ARB
#34479	constant GL_DOT3_RGBA_ARB
#1	constant GL_ARB_texture_filter_anisotropic
#1	constant GL_ARB_texture_filter_minmax
#37734	constant GL_TEXTURE_REDUCTION_MODE_ARB
#37735	constant GL_WEIGHTED_AVERAGE_ARB
#1	constant GL_ARB_texture_float
#35856	constant GL_TEXTURE_RED_TYPE_ARB
#35857	constant GL_TEXTURE_GREEN_TYPE_ARB
#35858	constant GL_TEXTURE_BLUE_TYPE_ARB
#35859	constant GL_TEXTURE_ALPHA_TYPE_ARB
#35860	constant GL_TEXTURE_LUMINANCE_TYPE_ARB
#35861	constant GL_TEXTURE_INTENSITY_TYPE_ARB
#35862	constant GL_TEXTURE_DEPTH_TYPE_ARB
#35863	constant GL_UNSIGNED_NORMALIZED_ARB
#34836	constant GL_RGBA32F_ARB
#34837	constant GL_RGB32F_ARB
#34838	constant GL_ALPHA32F_ARB
#34839	constant GL_INTENSITY32F_ARB
#34840	constant GL_LUMINANCE32F_ARB
#34841	constant GL_LUMINANCE_ALPHA32F_ARB
#34842	constant GL_RGBA16F_ARB
#34843	constant GL_RGB16F_ARB
#34844	constant GL_ALPHA16F_ARB
#34845	constant GL_INTENSITY16F_ARB
#34846	constant GL_LUMINANCE16F_ARB
#34847	constant GL_LUMINANCE_ALPHA16F_ARB
#1	constant GL_ARB_texture_gather
#36446	constant GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#36447	constant GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
#36767	constant GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
#1	constant GL_ARB_texture_mirror_clamp_to_edge
#1	constant GL_ARB_texture_mirrored_repeat
#33648	constant GL_MIRRORED_REPEAT_ARB
#1	constant GL_ARB_texture_multisample
#1	constant GL_ARB_texture_non_power_of_two
#1	constant GL_ARB_texture_query_levels
#1	constant GL_ARB_texture_query_lod
#1	constant GL_ARB_texture_rectangle
#34037	constant GL_TEXTURE_RECTANGLE_ARB
#34038	constant GL_TEXTURE_BINDING_RECTANGLE_ARB
#34039	constant GL_PROXY_TEXTURE_RECTANGLE_ARB
#34040	constant GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
#1	constant GL_ARB_texture_rg
#1	constant GL_ARB_texture_rgb10_a2ui
#1	constant GL_ARB_texture_stencil8
#1	constant GL_ARB_texture_storage
#1	constant GL_ARB_texture_storage_multisample
#1	constant GL_ARB_texture_swizzle
#1	constant GL_ARB_texture_view
#1	constant GL_ARB_timer_query
#1	constant GL_ARB_transform_feedback2
#1	constant GL_ARB_transform_feedback3
#1	constant GL_ARB_transform_feedback_instanced
#1	constant GL_ARB_transform_feedback_overflow_query
#33516	constant GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
#33517	constant GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
#1	constant GL_ARB_transpose_matrix
#34019	constant GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
#34020	constant GL_TRANSPOSE_PROJECTION_MATRIX_ARB
#34021	constant GL_TRANSPOSE_TEXTURE_MATRIX_ARB
#34022	constant GL_TRANSPOSE_COLOR_MATRIX_ARB
#1	constant GL_ARB_uniform_buffer_object
#1	constant GL_ARB_vertex_array_bgra
#1	constant GL_ARB_vertex_array_object
#1	constant GL_ARB_vertex_attrib_64bit
#1	constant GL_ARB_vertex_attrib_binding
#1	constant GL_ARB_vertex_blend
#34468	constant GL_MAX_VERTEX_UNITS_ARB
#34469	constant GL_ACTIVE_VERTEX_UNITS_ARB
#34470	constant GL_WEIGHT_SUM_UNITY_ARB
#34471	constant GL_VERTEX_BLEND_ARB
#34472	constant GL_CURRENT_WEIGHT_ARB
#34473	constant GL_WEIGHT_ARRAY_TYPE_ARB
#34474	constant GL_WEIGHT_ARRAY_STRIDE_ARB
#34475	constant GL_WEIGHT_ARRAY_SIZE_ARB
#34476	constant GL_WEIGHT_ARRAY_POINTER_ARB
#34477	constant GL_WEIGHT_ARRAY_ARB
#5888	constant GL_MODELVIEW0_ARB
#34058	constant GL_MODELVIEW1_ARB
#34594	constant GL_MODELVIEW2_ARB
#34595	constant GL_MODELVIEW3_ARB
#34596	constant GL_MODELVIEW4_ARB
#34597	constant GL_MODELVIEW5_ARB
#34598	constant GL_MODELVIEW6_ARB
#34599	constant GL_MODELVIEW7_ARB
#34600	constant GL_MODELVIEW8_ARB
#34601	constant GL_MODELVIEW9_ARB
#34602	constant GL_MODELVIEW10_ARB
#34603	constant GL_MODELVIEW11_ARB
#34604	constant GL_MODELVIEW12_ARB
#34605	constant GL_MODELVIEW13_ARB
#34606	constant GL_MODELVIEW14_ARB
#34607	constant GL_MODELVIEW15_ARB
#34608	constant GL_MODELVIEW16_ARB
#34609	constant GL_MODELVIEW17_ARB
#34610	constant GL_MODELVIEW18_ARB
#34611	constant GL_MODELVIEW19_ARB
#34612	constant GL_MODELVIEW20_ARB
#34613	constant GL_MODELVIEW21_ARB
#34614	constant GL_MODELVIEW22_ARB
#34615	constant GL_MODELVIEW23_ARB
#34616	constant GL_MODELVIEW24_ARB
#34617	constant GL_MODELVIEW25_ARB
#34618	constant GL_MODELVIEW26_ARB
#34619	constant GL_MODELVIEW27_ARB
#34620	constant GL_MODELVIEW28_ARB
#34621	constant GL_MODELVIEW29_ARB
#34622	constant GL_MODELVIEW30_ARB
#34623	constant GL_MODELVIEW31_ARB
#1	constant GL_ARB_vertex_buffer_object
#34660	constant GL_BUFFER_SIZE_ARB
#34661	constant GL_BUFFER_USAGE_ARB
#34962	constant GL_ARRAY_BUFFER_ARB
#34963	constant GL_ELEMENT_ARRAY_BUFFER_ARB
#34964	constant GL_ARRAY_BUFFER_BINDING_ARB
#34965	constant GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
#34966	constant GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
#34967	constant GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
#34968	constant GL_COLOR_ARRAY_BUFFER_BINDING_ARB
#34969	constant GL_INDEX_ARRAY_BUFFER_BINDING_ARB
#34970	constant GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
#34971	constant GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
#34972	constant GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
#34973	constant GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
#34974	constant GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
#34975	constant GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
#35000	constant GL_READ_ONLY_ARB
#35001	constant GL_WRITE_ONLY_ARB
#35002	constant GL_READ_WRITE_ARB
#35003	constant GL_BUFFER_ACCESS_ARB
#35004	constant GL_BUFFER_MAPPED_ARB
#35005	constant GL_BUFFER_MAP_POINTER_ARB
#35040	constant GL_STREAM_DRAW_ARB
#35041	constant GL_STREAM_READ_ARB
#35042	constant GL_STREAM_COPY_ARB
#35044	constant GL_STATIC_DRAW_ARB
#35045	constant GL_STATIC_READ_ARB
#35046	constant GL_STATIC_COPY_ARB
#35048	constant GL_DYNAMIC_DRAW_ARB
#35049	constant GL_DYNAMIC_READ_ARB
#35050	constant GL_DYNAMIC_COPY_ARB
#1	constant GL_ARB_vertex_program
#33880	constant GL_COLOR_SUM_ARB
#34336	constant GL_VERTEX_PROGRAM_ARB
#34338	constant GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
#34339	constant GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
#34340	constant GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
#34341	constant GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
#34342	constant GL_CURRENT_VERTEX_ATTRIB_ARB
#34370	constant GL_VERTEX_PROGRAM_POINT_SIZE_ARB
#34371	constant GL_VERTEX_PROGRAM_TWO_SIDE_ARB
#34373	constant GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
#34921	constant GL_MAX_VERTEX_ATTRIBS_ARB
#34922	constant GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
#34992	constant GL_PROGRAM_ADDRESS_REGISTERS_ARB
#34993	constant GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
#34994	constant GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#34995	constant GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#1	constant GL_ARB_vertex_shader
#35633	constant GL_VERTEX_SHADER_ARB
#35658	constant GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
#35659	constant GL_MAX_VARYING_FLOATS_ARB
#35660	constant GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
#35661	constant GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
#35721	constant GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
#35722	constant GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
#1	constant GL_ARB_vertex_type_10f_11f_11f_rev
#1	constant GL_ARB_vertex_type_2_10_10_10_rev
#1	constant GL_ARB_viewport_array
#1	constant GL_ARB_window_pos
#1	constant GL_KHR_blend_equation_advanced
#37524	constant GL_MULTIPLY_KHR
#37525	constant GL_SCREEN_KHR
#37526	constant GL_OVERLAY_KHR
#37527	constant GL_DARKEN_KHR
#37528	constant GL_LIGHTEN_KHR
#37529	constant GL_COLORDODGE_KHR
#37530	constant GL_COLORBURN_KHR
#37531	constant GL_HARDLIGHT_KHR
#37532	constant GL_SOFTLIGHT_KHR
#37534	constant GL_DIFFERENCE_KHR
#37536	constant GL_EXCLUSION_KHR
#37549	constant GL_HSL_HUE_KHR
#37550	constant GL_HSL_SATURATION_KHR
#37551	constant GL_HSL_COLOR_KHR
#37552	constant GL_HSL_LUMINOSITY_KHR
#1	constant GL_KHR_blend_equation_advanced_coherent
#37509	constant GL_BLEND_ADVANCED_COHERENT_KHR
#1	constant GL_KHR_context_flush_control
#1	constant GL_KHR_debug
#1	constant GL_KHR_no_error
#8	constant GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
#1	constant GL_KHR_parallel_shader_compile
#37296	constant GL_MAX_SHADER_COMPILER_THREADS_KHR
#37297	constant GL_COMPLETION_STATUS_KHR
#1	constant GL_KHR_robust_buffer_access_behavior
#1	constant GL_KHR_robustness
#37107	constant GL_CONTEXT_ROBUST_ACCESS
#1	constant GL_KHR_texture_compression_astc_hdr
#37808	constant GL_COMPRESSED_RGBA_ASTC_4x4_KHR
#37809	constant GL_COMPRESSED_RGBA_ASTC_5x4_KHR
#37810	constant GL_COMPRESSED_RGBA_ASTC_5x5_KHR
#37811	constant GL_COMPRESSED_RGBA_ASTC_6x5_KHR
#37812	constant GL_COMPRESSED_RGBA_ASTC_6x6_KHR
#37813	constant GL_COMPRESSED_RGBA_ASTC_8x5_KHR
#37814	constant GL_COMPRESSED_RGBA_ASTC_8x6_KHR
#37815	constant GL_COMPRESSED_RGBA_ASTC_8x8_KHR
#37816	constant GL_COMPRESSED_RGBA_ASTC_10x5_KHR
#37817	constant GL_COMPRESSED_RGBA_ASTC_10x6_KHR
#37818	constant GL_COMPRESSED_RGBA_ASTC_10x8_KHR
#37819	constant GL_COMPRESSED_RGBA_ASTC_10x10_KHR
#37820	constant GL_COMPRESSED_RGBA_ASTC_12x10_KHR
#37821	constant GL_COMPRESSED_RGBA_ASTC_12x12_KHR
#37840	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
#37841	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
#37842	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
#37843	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
#37844	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
#37845	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
#37846	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
#37847	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
#37848	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
#37849	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
#37850	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
#37851	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
#37852	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
#37853	constant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
#1	constant GL_KHR_texture_compression_astc_ldr
#1	constant GL_KHR_texture_compression_astc_sliced_3d
#1	constant GL_OES_byte_coordinates
#1	constant GL_OES_compressed_paletted_texture
#35728	constant GL_PALETTE4_RGB8_OES
#35729	constant GL_PALETTE4_RGBA8_OES
#35730	constant GL_PALETTE4_R5_G6_B5_OES
#35731	constant GL_PALETTE4_RGBA4_OES
#35732	constant GL_PALETTE4_RGB5_A1_OES
#35733	constant GL_PALETTE8_RGB8_OES
#35734	constant GL_PALETTE8_RGBA8_OES
#35735	constant GL_PALETTE8_R5_G6_B5_OES
#35736	constant GL_PALETTE8_RGBA4_OES
#35737	constant GL_PALETTE8_RGB5_A1_OES
#1	constant GL_OES_fixed_point
#5132	constant GL_FIXED_OES
#1	constant GL_OES_query_matrix
#1	constant GL_OES_read_format
#35738	constant GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
#35739	constant GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
#1	constant GL_OES_single_precision
#1	constant GL_3DFX_multisample
#34482	constant GL_MULTISAMPLE_3DFX
#34483	constant GL_SAMPLE_BUFFERS_3DFX
#34484	constant GL_SAMPLES_3DFX
#536870912	constant GL_MULTISAMPLE_BIT_3DFX
#1	constant GL_3DFX_tbuffer
#1	constant GL_3DFX_texture_compression_FXT1
#34480	constant GL_COMPRESSED_RGB_FXT1_3DFX
#34481	constant GL_COMPRESSED_RGBA_FXT1_3DFX
#1	constant GL_AMD_blend_minmax_factor
#36892	constant GL_FACTOR_MIN_AMD
#36893	constant GL_FACTOR_MAX_AMD
#1	constant GL_AMD_conservative_depth
#1	constant GL_AMD_debug_output
#37187	constant GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
#37188	constant GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
#37189	constant GL_DEBUG_LOGGED_MESSAGES_AMD
#37190	constant GL_DEBUG_SEVERITY_HIGH_AMD
#37191	constant GL_DEBUG_SEVERITY_MEDIUM_AMD
#37192	constant GL_DEBUG_SEVERITY_LOW_AMD
#37193	constant GL_DEBUG_CATEGORY_API_ERROR_AMD
#37194	constant GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
#37195	constant GL_DEBUG_CATEGORY_DEPRECATION_AMD
#37196	constant GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
#37197	constant GL_DEBUG_CATEGORY_PERFORMANCE_AMD
#37198	constant GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
#37199	constant GL_DEBUG_CATEGORY_APPLICATION_AMD
#37200	constant GL_DEBUG_CATEGORY_OTHER_AMD
#1	constant GL_AMD_depth_clamp_separate
#36894	constant GL_DEPTH_CLAMP_NEAR_AMD
#36895	constant GL_DEPTH_CLAMP_FAR_AMD
#1	constant GL_AMD_draw_buffers_blend
#1	constant GL_AMD_framebuffer_sample_positions
#34879	constant GL_SUBSAMPLE_DISTANCE_AMD
#37294	constant GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD
#37295	constant GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD
#4294967295	constant GL_ALL_PIXELS_AMD
#1	constant GL_AMD_gcn_shader
#1	constant GL_AMD_gpu_shader_half_float
#36856	constant GL_FLOAT16_NV
#36857	constant GL_FLOAT16_VEC2_NV
#36858	constant GL_FLOAT16_VEC3_NV
#36859	constant GL_FLOAT16_VEC4_NV
#37317	constant GL_FLOAT16_MAT2_AMD
#37318	constant GL_FLOAT16_MAT3_AMD
#37319	constant GL_FLOAT16_MAT4_AMD
#37320	constant GL_FLOAT16_MAT2x3_AMD
#37321	constant GL_FLOAT16_MAT2x4_AMD
#37322	constant GL_FLOAT16_MAT3x2_AMD
#37323	constant GL_FLOAT16_MAT3x4_AMD
#37324	constant GL_FLOAT16_MAT4x2_AMD
#37325	constant GL_FLOAT16_MAT4x3_AMD
#1	constant GL_AMD_gpu_shader_int16
#1	constant GL_AMD_gpu_shader_int64
#5134	constant GL_INT64_NV
#5135	constant GL_UNSIGNED_INT64_NV
#36832	constant GL_INT8_NV
#36833	constant GL_INT8_VEC2_NV
#36834	constant GL_INT8_VEC3_NV
#36835	constant GL_INT8_VEC4_NV
#36836	constant GL_INT16_NV
#36837	constant GL_INT16_VEC2_NV
#36838	constant GL_INT16_VEC3_NV
#36839	constant GL_INT16_VEC4_NV
#36841	constant GL_INT64_VEC2_NV
#36842	constant GL_INT64_VEC3_NV
#36843	constant GL_INT64_VEC4_NV
#36844	constant GL_UNSIGNED_INT8_NV
#36845	constant GL_UNSIGNED_INT8_VEC2_NV
#36846	constant GL_UNSIGNED_INT8_VEC3_NV
#36847	constant GL_UNSIGNED_INT8_VEC4_NV
#36848	constant GL_UNSIGNED_INT16_NV
#36849	constant GL_UNSIGNED_INT16_VEC2_NV
#36850	constant GL_UNSIGNED_INT16_VEC3_NV
#36851	constant GL_UNSIGNED_INT16_VEC4_NV
#36853	constant GL_UNSIGNED_INT64_VEC2_NV
#36854	constant GL_UNSIGNED_INT64_VEC3_NV
#36855	constant GL_UNSIGNED_INT64_VEC4_NV
#1	constant GL_AMD_interleaved_elements
#37284	constant GL_VERTEX_ELEMENT_SWIZZLE_AMD
#37285	constant GL_VERTEX_ID_SWIZZLE_AMD
#1	constant GL_AMD_multi_draw_indirect
#1	constant GL_AMD_name_gen_delete
#37201	constant GL_DATA_BUFFER_AMD
#37202	constant GL_PERFORMANCE_MONITOR_AMD
#37203	constant GL_QUERY_OBJECT_AMD
#37204	constant GL_VERTEX_ARRAY_OBJECT_AMD
#37205	constant GL_SAMPLER_OBJECT_AMD
#1	constant GL_AMD_occlusion_query_event
#34639	constant GL_OCCLUSION_QUERY_EVENT_MASK_AMD
#1	constant GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
#2	constant GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
#4	constant GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
#8	constant GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
#4294967295	constant GL_QUERY_ALL_EVENT_BITS_AMD
#1	constant GL_AMD_performance_monitor
#35776	constant GL_COUNTER_TYPE_AMD
#35777	constant GL_COUNTER_RANGE_AMD
#35778	constant GL_UNSIGNED_INT64_AMD
#35779	constant GL_PERCENTAGE_AMD
#35780	constant GL_PERFMON_RESULT_AVAILABLE_AMD
#35781	constant GL_PERFMON_RESULT_SIZE_AMD
#35782	constant GL_PERFMON_RESULT_AMD
#1	constant GL_AMD_pinned_memory
#37216	constant GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
#1	constant GL_AMD_query_buffer_object
#37266	constant GL_QUERY_BUFFER_AMD
#37267	constant GL_QUERY_BUFFER_BINDING_AMD
#37268	constant GL_QUERY_RESULT_NO_WAIT_AMD
#1	constant GL_AMD_sample_positions
#1	constant GL_AMD_seamless_cubemap_per_texture
#1	constant GL_AMD_shader_atomic_counter_ops
#1	constant GL_AMD_shader_ballot
#1	constant GL_AMD_shader_explicit_vertex_parameter
#1	constant GL_AMD_shader_image_load_store_lod
#1	constant GL_AMD_shader_stencil_export
#1	constant GL_AMD_shader_trinary_minmax
#1	constant GL_AMD_sparse_texture
#37269	constant GL_VIRTUAL_PAGE_SIZE_X_AMD
#37270	constant GL_VIRTUAL_PAGE_SIZE_Y_AMD
#37271	constant GL_VIRTUAL_PAGE_SIZE_Z_AMD
#37272	constant GL_MAX_SPARSE_TEXTURE_SIZE_AMD
#37273	constant GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
#37274	constant GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
#37275	constant GL_MIN_SPARSE_LEVEL_AMD
#37276	constant GL_MIN_LOD_WARNING_AMD
#1	constant GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
#1	constant GL_AMD_stencil_operation_extended
#34634	constant GL_SET_AMD
#34635	constant GL_REPLACE_VALUE_AMD
#34636	constant GL_STENCIL_OP_VALUE_AMD
#34637	constant GL_STENCIL_BACK_OP_VALUE_AMD
#1	constant GL_AMD_texture_gather_bias_lod
#1	constant GL_AMD_texture_texture4
#1	constant GL_AMD_transform_feedback3_lines_triangles
#1	constant GL_AMD_transform_feedback4
#37280	constant GL_STREAM_RASTERIZATION_AMD
#1	constant GL_AMD_vertex_shader_layer
#1	constant GL_AMD_vertex_shader_tessellator
#36865	constant GL_SAMPLER_BUFFER_AMD
#36866	constant GL_INT_SAMPLER_BUFFER_AMD
#36867	constant GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
#36868	constant GL_TESSELLATION_MODE_AMD
#36869	constant GL_TESSELLATION_FACTOR_AMD
#36870	constant GL_DISCRETE_AMD
#36871	constant GL_CONTINUOUS_AMD
#1	constant GL_AMD_vertex_shader_viewport_index
#1	constant GL_APPLE_aux_depth_stencil
#35348	constant GL_AUX_DEPTH_STENCIL_APPLE
#1	constant GL_APPLE_client_storage
#34226	constant GL_UNPACK_CLIENT_STORAGE_APPLE
#1	constant GL_APPLE_element_array
#35340	constant GL_ELEMENT_ARRAY_APPLE
#35341	constant GL_ELEMENT_ARRAY_TYPE_APPLE
#35342	constant GL_ELEMENT_ARRAY_POINTER_APPLE
#1	constant GL_APPLE_fence
#35338	constant GL_DRAW_PIXELS_APPLE
#35339	constant GL_FENCE_APPLE
#1	constant GL_APPLE_float_pixels
#5131	constant GL_HALF_APPLE
#34836	constant GL_RGBA_FLOAT32_APPLE
#34837	constant GL_RGB_FLOAT32_APPLE
#34838	constant GL_ALPHA_FLOAT32_APPLE
#34839	constant GL_INTENSITY_FLOAT32_APPLE
#34840	constant GL_LUMINANCE_FLOAT32_APPLE
#34841	constant GL_LUMINANCE_ALPHA_FLOAT32_APPLE
#34842	constant GL_RGBA_FLOAT16_APPLE
#34843	constant GL_RGB_FLOAT16_APPLE
#34844	constant GL_ALPHA_FLOAT16_APPLE
#34845	constant GL_INTENSITY_FLOAT16_APPLE
#34846	constant GL_LUMINANCE_FLOAT16_APPLE
#34847	constant GL_LUMINANCE_ALPHA_FLOAT16_APPLE
#35343	constant GL_COLOR_FLOAT_APPLE
#1	constant GL_APPLE_flush_buffer_range
#35346	constant GL_BUFFER_SERIALIZED_MODIFY_APPLE
#35347	constant GL_BUFFER_FLUSHING_UNMAP_APPLE
#1	constant GL_APPLE_object_purgeable
#34227	constant GL_BUFFER_OBJECT_APPLE
#35353	constant GL_RELEASED_APPLE
#35354	constant GL_VOLATILE_APPLE
#35355	constant GL_RETAINED_APPLE
#35356	constant GL_UNDEFINED_APPLE
#35357	constant GL_PURGEABLE_APPLE
#1	constant GL_APPLE_rgb_422
#35359	constant GL_RGB_422_APPLE
#34234	constant GL_UNSIGNED_SHORT_8_8_APPLE
#34235	constant GL_UNSIGNED_SHORT_8_8_REV_APPLE
#35409	constant GL_RGB_RAW_422_APPLE
#1	constant GL_APPLE_row_bytes
#35349	constant GL_PACK_ROW_BYTES_APPLE
#35350	constant GL_UNPACK_ROW_BYTES_APPLE
#1	constant GL_APPLE_specular_vector
#34224	constant GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
#1	constant GL_APPLE_texture_range
#34231	constant GL_TEXTURE_RANGE_LENGTH_APPLE
#34232	constant GL_TEXTURE_RANGE_POINTER_APPLE
#34236	constant GL_TEXTURE_STORAGE_HINT_APPLE
#34237	constant GL_STORAGE_PRIVATE_APPLE
#34238	constant GL_STORAGE_CACHED_APPLE
#34239	constant GL_STORAGE_SHARED_APPLE
#1	constant GL_APPLE_transform_hint
#34225	constant GL_TRANSFORM_HINT_APPLE
#1	constant GL_APPLE_vertex_array_object
#34229	constant GL_VERTEX_ARRAY_BINDING_APPLE
#1	constant GL_APPLE_vertex_array_range
#34077	constant GL_VERTEX_ARRAY_RANGE_APPLE
#34078	constant GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
#34079	constant GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
#34081	constant GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
#34228	constant GL_STORAGE_CLIENT_APPLE
#1	constant GL_APPLE_vertex_program_evaluators
#35328	constant GL_VERTEX_ATTRIB_MAP1_APPLE
#35329	constant GL_VERTEX_ATTRIB_MAP2_APPLE
#35330	constant GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
#35331	constant GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
#35332	constant GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
#35333	constant GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
#35334	constant GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
#35335	constant GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
#35336	constant GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
#35337	constant GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
#1	constant GL_APPLE_ycbcr_422
#34233	constant GL_YCBCR_422_APPLE
#1	constant GL_ATI_draw_buffers
#34852	constant GL_MAX_DRAW_BUFFERS_ATI
#34853	constant GL_DRAW_BUFFER0_ATI
#34854	constant GL_DRAW_BUFFER1_ATI
#34855	constant GL_DRAW_BUFFER2_ATI
#34856	constant GL_DRAW_BUFFER3_ATI
#34857	constant GL_DRAW_BUFFER4_ATI
#34858	constant GL_DRAW_BUFFER5_ATI
#34859	constant GL_DRAW_BUFFER6_ATI
#34860	constant GL_DRAW_BUFFER7_ATI
#34861	constant GL_DRAW_BUFFER8_ATI
#34862	constant GL_DRAW_BUFFER9_ATI
#34863	constant GL_DRAW_BUFFER10_ATI
#34864	constant GL_DRAW_BUFFER11_ATI
#34865	constant GL_DRAW_BUFFER12_ATI
#34866	constant GL_DRAW_BUFFER13_ATI
#34867	constant GL_DRAW_BUFFER14_ATI
#34868	constant GL_DRAW_BUFFER15_ATI
#1	constant GL_ATI_element_array
#34664	constant GL_ELEMENT_ARRAY_ATI
#34665	constant GL_ELEMENT_ARRAY_TYPE_ATI
#34666	constant GL_ELEMENT_ARRAY_POINTER_ATI
#1	constant GL_ATI_envmap_bumpmap
#34677	constant GL_BUMP_ROT_MATRIX_ATI
#34678	constant GL_BUMP_ROT_MATRIX_SIZE_ATI
#34679	constant GL_BUMP_NUM_TEX_UNITS_ATI
#34680	constant GL_BUMP_TEX_UNITS_ATI
#34681	constant GL_DUDV_ATI
#34682	constant GL_DU8DV8_ATI
#34683	constant GL_BUMP_ENVMAP_ATI
#34684	constant GL_BUMP_TARGET_ATI
#1	constant GL_ATI_fragment_shader
#35104	constant GL_FRAGMENT_SHADER_ATI
#35105	constant GL_REG_0_ATI
#35106	constant GL_REG_1_ATI
#35107	constant GL_REG_2_ATI
#35108	constant GL_REG_3_ATI
#35109	constant GL_REG_4_ATI
#35110	constant GL_REG_5_ATI
#35111	constant GL_REG_6_ATI
#35112	constant GL_REG_7_ATI
#35113	constant GL_REG_8_ATI
#35114	constant GL_REG_9_ATI
#35115	constant GL_REG_10_ATI
#35116	constant GL_REG_11_ATI
#35117	constant GL_REG_12_ATI
#35118	constant GL_REG_13_ATI
#35119	constant GL_REG_14_ATI
#35120	constant GL_REG_15_ATI
#35121	constant GL_REG_16_ATI
#35122	constant GL_REG_17_ATI
#35123	constant GL_REG_18_ATI
#35124	constant GL_REG_19_ATI
#35125	constant GL_REG_20_ATI
#35126	constant GL_REG_21_ATI
#35127	constant GL_REG_22_ATI
#35128	constant GL_REG_23_ATI
#35129	constant GL_REG_24_ATI
#35130	constant GL_REG_25_ATI
#35131	constant GL_REG_26_ATI
#35132	constant GL_REG_27_ATI
#35133	constant GL_REG_28_ATI
#35134	constant GL_REG_29_ATI
#35135	constant GL_REG_30_ATI
#35136	constant GL_REG_31_ATI
#35137	constant GL_CON_0_ATI
#35138	constant GL_CON_1_ATI
#35139	constant GL_CON_2_ATI
#35140	constant GL_CON_3_ATI
#35141	constant GL_CON_4_ATI
#35142	constant GL_CON_5_ATI
#35143	constant GL_CON_6_ATI
#35144	constant GL_CON_7_ATI
#35145	constant GL_CON_8_ATI
#35146	constant GL_CON_9_ATI
#35147	constant GL_CON_10_ATI
#35148	constant GL_CON_11_ATI
#35149	constant GL_CON_12_ATI
#35150	constant GL_CON_13_ATI
#35151	constant GL_CON_14_ATI
#35152	constant GL_CON_15_ATI
#35153	constant GL_CON_16_ATI
#35154	constant GL_CON_17_ATI
#35155	constant GL_CON_18_ATI
#35156	constant GL_CON_19_ATI
#35157	constant GL_CON_20_ATI
#35158	constant GL_CON_21_ATI
#35159	constant GL_CON_22_ATI
#35160	constant GL_CON_23_ATI
#35161	constant GL_CON_24_ATI
#35162	constant GL_CON_25_ATI
#35163	constant GL_CON_26_ATI
#35164	constant GL_CON_27_ATI
#35165	constant GL_CON_28_ATI
#35166	constant GL_CON_29_ATI
#35167	constant GL_CON_30_ATI
#35168	constant GL_CON_31_ATI
#35169	constant GL_MOV_ATI
#35171	constant GL_ADD_ATI
#35172	constant GL_MUL_ATI
#35173	constant GL_SUB_ATI
#35174	constant GL_DOT3_ATI
#35175	constant GL_DOT4_ATI
#35176	constant GL_MAD_ATI
#35177	constant GL_LERP_ATI
#35178	constant GL_CND_ATI
#35179	constant GL_CND0_ATI
#35180	constant GL_DOT2_ADD_ATI
#35181	constant GL_SECONDARY_INTERPOLATOR_ATI
#35182	constant GL_NUM_FRAGMENT_REGISTERS_ATI
#35183	constant GL_NUM_FRAGMENT_CONSTANTS_ATI
#35184	constant GL_NUM_PASSES_ATI
#35185	constant GL_NUM_INSTRUCTIONS_PER_PASS_ATI
#35186	constant GL_NUM_INSTRUCTIONS_TOTAL_ATI
#35187	constant GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
#35188	constant GL_NUM_LOOPBACK_COMPONENTS_ATI
#35189	constant GL_COLOR_ALPHA_PAIRING_ATI
#35190	constant GL_SWIZZLE_STR_ATI
#35191	constant GL_SWIZZLE_STQ_ATI
#35192	constant GL_SWIZZLE_STR_DR_ATI
#35193	constant GL_SWIZZLE_STQ_DQ_ATI
#35194	constant GL_SWIZZLE_STRQ_ATI
#35195	constant GL_SWIZZLE_STRQ_DQ_ATI
#1	constant GL_RED_BIT_ATI
#2	constant GL_GREEN_BIT_ATI
#4	constant GL_BLUE_BIT_ATI
#1	constant GL_2X_BIT_ATI
#2	constant GL_4X_BIT_ATI
#4	constant GL_8X_BIT_ATI
#8	constant GL_HALF_BIT_ATI
#16	constant GL_QUARTER_BIT_ATI
#32	constant GL_EIGHTH_BIT_ATI
#64	constant GL_SATURATE_BIT_ATI
#2	constant GL_COMP_BIT_ATI
#4	constant GL_NEGATE_BIT_ATI
#8	constant GL_BIAS_BIT_ATI
#1	constant GL_ATI_map_object_buffer
#1	constant GL_ATI_meminfo
#34811	constant GL_VBO_FREE_MEMORY_ATI
#34812	constant GL_TEXTURE_FREE_MEMORY_ATI
#34813	constant GL_RENDERBUFFER_FREE_MEMORY_ATI
#1	constant GL_ATI_pixel_format_float
#34848	constant GL_RGBA_FLOAT_MODE_ATI
#34869	constant GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
#1	constant GL_ATI_pn_triangles
#34800	constant GL_PN_TRIANGLES_ATI
#34801	constant GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#34802	constant GL_PN_TRIANGLES_POINT_MODE_ATI
#34803	constant GL_PN_TRIANGLES_NORMAL_MODE_ATI
#34804	constant GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#34805	constant GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
#34806	constant GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
#34807	constant GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
#34808	constant GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
#1	constant GL_ATI_separate_stencil
#34816	constant GL_STENCIL_BACK_FUNC_ATI
#34817	constant GL_STENCIL_BACK_FAIL_ATI
#34818	constant GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
#34819	constant GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
#1	constant GL_ATI_text_fragment_shader
#33280	constant GL_TEXT_FRAGMENT_SHADER_ATI
#1	constant GL_ATI_texture_env_combine3
#34628	constant GL_MODULATE_ADD_ATI
#34629	constant GL_MODULATE_SIGNED_ADD_ATI
#34630	constant GL_MODULATE_SUBTRACT_ATI
#1	constant GL_ATI_texture_float
#34836	constant GL_RGBA_FLOAT32_ATI
#34837	constant GL_RGB_FLOAT32_ATI
#34838	constant GL_ALPHA_FLOAT32_ATI
#34839	constant GL_INTENSITY_FLOAT32_ATI
#34840	constant GL_LUMINANCE_FLOAT32_ATI
#34841	constant GL_LUMINANCE_ALPHA_FLOAT32_ATI
#34842	constant GL_RGBA_FLOAT16_ATI
#34843	constant GL_RGB_FLOAT16_ATI
#34844	constant GL_ALPHA_FLOAT16_ATI
#34845	constant GL_INTENSITY_FLOAT16_ATI
#34846	constant GL_LUMINANCE_FLOAT16_ATI
#34847	constant GL_LUMINANCE_ALPHA_FLOAT16_ATI
#1	constant GL_ATI_texture_mirror_once
#34626	constant GL_MIRROR_CLAMP_ATI
#34627	constant GL_MIRROR_CLAMP_TO_EDGE_ATI
#1	constant GL_ATI_vertex_array_object
#34656	constant GL_STATIC_ATI
#34657	constant GL_DYNAMIC_ATI
#34658	constant GL_PRESERVE_ATI
#34659	constant GL_DISCARD_ATI
#34660	constant GL_OBJECT_BUFFER_SIZE_ATI
#34661	constant GL_OBJECT_BUFFER_USAGE_ATI
#34662	constant GL_ARRAY_OBJECT_BUFFER_ATI
#34663	constant GL_ARRAY_OBJECT_OFFSET_ATI
#1	constant GL_ATI_vertex_attrib_array_object
#1	constant GL_ATI_vertex_streams
#34667	constant GL_MAX_VERTEX_STREAMS_ATI
#34668	constant GL_VERTEX_STREAM0_ATI
#34669	constant GL_VERTEX_STREAM1_ATI
#34670	constant GL_VERTEX_STREAM2_ATI
#34671	constant GL_VERTEX_STREAM3_ATI
#34672	constant GL_VERTEX_STREAM4_ATI
#34673	constant GL_VERTEX_STREAM5_ATI
#34674	constant GL_VERTEX_STREAM6_ATI
#34675	constant GL_VERTEX_STREAM7_ATI
#34676	constant GL_VERTEX_SOURCE_ATI
#1	constant GL_EXT_422_pixels
#32972	constant GL_422_EXT
#32973	constant GL_422_REV_EXT
#32974	constant GL_422_AVERAGE_EXT
#32975	constant GL_422_REV_AVERAGE_EXT
#1	constant GL_EXT_abgr
#32768	constant GL_ABGR_EXT
#1	constant GL_EXT_bgra
#32992	constant GL_BGR_EXT
#32993	constant GL_BGRA_EXT
#1	constant GL_EXT_bindable_uniform
#36322	constant GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
#36323	constant GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
#36324	constant GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
#36333	constant GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
#36334	constant GL_UNIFORM_BUFFER_EXT
#36335	constant GL_UNIFORM_BUFFER_BINDING_EXT
#1	constant GL_EXT_blend_color
#32769	constant GL_CONSTANT_COLOR_EXT
#32770	constant GL_ONE_MINUS_CONSTANT_COLOR_EXT
#32771	constant GL_CONSTANT_ALPHA_EXT
#32772	constant GL_ONE_MINUS_CONSTANT_ALPHA_EXT
#32773	constant GL_BLEND_COLOR_EXT
#1	constant GL_EXT_blend_equation_separate
#32777	constant GL_BLEND_EQUATION_RGB_EXT
#34877	constant GL_BLEND_EQUATION_ALPHA_EXT
#1	constant GL_EXT_blend_func_separate
#32968	constant GL_BLEND_DST_RGB_EXT
#32969	constant GL_BLEND_SRC_RGB_EXT
#32970	constant GL_BLEND_DST_ALPHA_EXT
#32971	constant GL_BLEND_SRC_ALPHA_EXT
#1	constant GL_EXT_blend_logic_op
#1	constant GL_EXT_blend_minmax
#32775	constant GL_MIN_EXT
#32776	constant GL_MAX_EXT
#32774	constant GL_FUNC_ADD_EXT
#32777	constant GL_BLEND_EQUATION_EXT
#1	constant GL_EXT_blend_subtract
#32778	constant GL_FUNC_SUBTRACT_EXT
#32779	constant GL_FUNC_REVERSE_SUBTRACT_EXT
#1	constant GL_EXT_clip_volume_hint
#33008	constant GL_CLIP_VOLUME_CLIPPING_HINT_EXT
#1	constant GL_EXT_cmyka
#32780	constant GL_CMYK_EXT
#32781	constant GL_CMYKA_EXT
#32782	constant GL_PACK_CMYK_HINT_EXT
#32783	constant GL_UNPACK_CMYK_HINT_EXT
#1	constant GL_EXT_color_subtable
#1	constant GL_EXT_compiled_vertex_array
#33192	constant GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
#33193	constant GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
#1	constant GL_EXT_convolution
#32784	constant GL_CONVOLUTION_1D_EXT
#32785	constant GL_CONVOLUTION_2D_EXT
#32786	constant GL_SEPARABLE_2D_EXT
#32787	constant GL_CONVOLUTION_BORDER_MODE_EXT
#32788	constant GL_CONVOLUTION_FILTER_SCALE_EXT
#32789	constant GL_CONVOLUTION_FILTER_BIAS_EXT
#32790	constant GL_REDUCE_EXT
#32791	constant GL_CONVOLUTION_FORMAT_EXT
#32792	constant GL_CONVOLUTION_WIDTH_EXT
#32793	constant GL_CONVOLUTION_HEIGHT_EXT
#32794	constant GL_MAX_CONVOLUTION_WIDTH_EXT
#32795	constant GL_MAX_CONVOLUTION_HEIGHT_EXT
#32796	constant GL_POST_CONVOLUTION_RED_SCALE_EXT
#32797	constant GL_POST_CONVOLUTION_GREEN_SCALE_EXT
#32798	constant GL_POST_CONVOLUTION_BLUE_SCALE_EXT
#32799	constant GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
#32800	constant GL_POST_CONVOLUTION_RED_BIAS_EXT
#32801	constant GL_POST_CONVOLUTION_GREEN_BIAS_EXT
#32802	constant GL_POST_CONVOLUTION_BLUE_BIAS_EXT
#32803	constant GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
#1	constant GL_EXT_coordinate_frame
#33849	constant GL_TANGENT_ARRAY_EXT
#33850	constant GL_BINORMAL_ARRAY_EXT
#33851	constant GL_CURRENT_TANGENT_EXT
#33852	constant GL_CURRENT_BINORMAL_EXT
#33854	constant GL_TANGENT_ARRAY_TYPE_EXT
#33855	constant GL_TANGENT_ARRAY_STRIDE_EXT
#33856	constant GL_BINORMAL_ARRAY_TYPE_EXT
#33857	constant GL_BINORMAL_ARRAY_STRIDE_EXT
#33858	constant GL_TANGENT_ARRAY_POINTER_EXT
#33859	constant GL_BINORMAL_ARRAY_POINTER_EXT
#33860	constant GL_MAP1_TANGENT_EXT
#33861	constant GL_MAP2_TANGENT_EXT
#33862	constant GL_MAP1_BINORMAL_EXT
#33863	constant GL_MAP2_BINORMAL_EXT
#1	constant GL_EXT_copy_texture
#1	constant GL_EXT_cull_vertex
#33194	constant GL_CULL_VERTEX_EXT
#33195	constant GL_CULL_VERTEX_EYE_POSITION_EXT
#33196	constant GL_CULL_VERTEX_OBJECT_POSITION_EXT
#1	constant GL_EXT_debug_label
#35407	constant GL_PROGRAM_PIPELINE_OBJECT_EXT
#35648	constant GL_PROGRAM_OBJECT_EXT
#35656	constant GL_SHADER_OBJECT_EXT
#37201	constant GL_BUFFER_OBJECT_EXT
#37203	constant GL_QUERY_OBJECT_EXT
#37204	constant GL_VERTEX_ARRAY_OBJECT_EXT
#1	constant GL_EXT_debug_marker
#1	constant GL_EXT_depth_bounds_test
#34960	constant GL_DEPTH_BOUNDS_TEST_EXT
#34961	constant GL_DEPTH_BOUNDS_EXT
#1	constant GL_EXT_direct_state_access
#36397	constant GL_PROGRAM_MATRIX_EXT
#36398	constant GL_TRANSPOSE_PROGRAM_MATRIX_EXT
#36399	constant GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
#1	constant GL_EXT_draw_buffers2
#1	constant GL_EXT_draw_instanced
#1	constant GL_EXT_draw_range_elements
#33000	constant GL_MAX_ELEMENTS_VERTICES_EXT
#33001	constant GL_MAX_ELEMENTS_INDICES_EXT
#1	constant GL_EXT_external_buffer
#1	constant GL_EXT_fog_coord
#33872	constant GL_FOG_COORDINATE_SOURCE_EXT
#33873	constant GL_FOG_COORDINATE_EXT
#33874	constant GL_FRAGMENT_DEPTH_EXT
#33875	constant GL_CURRENT_FOG_COORDINATE_EXT
#33876	constant GL_FOG_COORDINATE_ARRAY_TYPE_EXT
#33877	constant GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
#33878	constant GL_FOG_COORDINATE_ARRAY_POINTER_EXT
#33879	constant GL_FOG_COORDINATE_ARRAY_EXT
#1	constant GL_EXT_framebuffer_blit
#36008	constant GL_READ_FRAMEBUFFER_EXT
#36009	constant GL_DRAW_FRAMEBUFFER_EXT
#36006	constant GL_DRAW_FRAMEBUFFER_BINDING_EXT
#36010	constant GL_READ_FRAMEBUFFER_BINDING_EXT
#1	constant GL_EXT_framebuffer_multisample
#36011	constant GL_RENDERBUFFER_SAMPLES_EXT
#36182	constant GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
#36183	constant GL_MAX_SAMPLES_EXT
#1	constant GL_EXT_framebuffer_multisample_blit_scaled
#37050	constant GL_SCALED_RESOLVE_FASTEST_EXT
#37051	constant GL_SCALED_RESOLVE_NICEST_EXT
#1	constant GL_EXT_framebuffer_object
#1286	constant GL_INVALID_FRAMEBUFFER_OPERATION_EXT
#34024	constant GL_MAX_RENDERBUFFER_SIZE_EXT
#36006	constant GL_FRAMEBUFFER_BINDING_EXT
#36007	constant GL_RENDERBUFFER_BINDING_EXT
#36048	constant GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
#36049	constant GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
#36050	constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
#36051	constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
#36052	constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
#36053	constant GL_FRAMEBUFFER_COMPLETE_EXT
#36054	constant GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
#36055	constant GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
#36057	constant GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
#36058	constant GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
#36059	constant GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
#36060	constant GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
#36061	constant GL_FRAMEBUFFER_UNSUPPORTED_EXT
#36063	constant GL_MAX_COLOR_ATTACHMENTS_EXT
#36064	constant GL_COLOR_ATTACHMENT0_EXT
#36065	constant GL_COLOR_ATTACHMENT1_EXT
#36066	constant GL_COLOR_ATTACHMENT2_EXT
#36067	constant GL_COLOR_ATTACHMENT3_EXT
#36068	constant GL_COLOR_ATTACHMENT4_EXT
#36069	constant GL_COLOR_ATTACHMENT5_EXT
#36070	constant GL_COLOR_ATTACHMENT6_EXT
#36071	constant GL_COLOR_ATTACHMENT7_EXT
#36072	constant GL_COLOR_ATTACHMENT8_EXT
#36073	constant GL_COLOR_ATTACHMENT9_EXT
#36074	constant GL_COLOR_ATTACHMENT10_EXT
#36075	constant GL_COLOR_ATTACHMENT11_EXT
#36076	constant GL_COLOR_ATTACHMENT12_EXT
#36077	constant GL_COLOR_ATTACHMENT13_EXT
#36078	constant GL_COLOR_ATTACHMENT14_EXT
#36079	constant GL_COLOR_ATTACHMENT15_EXT
#36096	constant GL_DEPTH_ATTACHMENT_EXT
#36128	constant GL_STENCIL_ATTACHMENT_EXT
#36160	constant GL_FRAMEBUFFER_EXT
#36161	constant GL_RENDERBUFFER_EXT
#36162	constant GL_RENDERBUFFER_WIDTH_EXT
#36163	constant GL_RENDERBUFFER_HEIGHT_EXT
#36164	constant GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
#36166	constant GL_STENCIL_INDEX1_EXT
#36167	constant GL_STENCIL_INDEX4_EXT
#36168	constant GL_STENCIL_INDEX8_EXT
#36169	constant GL_STENCIL_INDEX16_EXT
#36176	constant GL_RENDERBUFFER_RED_SIZE_EXT
#36177	constant GL_RENDERBUFFER_GREEN_SIZE_EXT
#36178	constant GL_RENDERBUFFER_BLUE_SIZE_EXT
#36179	constant GL_RENDERBUFFER_ALPHA_SIZE_EXT
#36180	constant GL_RENDERBUFFER_DEPTH_SIZE_EXT
#36181	constant GL_RENDERBUFFER_STENCIL_SIZE_EXT
#1	constant GL_EXT_framebuffer_sRGB
#36281	constant GL_FRAMEBUFFER_SRGB_EXT
#36282	constant GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
#1	constant GL_EXT_geometry_shader4
#36313	constant GL_GEOMETRY_SHADER_EXT
#36314	constant GL_GEOMETRY_VERTICES_OUT_EXT
#36315	constant GL_GEOMETRY_INPUT_TYPE_EXT
#36316	constant GL_GEOMETRY_OUTPUT_TYPE_EXT
#35881	constant GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
#36317	constant GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
#36318	constant GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
#35659	constant GL_MAX_VARYING_COMPONENTS_EXT
#36319	constant GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
#36320	constant GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
#36321	constant GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
#10	constant GL_LINES_ADJACENCY_EXT
#11	constant GL_LINE_STRIP_ADJACENCY_EXT
#12	constant GL_TRIANGLES_ADJACENCY_EXT
#13	constant GL_TRIANGLE_STRIP_ADJACENCY_EXT
#36264	constant GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
#36265	constant GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
#36263	constant GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
#36052	constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
#34370	constant GL_PROGRAM_POINT_SIZE_EXT
#1	constant GL_EXT_gpu_program_parameters
#1	constant GL_EXT_gpu_shader4
#35069	constant GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
#36288	constant GL_SAMPLER_1D_ARRAY_EXT
#36289	constant GL_SAMPLER_2D_ARRAY_EXT
#36290	constant GL_SAMPLER_BUFFER_EXT
#36291	constant GL_SAMPLER_1D_ARRAY_SHADOW_EXT
#36292	constant GL_SAMPLER_2D_ARRAY_SHADOW_EXT
#36293	constant GL_SAMPLER_CUBE_SHADOW_EXT
#36294	constant GL_UNSIGNED_INT_VEC2_EXT
#36295	constant GL_UNSIGNED_INT_VEC3_EXT
#36296	constant GL_UNSIGNED_INT_VEC4_EXT
#36297	constant GL_INT_SAMPLER_1D_EXT
#36298	constant GL_INT_SAMPLER_2D_EXT
#36299	constant GL_INT_SAMPLER_3D_EXT
#36300	constant GL_INT_SAMPLER_CUBE_EXT
#36301	constant GL_INT_SAMPLER_2D_RECT_EXT
#36302	constant GL_INT_SAMPLER_1D_ARRAY_EXT
#36303	constant GL_INT_SAMPLER_2D_ARRAY_EXT
#36304	constant GL_INT_SAMPLER_BUFFER_EXT
#36305	constant GL_UNSIGNED_INT_SAMPLER_1D_EXT
#36306	constant GL_UNSIGNED_INT_SAMPLER_2D_EXT
#36307	constant GL_UNSIGNED_INT_SAMPLER_3D_EXT
#36308	constant GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
#36309	constant GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
#36310	constant GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
#36311	constant GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
#36312	constant GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
#35076	constant GL_MIN_PROGRAM_TEXEL_OFFSET_EXT
#35077	constant GL_MAX_PROGRAM_TEXEL_OFFSET_EXT
#1	constant GL_EXT_histogram
#32804	constant GL_HISTOGRAM_EXT
#32805	constant GL_PROXY_HISTOGRAM_EXT
#32806	constant GL_HISTOGRAM_WIDTH_EXT
#32807	constant GL_HISTOGRAM_FORMAT_EXT
#32808	constant GL_HISTOGRAM_RED_SIZE_EXT
#32809	constant GL_HISTOGRAM_GREEN_SIZE_EXT
#32810	constant GL_HISTOGRAM_BLUE_SIZE_EXT
#32811	constant GL_HISTOGRAM_ALPHA_SIZE_EXT
#32812	constant GL_HISTOGRAM_LUMINANCE_SIZE_EXT
#32813	constant GL_HISTOGRAM_SINK_EXT
#32814	constant GL_MINMAX_EXT
#32815	constant GL_MINMAX_FORMAT_EXT
#32816	constant GL_MINMAX_SINK_EXT
#32817	constant GL_TABLE_TOO_LARGE_EXT
#1	constant GL_EXT_index_array_formats
#33197	constant GL_IUI_V2F_EXT
#33198	constant GL_IUI_V3F_EXT
#33199	constant GL_IUI_N3F_V2F_EXT
#33200	constant GL_IUI_N3F_V3F_EXT
#33201	constant GL_T2F_IUI_V2F_EXT
#33202	constant GL_T2F_IUI_V3F_EXT
#33203	constant GL_T2F_IUI_N3F_V2F_EXT
#33204	constant GL_T2F_IUI_N3F_V3F_EXT
#1	constant GL_EXT_index_func
#33205	constant GL_INDEX_TEST_EXT
#33206	constant GL_INDEX_TEST_FUNC_EXT
#33207	constant GL_INDEX_TEST_REF_EXT
#1	constant GL_EXT_index_material
#33208	constant GL_INDEX_MATERIAL_EXT
#33209	constant GL_INDEX_MATERIAL_PARAMETER_EXT
#33210	constant GL_INDEX_MATERIAL_FACE_EXT
#1	constant GL_EXT_index_texture
#1	constant GL_EXT_light_texture
#33609	constant GL_FRAGMENT_MATERIAL_EXT
#33610	constant GL_FRAGMENT_NORMAL_EXT
#33612	constant GL_FRAGMENT_COLOR_EXT
#33613	constant GL_ATTENUATION_EXT
#33614	constant GL_SHADOW_ATTENUATION_EXT
#33615	constant GL_TEXTURE_APPLICATION_MODE_EXT
#33616	constant GL_TEXTURE_LIGHT_EXT
#33617	constant GL_TEXTURE_MATERIAL_FACE_EXT
#33618	constant GL_TEXTURE_MATERIAL_PARAMETER_EXT
#1	constant GL_EXT_memory_object
#38272	constant GL_TEXTURE_TILING_EXT
#38273	constant GL_DEDICATED_MEMORY_OBJECT_EXT
#38299	constant GL_PROTECTED_MEMORY_OBJECT_EXT
#38274	constant GL_NUM_TILING_TYPES_EXT
#38275	constant GL_TILING_TYPES_EXT
#38276	constant GL_OPTIMAL_TILING_EXT
#38277	constant GL_LINEAR_TILING_EXT
#38294	constant GL_NUM_DEVICE_UUIDS_EXT
#38295	constant GL_DEVICE_UUID_EXT
#38296	constant GL_DRIVER_UUID_EXT
#16	constant GL_UUID_SIZE_EXT
#1	constant GL_EXT_memory_object_fd
#38278	constant GL_HANDLE_TYPE_OPAQUE_FD_EXT
#1	constant GL_EXT_memory_object_win32
#38279	constant GL_HANDLE_TYPE_OPAQUE_WIN32_EXT
#38280	constant GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT
#38297	constant GL_DEVICE_LUID_EXT
#38298	constant GL_DEVICE_NODE_MASK_EXT
#8	constant GL_LUID_SIZE_EXT
#38281	constant GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT
#38282	constant GL_HANDLE_TYPE_D3D12_RESOURCE_EXT
#38283	constant GL_HANDLE_TYPE_D3D11_IMAGE_EXT
#38284	constant GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT
#1	constant GL_EXT_misc_attribute
#1	constant GL_EXT_multi_draw_arrays
#1	constant GL_EXT_multisample
#32925	constant GL_MULTISAMPLE_EXT
#32926	constant GL_SAMPLE_ALPHA_TO_MASK_EXT
#32927	constant GL_SAMPLE_ALPHA_TO_ONE_EXT
#32928	constant GL_SAMPLE_MASK_EXT
#32929	constant GL_1PASS_EXT
#32930	constant GL_2PASS_0_EXT
#32931	constant GL_2PASS_1_EXT
#32932	constant GL_4PASS_0_EXT
#32933	constant GL_4PASS_1_EXT
#32934	constant GL_4PASS_2_EXT
#32935	constant GL_4PASS_3_EXT
#32936	constant GL_SAMPLE_BUFFERS_EXT
#32937	constant GL_SAMPLES_EXT
#32938	constant GL_SAMPLE_MASK_VALUE_EXT
#32939	constant GL_SAMPLE_MASK_INVERT_EXT
#32940	constant GL_SAMPLE_PATTERN_EXT
#536870912	constant GL_MULTISAMPLE_BIT_EXT
#1	constant GL_EXT_packed_depth_stencil
#34041	constant GL_DEPTH_STENCIL_EXT
#34042	constant GL_UNSIGNED_INT_24_8_EXT
#35056	constant GL_DEPTH24_STENCIL8_EXT
#35057	constant GL_TEXTURE_STENCIL_SIZE_EXT
#1	constant GL_EXT_packed_float
#35898	constant GL_R11F_G11F_B10F_EXT
#35899	constant GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
#35900	constant GL_RGBA_SIGNED_COMPONENTS_EXT
#1	constant GL_EXT_packed_pixels
#32818	constant GL_UNSIGNED_BYTE_3_3_2_EXT
#32819	constant GL_UNSIGNED_SHORT_4_4_4_4_EXT
#32820	constant GL_UNSIGNED_SHORT_5_5_5_1_EXT
#32821	constant GL_UNSIGNED_INT_8_8_8_8_EXT
#32822	constant GL_UNSIGNED_INT_10_10_10_2_EXT
#1	constant GL_EXT_paletted_texture
#32994	constant GL_COLOR_INDEX1_EXT
#32995	constant GL_COLOR_INDEX2_EXT
#32996	constant GL_COLOR_INDEX4_EXT
#32997	constant GL_COLOR_INDEX8_EXT
#32998	constant GL_COLOR_INDEX12_EXT
#32999	constant GL_COLOR_INDEX16_EXT
#33005	constant GL_TEXTURE_INDEX_SIZE_EXT
#1	constant GL_EXT_pixel_buffer_object
#35051	constant GL_PIXEL_PACK_BUFFER_EXT
#35052	constant GL_PIXEL_UNPACK_BUFFER_EXT
#35053	constant GL_PIXEL_PACK_BUFFER_BINDING_EXT
#35055	constant GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
#1	constant GL_EXT_pixel_transform
#33584	constant GL_PIXEL_TRANSFORM_2D_EXT
#33585	constant GL_PIXEL_MAG_FILTER_EXT
#33586	constant GL_PIXEL_MIN_FILTER_EXT
#33587	constant GL_PIXEL_CUBIC_WEIGHT_EXT
#33588	constant GL_CUBIC_EXT
#33589	constant GL_AVERAGE_EXT
#33590	constant GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#33591	constant GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#33592	constant GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
#1	constant GL_EXT_pixel_transform_color_table
#1	constant GL_EXT_point_parameters
#33062	constant GL_POINT_SIZE_MIN_EXT
#33063	constant GL_POINT_SIZE_MAX_EXT
#33064	constant GL_POINT_FADE_THRESHOLD_SIZE_EXT
#33065	constant GL_DISTANCE_ATTENUATION_EXT
#1	constant GL_EXT_polygon_offset
#32823	constant GL_POLYGON_OFFSET_EXT
#32824	constant GL_POLYGON_OFFSET_FACTOR_EXT
#32825	constant GL_POLYGON_OFFSET_BIAS_EXT
#1	constant GL_EXT_polygon_offset_clamp
#36379	constant GL_POLYGON_OFFSET_CLAMP_EXT
#1	constant GL_EXT_post_depth_coverage
#1	constant GL_EXT_provoking_vertex
#36428	constant GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
#36429	constant GL_FIRST_VERTEX_CONVENTION_EXT
#36430	constant GL_LAST_VERTEX_CONVENTION_EXT
#36431	constant GL_PROVOKING_VERTEX_EXT
#1	constant GL_EXT_raster_multisample
#37671	constant GL_RASTER_MULTISAMPLE_EXT
#37672	constant GL_RASTER_SAMPLES_EXT
#37673	constant GL_MAX_RASTER_SAMPLES_EXT
#37674	constant GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
#37675	constant GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT
#37676	constant GL_EFFECTIVE_RASTER_SAMPLES_EXT
#1	constant GL_EXT_rescale_normal
#32826	constant GL_RESCALE_NORMAL_EXT
#1	constant GL_EXT_secondary_color
#33880	constant GL_COLOR_SUM_EXT
#33881	constant GL_CURRENT_SECONDARY_COLOR_EXT
#33882	constant GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
#33883	constant GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
#33884	constant GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
#33885	constant GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
#33886	constant GL_SECONDARY_COLOR_ARRAY_EXT
#1	constant GL_EXT_semaphore
#38285	constant GL_LAYOUT_GENERAL_EXT
#38286	constant GL_LAYOUT_COLOR_ATTACHMENT_EXT
#38287	constant GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT
#38288	constant GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT
#38289	constant GL_LAYOUT_SHADER_READ_ONLY_EXT
#38290	constant GL_LAYOUT_TRANSFER_SRC_EXT
#38291	constant GL_LAYOUT_TRANSFER_DST_EXT
#1	constant GL_EXT_semaphore_fd
#1	constant GL_EXT_semaphore_win32
#38292	constant GL_HANDLE_TYPE_D3D12_FENCE_EXT
#38293	constant GL_D3D12_FENCE_VALUE_EXT
#1	constant GL_EXT_separate_shader_objects
#35725	constant GL_ACTIVE_PROGRAM_EXT
#1	constant GL_EXT_separate_specular_color
#33272	constant GL_LIGHT_MODEL_COLOR_CONTROL_EXT
#33273	constant GL_SINGLE_COLOR_EXT
#33274	constant GL_SEPARATE_SPECULAR_COLOR_EXT
#1	constant GL_EXT_shader_image_load_formatted
#1	constant GL_EXT_shader_image_load_store
#36664	constant GL_MAX_IMAGE_UNITS_EXT
#36665	constant GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
#36666	constant GL_IMAGE_BINDING_NAME_EXT
#36667	constant GL_IMAGE_BINDING_LEVEL_EXT
#36668	constant GL_IMAGE_BINDING_LAYERED_EXT
#36669	constant GL_IMAGE_BINDING_LAYER_EXT
#36670	constant GL_IMAGE_BINDING_ACCESS_EXT
#36940	constant GL_IMAGE_1D_EXT
#36941	constant GL_IMAGE_2D_EXT
#36942	constant GL_IMAGE_3D_EXT
#36943	constant GL_IMAGE_2D_RECT_EXT
#36944	constant GL_IMAGE_CUBE_EXT
#36945	constant GL_IMAGE_BUFFER_EXT
#36946	constant GL_IMAGE_1D_ARRAY_EXT
#36947	constant GL_IMAGE_2D_ARRAY_EXT
#36948	constant GL_IMAGE_CUBE_MAP_ARRAY_EXT
#36949	constant GL_IMAGE_2D_MULTISAMPLE_EXT
#36950	constant GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#36951	constant GL_INT_IMAGE_1D_EXT
#36952	constant GL_INT_IMAGE_2D_EXT
#36953	constant GL_INT_IMAGE_3D_EXT
#36954	constant GL_INT_IMAGE_2D_RECT_EXT
#36955	constant GL_INT_IMAGE_CUBE_EXT
#36956	constant GL_INT_IMAGE_BUFFER_EXT
#36957	constant GL_INT_IMAGE_1D_ARRAY_EXT
#36958	constant GL_INT_IMAGE_2D_ARRAY_EXT
#36959	constant GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#36960	constant GL_INT_IMAGE_2D_MULTISAMPLE_EXT
#36961	constant GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#36962	constant GL_UNSIGNED_INT_IMAGE_1D_EXT
#36963	constant GL_UNSIGNED_INT_IMAGE_2D_EXT
#36964	constant GL_UNSIGNED_INT_IMAGE_3D_EXT
#36965	constant GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
#36966	constant GL_UNSIGNED_INT_IMAGE_CUBE_EXT
#36967	constant GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
#36968	constant GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
#36969	constant GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
#36970	constant GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
#36971	constant GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
#36972	constant GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
#36973	constant GL_MAX_IMAGE_SAMPLES_EXT
#36974	constant GL_IMAGE_BINDING_FORMAT_EXT
#1	constant GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
#2	constant GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
#4	constant GL_UNIFORM_BARRIER_BIT_EXT
#8	constant GL_TEXTURE_FETCH_BARRIER_BIT_EXT
#32	constant GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
#64	constant GL_COMMAND_BARRIER_BIT_EXT
#128	constant GL_PIXEL_BUFFER_BARRIER_BIT_EXT
#256	constant GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
#512	constant GL_BUFFER_UPDATE_BARRIER_BIT_EXT
#1024	constant GL_FRAMEBUFFER_BARRIER_BIT_EXT
#2048	constant GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
#4096	constant GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
#4294967295	constant GL_ALL_BARRIER_BITS_EXT
#1	constant GL_EXT_shader_integer_mix
#1	constant GL_EXT_shadow_funcs
#1	constant GL_EXT_shared_texture_palette
#33275	constant GL_SHARED_TEXTURE_PALETTE_EXT
#1	constant GL_EXT_sparse_texture2
#1	constant GL_EXT_stencil_clear_tag
#35058	constant GL_STENCIL_TAG_BITS_EXT
#35059	constant GL_STENCIL_CLEAR_TAG_VALUE_EXT
#1	constant GL_EXT_stencil_two_side
#35088	constant GL_STENCIL_TEST_TWO_SIDE_EXT
#35089	constant GL_ACTIVE_STENCIL_FACE_EXT
#1	constant GL_EXT_stencil_wrap
#34055	constant GL_INCR_WRAP_EXT
#34056	constant GL_DECR_WRAP_EXT
#1	constant GL_EXT_subtexture
#1	constant GL_EXT_texture
#32827	constant GL_ALPHA4_EXT
#32828	constant GL_ALPHA8_EXT
#32829	constant GL_ALPHA12_EXT
#32830	constant GL_ALPHA16_EXT
#32831	constant GL_LUMINANCE4_EXT
#32832	constant GL_LUMINANCE8_EXT
#32833	constant GL_LUMINANCE12_EXT
#32834	constant GL_LUMINANCE16_EXT
#32835	constant GL_LUMINANCE4_ALPHA4_EXT
#32836	constant GL_LUMINANCE6_ALPHA2_EXT
#32837	constant GL_LUMINANCE8_ALPHA8_EXT
#32838	constant GL_LUMINANCE12_ALPHA4_EXT
#32839	constant GL_LUMINANCE12_ALPHA12_EXT
#32840	constant GL_LUMINANCE16_ALPHA16_EXT
#32841	constant GL_INTENSITY_EXT
#32842	constant GL_INTENSITY4_EXT
#32843	constant GL_INTENSITY8_EXT
#32844	constant GL_INTENSITY12_EXT
#32845	constant GL_INTENSITY16_EXT
#32846	constant GL_RGB2_EXT
#32847	constant GL_RGB4_EXT
#32848	constant GL_RGB5_EXT
#32849	constant GL_RGB8_EXT
#32850	constant GL_RGB10_EXT
#32851	constant GL_RGB12_EXT
#32852	constant GL_RGB16_EXT
#32853	constant GL_RGBA2_EXT
#32854	constant GL_RGBA4_EXT
#32855	constant GL_RGB5_A1_EXT
#32856	constant GL_RGBA8_EXT
#32857	constant GL_RGB10_A2_EXT
#32858	constant GL_RGBA12_EXT
#32859	constant GL_RGBA16_EXT
#32860	constant GL_TEXTURE_RED_SIZE_EXT
#32861	constant GL_TEXTURE_GREEN_SIZE_EXT
#32862	constant GL_TEXTURE_BLUE_SIZE_EXT
#32863	constant GL_TEXTURE_ALPHA_SIZE_EXT
#32864	constant GL_TEXTURE_LUMINANCE_SIZE_EXT
#32865	constant GL_TEXTURE_INTENSITY_SIZE_EXT
#32866	constant GL_REPLACE_EXT
#32867	constant GL_PROXY_TEXTURE_1D_EXT
#32868	constant GL_PROXY_TEXTURE_2D_EXT
#32869	constant GL_TEXTURE_TOO_LARGE_EXT
#1	constant GL_EXT_texture3D
#32875	constant GL_PACK_SKIP_IMAGES_EXT
#32876	constant GL_PACK_IMAGE_HEIGHT_EXT
#32877	constant GL_UNPACK_SKIP_IMAGES_EXT
#32878	constant GL_UNPACK_IMAGE_HEIGHT_EXT
#32879	constant GL_TEXTURE_3D_EXT
#32880	constant GL_PROXY_TEXTURE_3D_EXT
#32881	constant GL_TEXTURE_DEPTH_EXT
#32882	constant GL_TEXTURE_WRAP_R_EXT
#32883	constant GL_MAX_3D_TEXTURE_SIZE_EXT
#1	constant GL_EXT_texture_array
#35864	constant GL_TEXTURE_1D_ARRAY_EXT
#35865	constant GL_PROXY_TEXTURE_1D_ARRAY_EXT
#35866	constant GL_TEXTURE_2D_ARRAY_EXT
#35867	constant GL_PROXY_TEXTURE_2D_ARRAY_EXT
#35868	constant GL_TEXTURE_BINDING_1D_ARRAY_EXT
#35869	constant GL_TEXTURE_BINDING_2D_ARRAY_EXT
#35071	constant GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
#34894	constant GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
#1	constant GL_EXT_texture_buffer_object
#35882	constant GL_TEXTURE_BUFFER_EXT
#35883	constant GL_MAX_TEXTURE_BUFFER_SIZE_EXT
#35884	constant GL_TEXTURE_BINDING_BUFFER_EXT
#35885	constant GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
#35886	constant GL_TEXTURE_BUFFER_FORMAT_EXT
#1	constant GL_EXT_texture_compression_latc
#35952	constant GL_COMPRESSED_LUMINANCE_LATC1_EXT
#35953	constant GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
#35954	constant GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
#35955	constant GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
#1	constant GL_EXT_texture_compression_rgtc
#36283	constant GL_COMPRESSED_RED_RGTC1_EXT
#36284	constant GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
#36285	constant GL_COMPRESSED_RED_GREEN_RGTC2_EXT
#36286	constant GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
#1	constant GL_EXT_texture_compression_s3tc
#33776	constant GL_COMPRESSED_RGB_S3TC_DXT1_EXT
#33777	constant GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
#33778	constant GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
#33779	constant GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
#1	constant GL_EXT_texture_cube_map
#34065	constant GL_NORMAL_MAP_EXT
#34066	constant GL_REFLECTION_MAP_EXT
#34067	constant GL_TEXTURE_CUBE_MAP_EXT
#34068	constant GL_TEXTURE_BINDING_CUBE_MAP_EXT
#34069	constant GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
#34070	constant GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
#34071	constant GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
#34072	constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
#34073	constant GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
#34074	constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
#34075	constant GL_PROXY_TEXTURE_CUBE_MAP_EXT
#34076	constant GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
#1	constant GL_EXT_texture_env_add
#1	constant GL_EXT_texture_env_combine
#34160	constant GL_COMBINE_EXT
#34161	constant GL_COMBINE_RGB_EXT
#34162	constant GL_COMBINE_ALPHA_EXT
#34163	constant GL_RGB_SCALE_EXT
#34164	constant GL_ADD_SIGNED_EXT
#34165	constant GL_INTERPOLATE_EXT
#34166	constant GL_CONSTANT_EXT
#34167	constant GL_PRIMARY_COLOR_EXT
#34168	constant GL_PREVIOUS_EXT
#34176	constant GL_SOURCE0_RGB_EXT
#34177	constant GL_SOURCE1_RGB_EXT
#34178	constant GL_SOURCE2_RGB_EXT
#34184	constant GL_SOURCE0_ALPHA_EXT
#34185	constant GL_SOURCE1_ALPHA_EXT
#34186	constant GL_SOURCE2_ALPHA_EXT
#34192	constant GL_OPERAND0_RGB_EXT
#34193	constant GL_OPERAND1_RGB_EXT
#34194	constant GL_OPERAND2_RGB_EXT
#34200	constant GL_OPERAND0_ALPHA_EXT
#34201	constant GL_OPERAND1_ALPHA_EXT
#34202	constant GL_OPERAND2_ALPHA_EXT
#1	constant GL_EXT_texture_env_dot3
#34624	constant GL_DOT3_RGB_EXT
#34625	constant GL_DOT3_RGBA_EXT
#1	constant GL_EXT_texture_filter_anisotropic
#34046	constant GL_TEXTURE_MAX_ANISOTROPY_EXT
#34047	constant GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
#1	constant GL_EXT_texture_filter_minmax
#1	constant GL_EXT_texture_integer
#36208	constant GL_RGBA32UI_EXT
#36209	constant GL_RGB32UI_EXT
#36210	constant GL_ALPHA32UI_EXT
#36211	constant GL_INTENSITY32UI_EXT
#36212	constant GL_LUMINANCE32UI_EXT
#36213	constant GL_LUMINANCE_ALPHA32UI_EXT
#36214	constant GL_RGBA16UI_EXT
#36215	constant GL_RGB16UI_EXT
#36216	constant GL_ALPHA16UI_EXT
#36217	constant GL_INTENSITY16UI_EXT
#36218	constant GL_LUMINANCE16UI_EXT
#36219	constant GL_LUMINANCE_ALPHA16UI_EXT
#36220	constant GL_RGBA8UI_EXT
#36221	constant GL_RGB8UI_EXT
#36222	constant GL_ALPHA8UI_EXT
#36223	constant GL_INTENSITY8UI_EXT
#36224	constant GL_LUMINANCE8UI_EXT
#36225	constant GL_LUMINANCE_ALPHA8UI_EXT
#36226	constant GL_RGBA32I_EXT
#36227	constant GL_RGB32I_EXT
#36228	constant GL_ALPHA32I_EXT
#36229	constant GL_INTENSITY32I_EXT
#36230	constant GL_LUMINANCE32I_EXT
#36231	constant GL_LUMINANCE_ALPHA32I_EXT
#36232	constant GL_RGBA16I_EXT
#36233	constant GL_RGB16I_EXT
#36234	constant GL_ALPHA16I_EXT
#36235	constant GL_INTENSITY16I_EXT
#36236	constant GL_LUMINANCE16I_EXT
#36237	constant GL_LUMINANCE_ALPHA16I_EXT
#36238	constant GL_RGBA8I_EXT
#36239	constant GL_RGB8I_EXT
#36240	constant GL_ALPHA8I_EXT
#36241	constant GL_INTENSITY8I_EXT
#36242	constant GL_LUMINANCE8I_EXT
#36243	constant GL_LUMINANCE_ALPHA8I_EXT
#36244	constant GL_RED_INTEGER_EXT
#36245	constant GL_GREEN_INTEGER_EXT
#36246	constant GL_BLUE_INTEGER_EXT
#36247	constant GL_ALPHA_INTEGER_EXT
#36248	constant GL_RGB_INTEGER_EXT
#36249	constant GL_RGBA_INTEGER_EXT
#36250	constant GL_BGR_INTEGER_EXT
#36251	constant GL_BGRA_INTEGER_EXT
#36252	constant GL_LUMINANCE_INTEGER_EXT
#36253	constant GL_LUMINANCE_ALPHA_INTEGER_EXT
#36254	constant GL_RGBA_INTEGER_MODE_EXT
#1	constant GL_EXT_texture_lod_bias
#34045	constant GL_MAX_TEXTURE_LOD_BIAS_EXT
#34048	constant GL_TEXTURE_FILTER_CONTROL_EXT
#34049	constant GL_TEXTURE_LOD_BIAS_EXT
#1	constant GL_EXT_texture_mirror_clamp
#34626	constant GL_MIRROR_CLAMP_EXT
#34627	constant GL_MIRROR_CLAMP_TO_EDGE_EXT
#35090	constant GL_MIRROR_CLAMP_TO_BORDER_EXT
#1	constant GL_EXT_texture_object
#32870	constant GL_TEXTURE_PRIORITY_EXT
#32871	constant GL_TEXTURE_RESIDENT_EXT
#32872	constant GL_TEXTURE_1D_BINDING_EXT
#32873	constant GL_TEXTURE_2D_BINDING_EXT
#32874	constant GL_TEXTURE_3D_BINDING_EXT
#1	constant GL_EXT_texture_perturb_normal
#34222	constant GL_PERTURB_EXT
#34223	constant GL_TEXTURE_NORMAL_EXT
#1	constant GL_EXT_texture_sRGB
#35904	constant GL_SRGB_EXT
#35905	constant GL_SRGB8_EXT
#35906	constant GL_SRGB_ALPHA_EXT
#35907	constant GL_SRGB8_ALPHA8_EXT
#35908	constant GL_SLUMINANCE_ALPHA_EXT
#35909	constant GL_SLUMINANCE8_ALPHA8_EXT
#35910	constant GL_SLUMINANCE_EXT
#35911	constant GL_SLUMINANCE8_EXT
#35912	constant GL_COMPRESSED_SRGB_EXT
#35913	constant GL_COMPRESSED_SRGB_ALPHA_EXT
#35914	constant GL_COMPRESSED_SLUMINANCE_EXT
#35915	constant GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
#35916	constant GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
#35917	constant GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
#35918	constant GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
#35919	constant GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
#1	constant GL_EXT_texture_sRGB_decode
#35400	constant GL_TEXTURE_SRGB_DECODE_EXT
#35401	constant GL_DECODE_EXT
#35402	constant GL_SKIP_DECODE_EXT
#1	constant GL_EXT_texture_shared_exponent
#35901	constant GL_RGB9_E5_EXT
#35902	constant GL_UNSIGNED_INT_5_9_9_9_REV_EXT
#35903	constant GL_TEXTURE_SHARED_SIZE_EXT
#1	constant GL_EXT_texture_snorm
#36880	constant GL_ALPHA_SNORM
#36881	constant GL_LUMINANCE_SNORM
#36882	constant GL_LUMINANCE_ALPHA_SNORM
#36883	constant GL_INTENSITY_SNORM
#36884	constant GL_ALPHA8_SNORM
#36885	constant GL_LUMINANCE8_SNORM
#36886	constant GL_LUMINANCE8_ALPHA8_SNORM
#36887	constant GL_INTENSITY8_SNORM
#36888	constant GL_ALPHA16_SNORM
#36889	constant GL_LUMINANCE16_SNORM
#36890	constant GL_LUMINANCE16_ALPHA16_SNORM
#36891	constant GL_INTENSITY16_SNORM
#36752	constant GL_RED_SNORM
#36753	constant GL_RG_SNORM
#36754	constant GL_RGB_SNORM
#36755	constant GL_RGBA_SNORM
#1	constant GL_EXT_texture_swizzle
#36418	constant GL_TEXTURE_SWIZZLE_R_EXT
#36419	constant GL_TEXTURE_SWIZZLE_G_EXT
#36420	constant GL_TEXTURE_SWIZZLE_B_EXT
#36421	constant GL_TEXTURE_SWIZZLE_A_EXT
#36422	constant GL_TEXTURE_SWIZZLE_RGBA_EXT
#1	constant GL_EXT_timer_query
#35007	constant GL_TIME_ELAPSED_EXT
#1	constant GL_EXT_transform_feedback
#35982	constant GL_TRANSFORM_FEEDBACK_BUFFER_EXT
#35972	constant GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
#35973	constant GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
#35983	constant GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
#35980	constant GL_INTERLEAVED_ATTRIBS_EXT
#35981	constant GL_SEPARATE_ATTRIBS_EXT
#35975	constant GL_PRIMITIVES_GENERATED_EXT
#35976	constant GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
#35977	constant GL_RASTERIZER_DISCARD_EXT
#35978	constant GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
#35979	constant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
#35968	constant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
#35971	constant GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
#35967	constant GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
#35958	constant GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
#1	constant GL_EXT_vertex_array
#32884	constant GL_VERTEX_ARRAY_EXT
#32885	constant GL_NORMAL_ARRAY_EXT
#32886	constant GL_COLOR_ARRAY_EXT
#32887	constant GL_INDEX_ARRAY_EXT
#32888	constant GL_TEXTURE_COORD_ARRAY_EXT
#32889	constant GL_EDGE_FLAG_ARRAY_EXT
#32890	constant GL_VERTEX_ARRAY_SIZE_EXT
#32891	constant GL_VERTEX_ARRAY_TYPE_EXT
#32892	constant GL_VERTEX_ARRAY_STRIDE_EXT
#32893	constant GL_VERTEX_ARRAY_COUNT_EXT
#32894	constant GL_NORMAL_ARRAY_TYPE_EXT
#32895	constant GL_NORMAL_ARRAY_STRIDE_EXT
#32896	constant GL_NORMAL_ARRAY_COUNT_EXT
#32897	constant GL_COLOR_ARRAY_SIZE_EXT
#32898	constant GL_COLOR_ARRAY_TYPE_EXT
#32899	constant GL_COLOR_ARRAY_STRIDE_EXT
#32900	constant GL_COLOR_ARRAY_COUNT_EXT
#32901	constant GL_INDEX_ARRAY_TYPE_EXT
#32902	constant GL_INDEX_ARRAY_STRIDE_EXT
#32903	constant GL_INDEX_ARRAY_COUNT_EXT
#32904	constant GL_TEXTURE_COORD_ARRAY_SIZE_EXT
#32905	constant GL_TEXTURE_COORD_ARRAY_TYPE_EXT
#32906	constant GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
#32907	constant GL_TEXTURE_COORD_ARRAY_COUNT_EXT
#32908	constant GL_EDGE_FLAG_ARRAY_STRIDE_EXT
#32909	constant GL_EDGE_FLAG_ARRAY_COUNT_EXT
#32910	constant GL_VERTEX_ARRAY_POINTER_EXT
#32911	constant GL_NORMAL_ARRAY_POINTER_EXT
#32912	constant GL_COLOR_ARRAY_POINTER_EXT
#32913	constant GL_INDEX_ARRAY_POINTER_EXT
#32914	constant GL_TEXTURE_COORD_ARRAY_POINTER_EXT
#32915	constant GL_EDGE_FLAG_ARRAY_POINTER_EXT
#1	constant GL_EXT_vertex_array_bgra
#1	constant GL_EXT_vertex_attrib_64bit
#36860	constant GL_DOUBLE_VEC2_EXT
#36861	constant GL_DOUBLE_VEC3_EXT
#36862	constant GL_DOUBLE_VEC4_EXT
#36678	constant GL_DOUBLE_MAT2_EXT
#36679	constant GL_DOUBLE_MAT3_EXT
#36680	constant GL_DOUBLE_MAT4_EXT
#36681	constant GL_DOUBLE_MAT2x3_EXT
#36682	constant GL_DOUBLE_MAT2x4_EXT
#36683	constant GL_DOUBLE_MAT3x2_EXT
#36684	constant GL_DOUBLE_MAT3x4_EXT
#36685	constant GL_DOUBLE_MAT4x2_EXT
#36686	constant GL_DOUBLE_MAT4x3_EXT
#1	constant GL_EXT_vertex_shader
#34688	constant GL_VERTEX_SHADER_EXT
#34689	constant GL_VERTEX_SHADER_BINDING_EXT
#34690	constant GL_OP_INDEX_EXT
#34691	constant GL_OP_NEGATE_EXT
#34692	constant GL_OP_DOT3_EXT
#34693	constant GL_OP_DOT4_EXT
#34694	constant GL_OP_MUL_EXT
#34695	constant GL_OP_ADD_EXT
#34696	constant GL_OP_MADD_EXT
#34697	constant GL_OP_FRAC_EXT
#34698	constant GL_OP_MAX_EXT
#34699	constant GL_OP_MIN_EXT
#34700	constant GL_OP_SET_GE_EXT
#34701	constant GL_OP_SET_LT_EXT
#34702	constant GL_OP_CLAMP_EXT
#34703	constant GL_OP_FLOOR_EXT
#34704	constant GL_OP_ROUND_EXT
#34705	constant GL_OP_EXP_BASE_2_EXT
#34706	constant GL_OP_LOG_BASE_2_EXT
#34707	constant GL_OP_POWER_EXT
#34708	constant GL_OP_RECIP_EXT
#34709	constant GL_OP_RECIP_SQRT_EXT
#34710	constant GL_OP_SUB_EXT
#34711	constant GL_OP_CROSS_PRODUCT_EXT
#34712	constant GL_OP_MULTIPLY_MATRIX_EXT
#34713	constant GL_OP_MOV_EXT
#34714	constant GL_OUTPUT_VERTEX_EXT
#34715	constant GL_OUTPUT_COLOR0_EXT
#34716	constant GL_OUTPUT_COLOR1_EXT
#34717	constant GL_OUTPUT_TEXTURE_COORD0_EXT
#34718	constant GL_OUTPUT_TEXTURE_COORD1_EXT
#34719	constant GL_OUTPUT_TEXTURE_COORD2_EXT
#34720	constant GL_OUTPUT_TEXTURE_COORD3_EXT
#34721	constant GL_OUTPUT_TEXTURE_COORD4_EXT
#34722	constant GL_OUTPUT_TEXTURE_COORD5_EXT
#34723	constant GL_OUTPUT_TEXTURE_COORD6_EXT
#34724	constant GL_OUTPUT_TEXTURE_COORD7_EXT
#34725	constant GL_OUTPUT_TEXTURE_COORD8_EXT
#34726	constant GL_OUTPUT_TEXTURE_COORD9_EXT
#34727	constant GL_OUTPUT_TEXTURE_COORD10_EXT
#34728	constant GL_OUTPUT_TEXTURE_COORD11_EXT
#34729	constant GL_OUTPUT_TEXTURE_COORD12_EXT
#34730	constant GL_OUTPUT_TEXTURE_COORD13_EXT
#34731	constant GL_OUTPUT_TEXTURE_COORD14_EXT
#34732	constant GL_OUTPUT_TEXTURE_COORD15_EXT
#34733	constant GL_OUTPUT_TEXTURE_COORD16_EXT
#34734	constant GL_OUTPUT_TEXTURE_COORD17_EXT
#34735	constant GL_OUTPUT_TEXTURE_COORD18_EXT
#34736	constant GL_OUTPUT_TEXTURE_COORD19_EXT
#34737	constant GL_OUTPUT_TEXTURE_COORD20_EXT
#34738	constant GL_OUTPUT_TEXTURE_COORD21_EXT
#34739	constant GL_OUTPUT_TEXTURE_COORD22_EXT
#34740	constant GL_OUTPUT_TEXTURE_COORD23_EXT
#34741	constant GL_OUTPUT_TEXTURE_COORD24_EXT
#34742	constant GL_OUTPUT_TEXTURE_COORD25_EXT
#34743	constant GL_OUTPUT_TEXTURE_COORD26_EXT
#34744	constant GL_OUTPUT_TEXTURE_COORD27_EXT
#34745	constant GL_OUTPUT_TEXTURE_COORD28_EXT
#34746	constant GL_OUTPUT_TEXTURE_COORD29_EXT
#34747	constant GL_OUTPUT_TEXTURE_COORD30_EXT
#34748	constant GL_OUTPUT_TEXTURE_COORD31_EXT
#34749	constant GL_OUTPUT_FOG_EXT
#34750	constant GL_SCALAR_EXT
#34751	constant GL_VECTOR_EXT
#34752	constant GL_MATRIX_EXT
#34753	constant GL_VARIANT_EXT
#34754	constant GL_INVARIANT_EXT
#34755	constant GL_LOCAL_CONSTANT_EXT
#34756	constant GL_LOCAL_EXT
#34757	constant GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
#34758	constant GL_MAX_VERTEX_SHADER_VARIANTS_EXT
#34759	constant GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
#34760	constant GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#34761	constant GL_MAX_VERTEX_SHADER_LOCALS_EXT
#34762	constant GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
#34763	constant GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
#34764	constant GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#34765	constant GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
#34766	constant GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
#34767	constant GL_VERTEX_SHADER_INSTRUCTIONS_EXT
#34768	constant GL_VERTEX_SHADER_VARIANTS_EXT
#34769	constant GL_VERTEX_SHADER_INVARIANTS_EXT
#34770	constant GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#34771	constant GL_VERTEX_SHADER_LOCALS_EXT
#34772	constant GL_VERTEX_SHADER_OPTIMIZED_EXT
#34773	constant GL_X_EXT
#34774	constant GL_Y_EXT
#34775	constant GL_Z_EXT
#34776	constant GL_W_EXT
#34777	constant GL_NEGATIVE_X_EXT
#34778	constant GL_NEGATIVE_Y_EXT
#34779	constant GL_NEGATIVE_Z_EXT
#34780	constant GL_NEGATIVE_W_EXT
#34781	constant GL_ZERO_EXT
#34782	constant GL_ONE_EXT
#34783	constant GL_NEGATIVE_ONE_EXT
#34784	constant GL_NORMALIZED_RANGE_EXT
#34785	constant GL_FULL_RANGE_EXT
#34786	constant GL_CURRENT_VERTEX_EXT
#34787	constant GL_MVP_MATRIX_EXT
#34788	constant GL_VARIANT_VALUE_EXT
#34789	constant GL_VARIANT_DATATYPE_EXT
#34790	constant GL_VARIANT_ARRAY_STRIDE_EXT
#34791	constant GL_VARIANT_ARRAY_TYPE_EXT
#34792	constant GL_VARIANT_ARRAY_EXT
#34793	constant GL_VARIANT_ARRAY_POINTER_EXT
#34794	constant GL_INVARIANT_VALUE_EXT
#34795	constant GL_INVARIANT_DATATYPE_EXT
#34796	constant GL_LOCAL_CONSTANT_VALUE_EXT
#34797	constant GL_LOCAL_CONSTANT_DATATYPE_EXT
#1	constant GL_EXT_vertex_weighting
#2979	constant GL_MODELVIEW0_STACK_DEPTH_EXT
#34050	constant GL_MODELVIEW1_STACK_DEPTH_EXT
#2982	constant GL_MODELVIEW0_MATRIX_EXT
#34054	constant GL_MODELVIEW1_MATRIX_EXT
#34057	constant GL_VERTEX_WEIGHTING_EXT
#5888	constant GL_MODELVIEW0_EXT
#34058	constant GL_MODELVIEW1_EXT
#34059	constant GL_CURRENT_VERTEX_WEIGHT_EXT
#34060	constant GL_VERTEX_WEIGHT_ARRAY_EXT
#34061	constant GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
#34062	constant GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
#34063	constant GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
#34064	constant GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
#1	constant GL_EXT_win32_keyed_mutex
#1	constant GL_EXT_window_rectangles
#36624	constant GL_INCLUSIVE_EXT
#36625	constant GL_EXCLUSIVE_EXT
#36626	constant GL_WINDOW_RECTANGLE_EXT
#36627	constant GL_WINDOW_RECTANGLE_MODE_EXT
#36628	constant GL_MAX_WINDOW_RECTANGLES_EXT
#36629	constant GL_NUM_WINDOW_RECTANGLES_EXT
#1	constant GL_EXT_x11_sync_object
#37089	constant GL_SYNC_X11_FENCE_EXT
#1	constant GL_GREMEDY_frame_terminator
#1	constant GL_GREMEDY_string_marker
#1	constant GL_HP_convolution_border_modes
#33104	constant GL_IGNORE_BORDER_HP
#33105	constant GL_CONSTANT_BORDER_HP
#33107	constant GL_REPLICATE_BORDER_HP
#33108	constant GL_CONVOLUTION_BORDER_COLOR_HP
#1	constant GL_HP_image_transform
#33109	constant GL_IMAGE_SCALE_X_HP
#33110	constant GL_IMAGE_SCALE_Y_HP
#33111	constant GL_IMAGE_TRANSLATE_X_HP
#33112	constant GL_IMAGE_TRANSLATE_Y_HP
#33113	constant GL_IMAGE_ROTATE_ANGLE_HP
#33114	constant GL_IMAGE_ROTATE_ORIGIN_X_HP
#33115	constant GL_IMAGE_ROTATE_ORIGIN_Y_HP
#33116	constant GL_IMAGE_MAG_FILTER_HP
#33117	constant GL_IMAGE_MIN_FILTER_HP
#33118	constant GL_IMAGE_CUBIC_WEIGHT_HP
#33119	constant GL_CUBIC_HP
#33120	constant GL_AVERAGE_HP
#33121	constant GL_IMAGE_TRANSFORM_2D_HP
#33122	constant GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
#33123	constant GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
#1	constant GL_HP_occlusion_test
#33125	constant GL_OCCLUSION_TEST_HP
#33126	constant GL_OCCLUSION_TEST_RESULT_HP
#1	constant GL_HP_texture_lighting
#33127	constant GL_TEXTURE_LIGHTING_MODE_HP
#33128	constant GL_TEXTURE_POST_SPECULAR_HP
#33129	constant GL_TEXTURE_PRE_SPECULAR_HP
#1	constant GL_IBM_cull_vertex
#103050	constant GL_CULL_VERTEX_IBM
#1	constant GL_IBM_multimode_draw_arrays
#1	constant GL_IBM_rasterpos_clip
#103010	constant GL_RASTER_POSITION_UNCLIPPED_IBM
#1	constant GL_IBM_static_data
#103060	constant GL_ALL_STATIC_DATA_IBM
#103061	constant GL_STATIC_VERTEX_ARRAY_IBM
#1	constant GL_IBM_texture_mirrored_repeat
#33648	constant GL_MIRRORED_REPEAT_IBM
#1	constant GL_IBM_vertex_array_lists
#103070	constant GL_VERTEX_ARRAY_LIST_IBM
#103071	constant GL_NORMAL_ARRAY_LIST_IBM
#103072	constant GL_COLOR_ARRAY_LIST_IBM
#103073	constant GL_INDEX_ARRAY_LIST_IBM
#103074	constant GL_TEXTURE_COORD_ARRAY_LIST_IBM
#103075	constant GL_EDGE_FLAG_ARRAY_LIST_IBM
#103076	constant GL_FOG_COORDINATE_ARRAY_LIST_IBM
#103077	constant GL_SECONDARY_COLOR_ARRAY_LIST_IBM
#103080	constant GL_VERTEX_ARRAY_LIST_STRIDE_IBM
#103081	constant GL_NORMAL_ARRAY_LIST_STRIDE_IBM
#103082	constant GL_COLOR_ARRAY_LIST_STRIDE_IBM
#103083	constant GL_INDEX_ARRAY_LIST_STRIDE_IBM
#103084	constant GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
#103085	constant GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
#103086	constant GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
#103087	constant GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
#1	constant GL_INGR_blend_func_separate
#1	constant GL_INGR_color_clamp
#34144	constant GL_RED_MIN_CLAMP_INGR
#34145	constant GL_GREEN_MIN_CLAMP_INGR
#34146	constant GL_BLUE_MIN_CLAMP_INGR
#34147	constant GL_ALPHA_MIN_CLAMP_INGR
#34148	constant GL_RED_MAX_CLAMP_INGR
#34149	constant GL_GREEN_MAX_CLAMP_INGR
#34150	constant GL_BLUE_MAX_CLAMP_INGR
#34151	constant GL_ALPHA_MAX_CLAMP_INGR
#1	constant GL_INGR_interlace_read
#34152	constant GL_INTERLACE_READ_INGR
#1	constant GL_INTEL_conservative_rasterization
#33790	constant GL_CONSERVATIVE_RASTERIZATION_INTEL
#1	constant GL_INTEL_fragment_shader_ordering
#1	constant GL_INTEL_framebuffer_CMAA
#1	constant GL_INTEL_map_texture
#33791	constant GL_TEXTURE_MEMORY_LAYOUT_INTEL
#0	constant GL_LAYOUT_DEFAULT_INTEL
#1	constant GL_LAYOUT_LINEAR_INTEL
#2	constant GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
#1	constant GL_INTEL_parallel_arrays
#33780	constant GL_PARALLEL_ARRAYS_INTEL
#33781	constant GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
#33782	constant GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
#33783	constant GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
#33784	constant GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
#1	constant GL_INTEL_performance_query
#0	constant GL_PERFQUERY_SINGLE_CONTEXT_INTEL
#1	constant GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
#33787	constant GL_PERFQUERY_WAIT_INTEL
#33786	constant GL_PERFQUERY_FLUSH_INTEL
#33785	constant GL_PERFQUERY_DONOT_FLUSH_INTEL
#38128	constant GL_PERFQUERY_COUNTER_EVENT_INTEL
#38129	constant GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
#38130	constant GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
#38131	constant GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
#38132	constant GL_PERFQUERY_COUNTER_RAW_INTEL
#38133	constant GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
#38136	constant GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
#38137	constant GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
#38138	constant GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
#38139	constant GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
#38140	constant GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
#38141	constant GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
#38142	constant GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
#38143	constant GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
#38144	constant GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
#1	constant GL_MESAX_texture_stack
#34649	constant GL_TEXTURE_1D_STACK_MESAX
#34650	constant GL_TEXTURE_2D_STACK_MESAX
#34651	constant GL_PROXY_TEXTURE_1D_STACK_MESAX
#34652	constant GL_PROXY_TEXTURE_2D_STACK_MESAX
#34653	constant GL_TEXTURE_1D_STACK_BINDING_MESAX
#34654	constant GL_TEXTURE_2D_STACK_BINDING_MESAX
#1	constant GL_MESA_pack_invert
#34648	constant GL_PACK_INVERT_MESA
#1	constant GL_MESA_program_binary_formats
#34655	constant GL_PROGRAM_BINARY_FORMAT_MESA
#1	constant GL_MESA_resize_buffers
#1	constant GL_MESA_shader_integer_functions
#1	constant GL_MESA_tile_raster_order
#35768	constant GL_TILE_RASTER_ORDER_FIXED_MESA
#35769	constant GL_TILE_RASTER_ORDER_INCREASING_X_MESA
#35770	constant GL_TILE_RASTER_ORDER_INCREASING_Y_MESA
#1	constant GL_MESA_window_pos
#1	constant GL_MESA_ycbcr_texture
#34234	constant GL_UNSIGNED_SHORT_8_8_MESA
#34235	constant GL_UNSIGNED_SHORT_8_8_REV_MESA
#34647	constant GL_YCBCR_MESA
#1	constant GL_NVX_blend_equation_advanced_multi_draw_buffers
#1	constant GL_NVX_conditional_render
#1	constant GL_NVX_gpu_memory_info
#36935	constant GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
#36936	constant GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
#36937	constant GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
#36938	constant GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
#36939	constant GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
#1	constant GL_NVX_linked_gpu_multicast
#2048	constant GL_LGPU_SEPARATE_STORAGE_BIT_NVX
#37562	constant GL_MAX_LGPU_GPUS_NVX
#1	constant GL_NV_alpha_to_coverage_dither_control
#37709	constant GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV
#37710	constant GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV
#37711	constant GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV
#37567	constant GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV
#1	constant GL_NV_bindless_multi_draw_indirect
#1	constant GL_NV_bindless_multi_draw_indirect_count
#1	constant GL_NV_bindless_texture
#1	constant GL_NV_blend_equation_advanced
#37505	constant GL_BLEND_OVERLAP_NV
#37504	constant GL_BLEND_PREMULTIPLIED_SRC_NV
#6405	constant GL_BLUE_NV
#37530	constant GL_COLORBURN_NV
#37529	constant GL_COLORDODGE_NV
#37508	constant GL_CONJOINT_NV
#37537	constant GL_CONTRAST_NV
#37527	constant GL_DARKEN_NV
#37534	constant GL_DIFFERENCE_NV
#37507	constant GL_DISJOINT_NV
#37519	constant GL_DST_ATOP_NV
#37515	constant GL_DST_IN_NV
#37511	constant GL_DST_NV
#37517	constant GL_DST_OUT_NV
#37513	constant GL_DST_OVER_NV
#37536	constant GL_EXCLUSION_NV
#6404	constant GL_GREEN_NV
#37531	constant GL_HARDLIGHT_NV
#37545	constant GL_HARDMIX_NV
#37551	constant GL_HSL_COLOR_NV
#37549	constant GL_HSL_HUE_NV
#37552	constant GL_HSL_LUMINOSITY_NV
#37550	constant GL_HSL_SATURATION_NV
#37556	constant GL_INVERT_OVG_NV
#37539	constant GL_INVERT_RGB_NV
#37528	constant GL_LIGHTEN_NV
#37541	constant GL_LINEARBURN_NV
#37540	constant GL_LINEARDODGE_NV
#37543	constant GL_LINEARLIGHT_NV
#37555	constant GL_MINUS_CLAMPED_NV
#37535	constant GL_MINUS_NV
#37524	constant GL_MULTIPLY_NV
#37526	constant GL_OVERLAY_NV
#37544	constant GL_PINLIGHT_NV
#37554	constant GL_PLUS_CLAMPED_ALPHA_NV
#37553	constant GL_PLUS_CLAMPED_NV
#37522	constant GL_PLUS_DARKER_NV
#37521	constant GL_PLUS_NV
#6403	constant GL_RED_NV
#37525	constant GL_SCREEN_NV
#37532	constant GL_SOFTLIGHT_NV
#37518	constant GL_SRC_ATOP_NV
#37514	constant GL_SRC_IN_NV
#37510	constant GL_SRC_NV
#37516	constant GL_SRC_OUT_NV
#37512	constant GL_SRC_OVER_NV
#37506	constant GL_UNCORRELATED_NV
#37542	constant GL_VIVIDLIGHT_NV
#5382	constant GL_XOR_NV
#1	constant GL_NV_blend_equation_advanced_coherent
#37509	constant GL_BLEND_ADVANCED_COHERENT_NV
#1	constant GL_NV_blend_minmax_factor
#1	constant GL_NV_blend_square
#1	constant GL_NV_clip_space_w_scaling
#37756	constant GL_VIEWPORT_POSITION_W_SCALE_NV
#37757	constant GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV
#37758	constant GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV
#1	constant GL_NV_command_list
#0	constant GL_TERMINATE_SEQUENCE_COMMAND_NV
#1	constant GL_NOP_COMMAND_NV
#2	constant GL_DRAW_ELEMENTS_COMMAND_NV
#3	constant GL_DRAW_ARRAYS_COMMAND_NV
#4	constant GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
#5	constant GL_DRAW_ARRAYS_STRIP_COMMAND_NV
#6	constant GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
#7	constant GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
#8	constant GL_ELEMENT_ADDRESS_COMMAND_NV
#9	constant GL_ATTRIBUTE_ADDRESS_COMMAND_NV
#10	constant GL_UNIFORM_ADDRESS_COMMAND_NV
#11	constant GL_BLEND_COLOR_COMMAND_NV
#12	constant GL_STENCIL_REF_COMMAND_NV
#13	constant GL_LINE_WIDTH_COMMAND_NV
#14	constant GL_POLYGON_OFFSET_COMMAND_NV
#15	constant GL_ALPHA_REF_COMMAND_NV
#16	constant GL_VIEWPORT_COMMAND_NV
#17	constant GL_SCISSOR_COMMAND_NV
#18	constant GL_FRONT_FACE_COMMAND_NV
#1	constant GL_NV_compute_program5
#37115	constant GL_COMPUTE_PROGRAM_NV
#37116	constant GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
#1	constant GL_NV_conditional_render
#36371	constant GL_QUERY_WAIT_NV
#36372	constant GL_QUERY_NO_WAIT_NV
#36373	constant GL_QUERY_BY_REGION_WAIT_NV
#36374	constant GL_QUERY_BY_REGION_NO_WAIT_NV
#1	constant GL_NV_conservative_raster
#37702	constant GL_CONSERVATIVE_RASTERIZATION_NV
#37703	constant GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV
#37704	constant GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV
#37705	constant GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
#1	constant GL_NV_conservative_raster_dilate
#37753	constant GL_CONSERVATIVE_RASTER_DILATE_NV
#37754	constant GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
#37755	constant GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
#1	constant GL_NV_conservative_raster_pre_snap_triangles
#38221	constant GL_CONSERVATIVE_RASTER_MODE_NV
#38222	constant GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV
#38223	constant GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV
#1	constant GL_NV_copy_depth_to_color
#34926	constant GL_DEPTH_STENCIL_TO_RGBA_NV
#34927	constant GL_DEPTH_STENCIL_TO_BGRA_NV
#1	constant GL_NV_copy_image
#1	constant GL_NV_deep_texture3D
#37072	constant GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
#37073	constant GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
#1	constant GL_NV_depth_buffer_float
#36267	constant GL_DEPTH_COMPONENT32F_NV
#36268	constant GL_DEPTH32F_STENCIL8_NV
#36269	constant GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
#36271	constant GL_DEPTH_BUFFER_FLOAT_MODE_NV
#1	constant GL_NV_depth_clamp
#34383	constant GL_DEPTH_CLAMP_NV
#1	constant GL_NV_draw_texture
#1	constant GL_NV_draw_vulkan_image
#1	constant GL_NV_evaluators
#34496	constant GL_EVAL_2D_NV
#34497	constant GL_EVAL_TRIANGULAR_2D_NV
#34498	constant GL_MAP_TESSELLATION_NV
#34499	constant GL_MAP_ATTRIB_U_ORDER_NV
#34500	constant GL_MAP_ATTRIB_V_ORDER_NV
#34501	constant GL_EVAL_FRACTIONAL_TESSELLATION_NV
#34502	constant GL_EVAL_VERTEX_ATTRIB0_NV
#34503	constant GL_EVAL_VERTEX_ATTRIB1_NV
#34504	constant GL_EVAL_VERTEX_ATTRIB2_NV
#34505	constant GL_EVAL_VERTEX_ATTRIB3_NV
#34506	constant GL_EVAL_VERTEX_ATTRIB4_NV
#34507	constant GL_EVAL_VERTEX_ATTRIB5_NV
#34508	constant GL_EVAL_VERTEX_ATTRIB6_NV
#34509	constant GL_EVAL_VERTEX_ATTRIB7_NV
#34510	constant GL_EVAL_VERTEX_ATTRIB8_NV
#34511	constant GL_EVAL_VERTEX_ATTRIB9_NV
#34512	constant GL_EVAL_VERTEX_ATTRIB10_NV
#34513	constant GL_EVAL_VERTEX_ATTRIB11_NV
#34514	constant GL_EVAL_VERTEX_ATTRIB12_NV
#34515	constant GL_EVAL_VERTEX_ATTRIB13_NV
#34516	constant GL_EVAL_VERTEX_ATTRIB14_NV
#34517	constant GL_EVAL_VERTEX_ATTRIB15_NV
#34518	constant GL_MAX_MAP_TESSELLATION_NV
#34519	constant GL_MAX_RATIONAL_EVAL_ORDER_NV
#1	constant GL_NV_explicit_multisample
#36432	constant GL_SAMPLE_POSITION_NV
#36433	constant GL_SAMPLE_MASK_NV
#36434	constant GL_SAMPLE_MASK_VALUE_NV
#36435	constant GL_TEXTURE_BINDING_RENDERBUFFER_NV
#36436	constant GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
#36437	constant GL_TEXTURE_RENDERBUFFER_NV
#36438	constant GL_SAMPLER_RENDERBUFFER_NV
#36439	constant GL_INT_SAMPLER_RENDERBUFFER_NV
#36440	constant GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
#36441	constant GL_MAX_SAMPLE_MASK_WORDS_NV
#1	constant GL_NV_fence
#34034	constant GL_ALL_COMPLETED_NV
#34035	constant GL_FENCE_STATUS_NV
#34036	constant GL_FENCE_CONDITION_NV
#1	constant GL_NV_fill_rectangle
#37692	constant GL_FILL_RECTANGLE_NV
#1	constant GL_NV_float_buffer
#34944	constant GL_FLOAT_R_NV
#34945	constant GL_FLOAT_RG_NV
#34946	constant GL_FLOAT_RGB_NV
#34947	constant GL_FLOAT_RGBA_NV
#34948	constant GL_FLOAT_R16_NV
#34949	constant GL_FLOAT_R32_NV
#34950	constant GL_FLOAT_RG16_NV
#34951	constant GL_FLOAT_RG32_NV
#34952	constant GL_FLOAT_RGB16_NV
#34953	constant GL_FLOAT_RGB32_NV
#34954	constant GL_FLOAT_RGBA16_NV
#34955	constant GL_FLOAT_RGBA32_NV
#34956	constant GL_TEXTURE_FLOAT_COMPONENTS_NV
#34957	constant GL_FLOAT_CLEAR_COLOR_VALUE_NV
#34958	constant GL_FLOAT_RGBA_MODE_NV
#1	constant GL_NV_fog_distance
#34138	constant GL_FOG_DISTANCE_MODE_NV
#34139	constant GL_EYE_RADIAL_NV
#34140	constant GL_EYE_PLANE_ABSOLUTE_NV
#1	constant GL_NV_fragment_coverage_to_color
#37597	constant GL_FRAGMENT_COVERAGE_TO_COLOR_NV
#37598	constant GL_FRAGMENT_COVERAGE_COLOR_NV
#1	constant GL_NV_fragment_program
#34920	constant GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
#34928	constant GL_FRAGMENT_PROGRAM_NV
#34929	constant GL_MAX_TEXTURE_COORDS_NV
#34930	constant GL_MAX_TEXTURE_IMAGE_UNITS_NV
#34931	constant GL_FRAGMENT_PROGRAM_BINDING_NV
#34932	constant GL_PROGRAM_ERROR_STRING_NV
#1	constant GL_NV_fragment_program2
#35060	constant GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
#35061	constant GL_MAX_PROGRAM_CALL_DEPTH_NV
#35062	constant GL_MAX_PROGRAM_IF_DEPTH_NV
#35063	constant GL_MAX_PROGRAM_LOOP_DEPTH_NV
#35064	constant GL_MAX_PROGRAM_LOOP_COUNT_NV
#1	constant GL_NV_fragment_program4
#1	constant GL_NV_fragment_program_option
#1	constant GL_NV_fragment_shader_interlock
#1	constant GL_NV_framebuffer_mixed_samples
#37681	constant GL_COVERAGE_MODULATION_TABLE_NV
#36384	constant GL_COLOR_SAMPLES_NV
#37677	constant GL_DEPTH_SAMPLES_NV
#37678	constant GL_STENCIL_SAMPLES_NV
#37679	constant GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
#37680	constant GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV
#37682	constant GL_COVERAGE_MODULATION_NV
#37683	constant GL_COVERAGE_MODULATION_TABLE_SIZE_NV
#1	constant GL_NV_framebuffer_multisample_coverage
#36011	constant GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
#36368	constant GL_RENDERBUFFER_COLOR_SAMPLES_NV
#36369	constant GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
#36370	constant GL_MULTISAMPLE_COVERAGE_MODES_NV
#1	constant GL_NV_geometry_program4
#35878	constant GL_GEOMETRY_PROGRAM_NV
#35879	constant GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
#35880	constant GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
#1	constant GL_NV_geometry_shader4
#1	constant GL_NV_geometry_shader_passthrough
#1	constant GL_NV_gpu_multicast
#2048	constant GL_PER_GPU_STORAGE_BIT_NV
#37562	constant GL_MULTICAST_GPUS_NV
#38232	constant GL_RENDER_GPU_MASK_NV
#38216	constant GL_PER_GPU_STORAGE_NV
#38217	constant GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV
#1	constant GL_NV_gpu_program4
#35076	constant GL_MIN_PROGRAM_TEXEL_OFFSET_NV
#35077	constant GL_MAX_PROGRAM_TEXEL_OFFSET_NV
#35078	constant GL_PROGRAM_ATTRIB_COMPONENTS_NV
#35079	constant GL_PROGRAM_RESULT_COMPONENTS_NV
#35080	constant GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
#35081	constant GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
#36261	constant GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
#36262	constant GL_MAX_PROGRAM_GENERIC_RESULTS_NV
#1	constant GL_NV_gpu_program5
#36442	constant GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
#36443	constant GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
#36444	constant GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
#36445	constant GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
#36446	constant GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#36447	constant GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
#36676	constant GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
#36677	constant GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
#1	constant GL_NV_gpu_program5_mem_extended
#1	constant GL_NV_gpu_shader5
#1	constant GL_NV_half_float
#5131	constant GL_HALF_FLOAT_NV
#1	constant GL_NV_internalformat_sample_query
#37745	constant GL_MULTISAMPLES_NV
#37746	constant GL_SUPERSAMPLE_SCALE_X_NV
#37747	constant GL_SUPERSAMPLE_SCALE_Y_NV
#37748	constant GL_CONFORMANT_NV
#1	constant GL_NV_light_max_exponent
#34052	constant GL_MAX_SHININESS_NV
#34053	constant GL_MAX_SPOT_EXPONENT_NV
#1	constant GL_NV_multisample_coverage
#1	constant GL_NV_multisample_filter_hint
#34100	constant GL_MULTISAMPLE_FILTER_HINT_NV
#1	constant GL_NV_occlusion_query
#34916	constant GL_PIXEL_COUNTER_BITS_NV
#34917	constant GL_CURRENT_OCCLUSION_QUERY_ID_NV
#34918	constant GL_PIXEL_COUNT_NV
#34919	constant GL_PIXEL_COUNT_AVAILABLE_NV
#1	constant GL_NV_packed_depth_stencil
#34041	constant GL_DEPTH_STENCIL_NV
#34042	constant GL_UNSIGNED_INT_24_8_NV
#1	constant GL_NV_parameter_buffer_object
#36256	constant GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
#36257	constant GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
#36258	constant GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
#36259	constant GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
#36260	constant GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
#1	constant GL_NV_parameter_buffer_object2
#1	constant GL_NV_path_rendering
#36976	constant GL_PATH_FORMAT_SVG_NV
#36977	constant GL_PATH_FORMAT_PS_NV
#36978	constant GL_STANDARD_FONT_NAME_NV
#36979	constant GL_SYSTEM_FONT_NAME_NV
#36980	constant GL_FILE_NAME_NV
#36981	constant GL_PATH_STROKE_WIDTH_NV
#36982	constant GL_PATH_END_CAPS_NV
#36983	constant GL_PATH_INITIAL_END_CAP_NV
#36984	constant GL_PATH_TERMINAL_END_CAP_NV
#36985	constant GL_PATH_JOIN_STYLE_NV
#36986	constant GL_PATH_MITER_LIMIT_NV
#36987	constant GL_PATH_DASH_CAPS_NV
#36988	constant GL_PATH_INITIAL_DASH_CAP_NV
#36989	constant GL_PATH_TERMINAL_DASH_CAP_NV
#36990	constant GL_PATH_DASH_OFFSET_NV
#36991	constant GL_PATH_CLIENT_LENGTH_NV
#36992	constant GL_PATH_FILL_MODE_NV
#36993	constant GL_PATH_FILL_MASK_NV
#36994	constant GL_PATH_FILL_COVER_MODE_NV
#36995	constant GL_PATH_STROKE_COVER_MODE_NV
#36996	constant GL_PATH_STROKE_MASK_NV
#37000	constant GL_COUNT_UP_NV
#37001	constant GL_COUNT_DOWN_NV
#37002	constant GL_PATH_OBJECT_BOUNDING_BOX_NV
#37003	constant GL_CONVEX_HULL_NV
#37005	constant GL_BOUNDING_BOX_NV
#37006	constant GL_TRANSLATE_X_NV
#37007	constant GL_TRANSLATE_Y_NV
#37008	constant GL_TRANSLATE_2D_NV
#37009	constant GL_TRANSLATE_3D_NV
#37010	constant GL_AFFINE_2D_NV
#37012	constant GL_AFFINE_3D_NV
#37014	constant GL_TRANSPOSE_AFFINE_2D_NV
#37016	constant GL_TRANSPOSE_AFFINE_3D_NV
#37018	constant GL_UTF8_NV
#37019	constant GL_UTF16_NV
#37020	constant GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
#37021	constant GL_PATH_COMMAND_COUNT_NV
#37022	constant GL_PATH_COORD_COUNT_NV
#37023	constant GL_PATH_DASH_ARRAY_COUNT_NV
#37024	constant GL_PATH_COMPUTED_LENGTH_NV
#37025	constant GL_PATH_FILL_BOUNDING_BOX_NV
#37026	constant GL_PATH_STROKE_BOUNDING_BOX_NV
#37027	constant GL_SQUARE_NV
#37028	constant GL_ROUND_NV
#37029	constant GL_TRIANGULAR_NV
#37030	constant GL_BEVEL_NV
#37031	constant GL_MITER_REVERT_NV
#37032	constant GL_MITER_TRUNCATE_NV
#37033	constant GL_SKIP_MISSING_GLYPH_NV
#37034	constant GL_USE_MISSING_GLYPH_NV
#37035	constant GL_PATH_ERROR_POSITION_NV
#37037	constant GL_ACCUM_ADJACENT_PAIRS_NV
#37038	constant GL_ADJACENT_PAIRS_NV
#37039	constant GL_FIRST_TO_REST_NV
#37040	constant GL_PATH_GEN_MODE_NV
#37041	constant GL_PATH_GEN_COEFF_NV
#37043	constant GL_PATH_GEN_COMPONENTS_NV
#37047	constant GL_PATH_STENCIL_FUNC_NV
#37048	constant GL_PATH_STENCIL_REF_NV
#37049	constant GL_PATH_STENCIL_VALUE_MASK_NV
#37053	constant GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
#37054	constant GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
#37055	constant GL_PATH_COVER_DEPTH_FUNC_NV
#37044	constant GL_PATH_DASH_OFFSET_RESET_NV
#37045	constant GL_MOVE_TO_RESETS_NV
#37046	constant GL_MOVE_TO_CONTINUES_NV
#0	constant GL_CLOSE_PATH_NV
#2	constant GL_MOVE_TO_NV
#3	constant GL_RELATIVE_MOVE_TO_NV
#4	constant GL_LINE_TO_NV
#5	constant GL_RELATIVE_LINE_TO_NV
#6	constant GL_HORIZONTAL_LINE_TO_NV
#7	constant GL_RELATIVE_HORIZONTAL_LINE_TO_NV
#8	constant GL_VERTICAL_LINE_TO_NV
#9	constant GL_RELATIVE_VERTICAL_LINE_TO_NV
#10	constant GL_QUADRATIC_CURVE_TO_NV
#11	constant GL_RELATIVE_QUADRATIC_CURVE_TO_NV
#12	constant GL_CUBIC_CURVE_TO_NV
#13	constant GL_RELATIVE_CUBIC_CURVE_TO_NV
#14	constant GL_SMOOTH_QUADRATIC_CURVE_TO_NV
#15	constant GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
#16	constant GL_SMOOTH_CUBIC_CURVE_TO_NV
#17	constant GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
#18	constant GL_SMALL_CCW_ARC_TO_NV
#19	constant GL_RELATIVE_SMALL_CCW_ARC_TO_NV
#20	constant GL_SMALL_CW_ARC_TO_NV
#21	constant GL_RELATIVE_SMALL_CW_ARC_TO_NV
#22	constant GL_LARGE_CCW_ARC_TO_NV
#23	constant GL_RELATIVE_LARGE_CCW_ARC_TO_NV
#24	constant GL_LARGE_CW_ARC_TO_NV
#25	constant GL_RELATIVE_LARGE_CW_ARC_TO_NV
#240	constant GL_RESTART_PATH_NV
#242	constant GL_DUP_FIRST_CUBIC_CURVE_TO_NV
#244	constant GL_DUP_LAST_CUBIC_CURVE_TO_NV
#246	constant GL_RECT_NV
#248	constant GL_CIRCULAR_CCW_ARC_TO_NV
#250	constant GL_CIRCULAR_CW_ARC_TO_NV
#252	constant GL_CIRCULAR_TANGENT_ARC_TO_NV
#254	constant GL_ARC_TO_NV
#255	constant GL_RELATIVE_ARC_TO_NV
#1	constant GL_BOLD_BIT_NV
#2	constant GL_ITALIC_BIT_NV
#1	constant GL_GLYPH_WIDTH_BIT_NV
#2	constant GL_GLYPH_HEIGHT_BIT_NV
#4	constant GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
#8	constant GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
#16	constant GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
#32	constant GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
#64	constant GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
#128	constant GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
#256	constant GL_GLYPH_HAS_KERNING_BIT_NV
#65536	constant GL_FONT_X_MIN_BOUNDS_BIT_NV
#131072	constant GL_FONT_Y_MIN_BOUNDS_BIT_NV
#262144	constant GL_FONT_X_MAX_BOUNDS_BIT_NV
#524288	constant GL_FONT_Y_MAX_BOUNDS_BIT_NV
#1048576	constant GL_FONT_UNITS_PER_EM_BIT_NV
#2097152	constant GL_FONT_ASCENDER_BIT_NV
#4194304	constant GL_FONT_DESCENDER_BIT_NV
#8388608	constant GL_FONT_HEIGHT_BIT_NV
#16777216	constant GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
#33554432	constant GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
#67108864	constant GL_FONT_UNDERLINE_POSITION_BIT_NV
#134217728	constant GL_FONT_UNDERLINE_THICKNESS_BIT_NV
#268435456	constant GL_FONT_HAS_KERNING_BIT_NV
#232	constant GL_ROUNDED_RECT_NV
#233	constant GL_RELATIVE_ROUNDED_RECT_NV
#234	constant GL_ROUNDED_RECT2_NV
#235	constant GL_RELATIVE_ROUNDED_RECT2_NV
#236	constant GL_ROUNDED_RECT4_NV
#237	constant GL_RELATIVE_ROUNDED_RECT4_NV
#238	constant GL_ROUNDED_RECT8_NV
#239	constant GL_RELATIVE_ROUNDED_RECT8_NV
#247	constant GL_RELATIVE_RECT_NV
#37736	constant GL_FONT_GLYPHS_AVAILABLE_NV
#37737	constant GL_FONT_TARGET_UNAVAILABLE_NV
#37738	constant GL_FONT_UNAVAILABLE_NV
#37739	constant GL_FONT_UNINTELLIGIBLE_NV
#26	constant GL_CONIC_CURVE_TO_NV
#27	constant GL_RELATIVE_CONIC_CURVE_TO_NV
#536870912	constant GL_FONT_NUM_GLYPH_INDICES_BIT_NV
#37740	constant GL_STANDARD_FONT_FORMAT_NV
#5127	constant GL_2_BYTES_NV
#5128	constant GL_3_BYTES_NV
#5129	constant GL_4_BYTES_NV
#9216	constant GL_EYE_LINEAR_NV
#9217	constant GL_OBJECT_LINEAR_NV
#34166	constant GL_CONSTANT_NV
#37036	constant GL_PATH_FOG_GEN_MODE_NV
#34092	constant GL_PRIMARY_COLOR_NV
#34093	constant GL_SECONDARY_COLOR_NV
#37042	constant GL_PATH_GEN_COLOR_FORMAT_NV
#5889	constant GL_PATH_PROJECTION_NV
#5888	constant GL_PATH_MODELVIEW_NV
#2979	constant GL_PATH_MODELVIEW_STACK_DEPTH_NV
#2982	constant GL_PATH_MODELVIEW_MATRIX_NV
#3382	constant GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV
#34019	constant GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV
#2980	constant GL_PATH_PROJECTION_STACK_DEPTH_NV
#2983	constant GL_PATH_PROJECTION_MATRIX_NV
#3384	constant GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV
#34020	constant GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV
#37741	constant GL_FRAGMENT_INPUT_NV
#1	constant GL_NV_path_rendering_shared_edge
#192	constant GL_SHARED_EDGE_NV
#1	constant GL_NV_pixel_data_range
#34936	constant GL_WRITE_PIXEL_DATA_RANGE_NV
#34937	constant GL_READ_PIXEL_DATA_RANGE_NV
#34938	constant GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
#34939	constant GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
#34940	constant GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
#34941	constant GL_READ_PIXEL_DATA_RANGE_POINTER_NV
#1	constant GL_NV_point_sprite
#34913	constant GL_POINT_SPRITE_NV
#34914	constant GL_COORD_REPLACE_NV
#34915	constant GL_POINT_SPRITE_R_MODE_NV
#1	constant GL_NV_present_video
#36390	constant GL_FRAME_NV
#36391	constant GL_FIELDS_NV
#36392	constant GL_CURRENT_TIME_NV
#36393	constant GL_NUM_FILL_STREAMS_NV
#36394	constant GL_PRESENT_TIME_NV
#36395	constant GL_PRESENT_DURATION_NV
#1	constant GL_NV_primitive_restart
#34136	constant GL_PRIMITIVE_RESTART_NV
#34137	constant GL_PRIMITIVE_RESTART_INDEX_NV
#1	constant GL_NV_query_resource
#38208	constant GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV
#38210	constant GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV
#38212	constant GL_QUERY_RESOURCE_SYS_RESERVED_NV
#38213	constant GL_QUERY_RESOURCE_TEXTURE_NV
#38214	constant GL_QUERY_RESOURCE_RENDERBUFFER_NV
#38215	constant GL_QUERY_RESOURCE_BUFFEROBJECT_NV
#1	constant GL_NV_query_resource_tag
#1	constant GL_NV_register_combiners
#34082	constant GL_REGISTER_COMBINERS_NV
#34083	constant GL_VARIABLE_A_NV
#34084	constant GL_VARIABLE_B_NV
#34085	constant GL_VARIABLE_C_NV
#34086	constant GL_VARIABLE_D_NV
#34087	constant GL_VARIABLE_E_NV
#34088	constant GL_VARIABLE_F_NV
#34089	constant GL_VARIABLE_G_NV
#34090	constant GL_CONSTANT_COLOR0_NV
#34091	constant GL_CONSTANT_COLOR1_NV
#34094	constant GL_SPARE0_NV
#34095	constant GL_SPARE1_NV
#34096	constant GL_DISCARD_NV
#34097	constant GL_E_TIMES_F_NV
#34098	constant GL_SPARE0_PLUS_SECONDARY_COLOR_NV
#34102	constant GL_UNSIGNED_IDENTITY_NV
#34103	constant GL_UNSIGNED_INVERT_NV
#34104	constant GL_EXPAND_NORMAL_NV
#34105	constant GL_EXPAND_NEGATE_NV
#34106	constant GL_HALF_BIAS_NORMAL_NV
#34107	constant GL_HALF_BIAS_NEGATE_NV
#34108	constant GL_SIGNED_IDENTITY_NV
#34109	constant GL_SIGNED_NEGATE_NV
#34110	constant GL_SCALE_BY_TWO_NV
#34111	constant GL_SCALE_BY_FOUR_NV
#34112	constant GL_SCALE_BY_ONE_HALF_NV
#34113	constant GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
#34114	constant GL_COMBINER_INPUT_NV
#34115	constant GL_COMBINER_MAPPING_NV
#34116	constant GL_COMBINER_COMPONENT_USAGE_NV
#34117	constant GL_COMBINER_AB_DOT_PRODUCT_NV
#34118	constant GL_COMBINER_CD_DOT_PRODUCT_NV
#34119	constant GL_COMBINER_MUX_SUM_NV
#34120	constant GL_COMBINER_SCALE_NV
#34121	constant GL_COMBINER_BIAS_NV
#34122	constant GL_COMBINER_AB_OUTPUT_NV
#34123	constant GL_COMBINER_CD_OUTPUT_NV
#34124	constant GL_COMBINER_SUM_OUTPUT_NV
#34125	constant GL_MAX_GENERAL_COMBINERS_NV
#34126	constant GL_NUM_GENERAL_COMBINERS_NV
#34127	constant GL_COLOR_SUM_CLAMP_NV
#34128	constant GL_COMBINER0_NV
#34129	constant GL_COMBINER1_NV
#34130	constant GL_COMBINER2_NV
#34131	constant GL_COMBINER3_NV
#34132	constant GL_COMBINER4_NV
#34133	constant GL_COMBINER5_NV
#34134	constant GL_COMBINER6_NV
#34135	constant GL_COMBINER7_NV
#1	constant GL_NV_register_combiners2
#34101	constant GL_PER_STAGE_CONSTANTS_NV
#1	constant GL_NV_robustness_video_memory_purge
#37563	constant GL_PURGED_CONTEXT_RESET_NV
#1	constant GL_NV_sample_locations
#37693	constant GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV
#37694	constant GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
#37695	constant GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
#37696	constant GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
#36432	constant GL_SAMPLE_LOCATION_NV
#37697	constant GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
#37698	constant GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
#37699	constant GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV
#1	constant GL_NV_sample_mask_override_coverage
#1	constant GL_NV_shader_atomic_counters
#1	constant GL_NV_shader_atomic_float
#1	constant GL_NV_shader_atomic_float64
#1	constant GL_NV_shader_atomic_fp16_vector
#1	constant GL_NV_shader_atomic_int64
#1	constant GL_NV_shader_buffer_load
#36637	constant GL_BUFFER_GPU_ADDRESS_NV
#36660	constant GL_GPU_ADDRESS_NV
#36661	constant GL_MAX_SHADER_BUFFER_ADDRESS_NV
#1	constant GL_NV_shader_buffer_store
#16	constant GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
#1	constant GL_NV_shader_storage_buffer_object
#1	constant GL_NV_shader_thread_group
#37689	constant GL_WARP_SIZE_NV
#37690	constant GL_WARPS_PER_SM_NV
#37691	constant GL_SM_COUNT_NV
#1	constant GL_NV_shader_thread_shuffle
#1	constant GL_NV_stereo_view_rendering
#1	constant GL_NV_tessellation_program5
#34520	constant GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
#35102	constant GL_TESS_CONTROL_PROGRAM_NV
#35103	constant GL_TESS_EVALUATION_PROGRAM_NV
#35956	constant GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
#35957	constant GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
#1	constant GL_NV_texgen_emboss
#34141	constant GL_EMBOSS_LIGHT_NV
#34142	constant GL_EMBOSS_CONSTANT_NV
#34143	constant GL_EMBOSS_MAP_NV
#1	constant GL_NV_texgen_reflection
#34065	constant GL_NORMAL_MAP_NV
#34066	constant GL_REFLECTION_MAP_NV
#1	constant GL_NV_texture_barrier
#1	constant GL_NV_texture_compression_vtc
#1	constant GL_NV_texture_env_combine4
#34051	constant GL_COMBINE4_NV
#34179	constant GL_SOURCE3_RGB_NV
#34187	constant GL_SOURCE3_ALPHA_NV
#34195	constant GL_OPERAND3_RGB_NV
#34203	constant GL_OPERAND3_ALPHA_NV
#1	constant GL_NV_texture_expand_normal
#34959	constant GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
#1	constant GL_NV_texture_multisample
#36933	constant GL_TEXTURE_COVERAGE_SAMPLES_NV
#36934	constant GL_TEXTURE_COLOR_SAMPLES_NV
#1	constant GL_NV_texture_rectangle
#34037	constant GL_TEXTURE_RECTANGLE_NV
#34038	constant GL_TEXTURE_BINDING_RECTANGLE_NV
#34039	constant GL_PROXY_TEXTURE_RECTANGLE_NV
#34040	constant GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
#1	constant GL_NV_texture_rectangle_compressed
#1	constant GL_NV_texture_shader
#34380	constant GL_OFFSET_TEXTURE_RECTANGLE_NV
#34381	constant GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
#34382	constant GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
#34521	constant GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
#34522	constant GL_UNSIGNED_INT_S8_S8_8_8_NV
#34523	constant GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
#34524	constant GL_DSDT_MAG_INTENSITY_NV
#34525	constant GL_SHADER_CONSISTENT_NV
#34526	constant GL_TEXTURE_SHADER_NV
#34527	constant GL_SHADER_OPERATION_NV
#34528	constant GL_CULL_MODES_NV
#34529	constant GL_OFFSET_TEXTURE_MATRIX_NV
#34530	constant GL_OFFSET_TEXTURE_SCALE_NV
#34531	constant GL_OFFSET_TEXTURE_BIAS_NV
#34529	constant GL_OFFSET_TEXTURE_2D_MATRIX_NV
#34530	constant GL_OFFSET_TEXTURE_2D_SCALE_NV
#34531	constant GL_OFFSET_TEXTURE_2D_BIAS_NV
#34532	constant GL_PREVIOUS_TEXTURE_INPUT_NV
#34533	constant GL_CONST_EYE_NV
#34534	constant GL_PASS_THROUGH_NV
#34535	constant GL_CULL_FRAGMENT_NV
#34536	constant GL_OFFSET_TEXTURE_2D_NV
#34537	constant GL_DEPENDENT_AR_TEXTURE_2D_NV
#34538	constant GL_DEPENDENT_GB_TEXTURE_2D_NV
#34540	constant GL_DOT_PRODUCT_NV
#34541	constant GL_DOT_PRODUCT_DEPTH_REPLACE_NV
#34542	constant GL_DOT_PRODUCT_TEXTURE_2D_NV
#34544	constant GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
#34545	constant GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
#34546	constant GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
#34547	constant GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
#34548	constant GL_HILO_NV
#34549	constant GL_DSDT_NV
#34550	constant GL_DSDT_MAG_NV
#34551	constant GL_DSDT_MAG_VIB_NV
#34552	constant GL_HILO16_NV
#34553	constant GL_SIGNED_HILO_NV
#34554	constant GL_SIGNED_HILO16_NV
#34555	constant GL_SIGNED_RGBA_NV
#34556	constant GL_SIGNED_RGBA8_NV
#34558	constant GL_SIGNED_RGB_NV
#34559	constant GL_SIGNED_RGB8_NV
#34561	constant GL_SIGNED_LUMINANCE_NV
#34562	constant GL_SIGNED_LUMINANCE8_NV
#34563	constant GL_SIGNED_LUMINANCE_ALPHA_NV
#34564	constant GL_SIGNED_LUMINANCE8_ALPHA8_NV
#34565	constant GL_SIGNED_ALPHA_NV
#34566	constant GL_SIGNED_ALPHA8_NV
#34567	constant GL_SIGNED_INTENSITY_NV
#34568	constant GL_SIGNED_INTENSITY8_NV
#34569	constant GL_DSDT8_NV
#34570	constant GL_DSDT8_MAG8_NV
#34571	constant GL_DSDT8_MAG8_INTENSITY8_NV
#34572	constant GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
#34573	constant GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
#34574	constant GL_HI_SCALE_NV
#34575	constant GL_LO_SCALE_NV
#34576	constant GL_DS_SCALE_NV
#34577	constant GL_DT_SCALE_NV
#34578	constant GL_MAGNITUDE_SCALE_NV
#34579	constant GL_VIBRANCE_SCALE_NV
#34580	constant GL_HI_BIAS_NV
#34581	constant GL_LO_BIAS_NV
#34582	constant GL_DS_BIAS_NV
#34583	constant GL_DT_BIAS_NV
#34584	constant GL_MAGNITUDE_BIAS_NV
#34585	constant GL_VIBRANCE_BIAS_NV
#34586	constant GL_TEXTURE_BORDER_VALUES_NV
#34587	constant GL_TEXTURE_HI_SIZE_NV
#34588	constant GL_TEXTURE_LO_SIZE_NV
#34589	constant GL_TEXTURE_DS_SIZE_NV
#34590	constant GL_TEXTURE_DT_SIZE_NV
#34591	constant GL_TEXTURE_MAG_SIZE_NV
#1	constant GL_NV_texture_shader2
#34543	constant GL_DOT_PRODUCT_TEXTURE_3D_NV
#1	constant GL_NV_texture_shader3
#34896	constant GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
#34897	constant GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
#34898	constant GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
#34899	constant GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
#34900	constant GL_OFFSET_HILO_TEXTURE_2D_NV
#34901	constant GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
#34902	constant GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
#34903	constant GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
#34904	constant GL_DEPENDENT_HILO_TEXTURE_2D_NV
#34905	constant GL_DEPENDENT_RGB_TEXTURE_3D_NV
#34906	constant GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
#34907	constant GL_DOT_PRODUCT_PASS_THROUGH_NV
#34908	constant GL_DOT_PRODUCT_TEXTURE_1D_NV
#34909	constant GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
#34910	constant GL_HILO8_NV
#34911	constant GL_SIGNED_HILO8_NV
#34912	constant GL_FORCE_BLUE_TO_ONE_NV
#1	constant GL_NV_transform_feedback
#35959	constant GL_BACK_PRIMARY_COLOR_NV
#35960	constant GL_BACK_SECONDARY_COLOR_NV
#35961	constant GL_TEXTURE_COORD_NV
#35962	constant GL_CLIP_DISTANCE_NV
#35963	constant GL_VERTEX_ID_NV
#35964	constant GL_PRIMITIVE_ID_NV
#35965	constant GL_GENERIC_ATTRIB_NV
#35966	constant GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
#35967	constant GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
#35968	constant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
#35969	constant GL_ACTIVE_VARYINGS_NV
#35970	constant GL_ACTIVE_VARYING_MAX_LENGTH_NV
#35971	constant GL_TRANSFORM_FEEDBACK_VARYINGS_NV
#35972	constant GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
#35973	constant GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
#35974	constant GL_TRANSFORM_FEEDBACK_RECORD_NV
#35975	constant GL_PRIMITIVES_GENERATED_NV
#35976	constant GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
#35977	constant GL_RASTERIZER_DISCARD_NV
#35978	constant GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
#35979	constant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
#35980	constant GL_INTERLEAVED_ATTRIBS_NV
#35981	constant GL_SEPARATE_ATTRIBS_NV
#35982	constant GL_TRANSFORM_FEEDBACK_BUFFER_NV
#35983	constant GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
#36266	constant GL_LAYER_NV
#-2	constant GL_NEXT_BUFFER_NV
#-3	constant GL_SKIP_COMPONENTS4_NV
#-4	constant GL_SKIP_COMPONENTS3_NV
#-5	constant GL_SKIP_COMPONENTS2_NV
#-6	constant GL_SKIP_COMPONENTS1_NV
#1	constant GL_NV_transform_feedback2
#36386	constant GL_TRANSFORM_FEEDBACK_NV
#36387	constant GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
#36388	constant GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
#36389	constant GL_TRANSFORM_FEEDBACK_BINDING_NV
#1	constant GL_NV_uniform_buffer_unified_memory
#37742	constant GL_UNIFORM_BUFFER_UNIFIED_NV
#37743	constant GL_UNIFORM_BUFFER_ADDRESS_NV
#37744	constant GL_UNIFORM_BUFFER_LENGTH_NV
#1	constant GL_NV_vdpau_interop
#34539	constant GL_SURFACE_STATE_NV
#34557	constant GL_SURFACE_REGISTERED_NV
#34560	constant GL_SURFACE_MAPPED_NV
#35006	constant GL_WRITE_DISCARD_NV
#1	constant GL_NV_vertex_array_range
#34077	constant GL_VERTEX_ARRAY_RANGE_NV
#34078	constant GL_VERTEX_ARRAY_RANGE_LENGTH_NV
#34079	constant GL_VERTEX_ARRAY_RANGE_VALID_NV
#34080	constant GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
#34081	constant GL_VERTEX_ARRAY_RANGE_POINTER_NV
#1	constant GL_NV_vertex_array_range2
#34099	constant GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
#1	constant GL_NV_vertex_attrib_integer_64bit
#1	constant GL_NV_vertex_buffer_unified_memory
#36638	constant GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
#36639	constant GL_ELEMENT_ARRAY_UNIFIED_NV
#36640	constant GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
#36641	constant GL_VERTEX_ARRAY_ADDRESS_NV
#36642	constant GL_NORMAL_ARRAY_ADDRESS_NV
#36643	constant GL_COLOR_ARRAY_ADDRESS_NV
#36644	constant GL_INDEX_ARRAY_ADDRESS_NV
#36645	constant GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
#36646	constant GL_EDGE_FLAG_ARRAY_ADDRESS_NV
#36647	constant GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
#36648	constant GL_FOG_COORD_ARRAY_ADDRESS_NV
#36649	constant GL_ELEMENT_ARRAY_ADDRESS_NV
#36650	constant GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
#36651	constant GL_VERTEX_ARRAY_LENGTH_NV
#36652	constant GL_NORMAL_ARRAY_LENGTH_NV
#36653	constant GL_COLOR_ARRAY_LENGTH_NV
#36654	constant GL_INDEX_ARRAY_LENGTH_NV
#36655	constant GL_TEXTURE_COORD_ARRAY_LENGTH_NV
#36656	constant GL_EDGE_FLAG_ARRAY_LENGTH_NV
#36657	constant GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
#36658	constant GL_FOG_COORD_ARRAY_LENGTH_NV
#36659	constant GL_ELEMENT_ARRAY_LENGTH_NV
#36672	constant GL_DRAW_INDIRECT_UNIFIED_NV
#36673	constant GL_DRAW_INDIRECT_ADDRESS_NV
#36674	constant GL_DRAW_INDIRECT_LENGTH_NV
#1	constant GL_NV_vertex_program
#34336	constant GL_VERTEX_PROGRAM_NV
#34337	constant GL_VERTEX_STATE_PROGRAM_NV
#34339	constant GL_ATTRIB_ARRAY_SIZE_NV
#34340	constant GL_ATTRIB_ARRAY_STRIDE_NV
#34341	constant GL_ATTRIB_ARRAY_TYPE_NV
#34342	constant GL_CURRENT_ATTRIB_NV
#34343	constant GL_PROGRAM_LENGTH_NV
#34344	constant GL_PROGRAM_STRING_NV
#34345	constant GL_MODELVIEW_PROJECTION_NV
#34346	constant GL_IDENTITY_NV
#34347	constant GL_INVERSE_NV
#34348	constant GL_TRANSPOSE_NV
#34349	constant GL_INVERSE_TRANSPOSE_NV
#34350	constant GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
#34351	constant GL_MAX_TRACK_MATRICES_NV
#34352	constant GL_MATRIX0_NV
#34353	constant GL_MATRIX1_NV
#34354	constant GL_MATRIX2_NV
#34355	constant GL_MATRIX3_NV
#34356	constant GL_MATRIX4_NV
#34357	constant GL_MATRIX5_NV
#34358	constant GL_MATRIX6_NV
#34359	constant GL_MATRIX7_NV
#34368	constant GL_CURRENT_MATRIX_STACK_DEPTH_NV
#34369	constant GL_CURRENT_MATRIX_NV
#34370	constant GL_VERTEX_PROGRAM_POINT_SIZE_NV
#34371	constant GL_VERTEX_PROGRAM_TWO_SIDE_NV
#34372	constant GL_PROGRAM_PARAMETER_NV
#34373	constant GL_ATTRIB_ARRAY_POINTER_NV
#34374	constant GL_PROGRAM_TARGET_NV
#34375	constant GL_PROGRAM_RESIDENT_NV
#34376	constant GL_TRACK_MATRIX_NV
#34377	constant GL_TRACK_MATRIX_TRANSFORM_NV
#34378	constant GL_VERTEX_PROGRAM_BINDING_NV
#34379	constant GL_PROGRAM_ERROR_POSITION_NV
#34384	constant GL_VERTEX_ATTRIB_ARRAY0_NV
#34385	constant GL_VERTEX_ATTRIB_ARRAY1_NV
#34386	constant GL_VERTEX_ATTRIB_ARRAY2_NV
#34387	constant GL_VERTEX_ATTRIB_ARRAY3_NV
#34388	constant GL_VERTEX_ATTRIB_ARRAY4_NV
#34389	constant GL_VERTEX_ATTRIB_ARRAY5_NV
#34390	constant GL_VERTEX_ATTRIB_ARRAY6_NV
#34391	constant GL_VERTEX_ATTRIB_ARRAY7_NV
#34392	constant GL_VERTEX_ATTRIB_ARRAY8_NV
#34393	constant GL_VERTEX_ATTRIB_ARRAY9_NV
#34394	constant GL_VERTEX_ATTRIB_ARRAY10_NV
#34395	constant GL_VERTEX_ATTRIB_ARRAY11_NV
#34396	constant GL_VERTEX_ATTRIB_ARRAY12_NV
#34397	constant GL_VERTEX_ATTRIB_ARRAY13_NV
#34398	constant GL_VERTEX_ATTRIB_ARRAY14_NV
#34399	constant GL_VERTEX_ATTRIB_ARRAY15_NV
#34400	constant GL_MAP1_VERTEX_ATTRIB0_4_NV
#34401	constant GL_MAP1_VERTEX_ATTRIB1_4_NV
#34402	constant GL_MAP1_VERTEX_ATTRIB2_4_NV
#34403	constant GL_MAP1_VERTEX_ATTRIB3_4_NV
#34404	constant GL_MAP1_VERTEX_ATTRIB4_4_NV
#34405	constant GL_MAP1_VERTEX_ATTRIB5_4_NV
#34406	constant GL_MAP1_VERTEX_ATTRIB6_4_NV
#34407	constant GL_MAP1_VERTEX_ATTRIB7_4_NV
#34408	constant GL_MAP1_VERTEX_ATTRIB8_4_NV
#34409	constant GL_MAP1_VERTEX_ATTRIB9_4_NV
#34410	constant GL_MAP1_VERTEX_ATTRIB10_4_NV
#34411	constant GL_MAP1_VERTEX_ATTRIB11_4_NV
#34412	constant GL_MAP1_VERTEX_ATTRIB12_4_NV
#34413	constant GL_MAP1_VERTEX_ATTRIB13_4_NV
#34414	constant GL_MAP1_VERTEX_ATTRIB14_4_NV
#34415	constant GL_MAP1_VERTEX_ATTRIB15_4_NV
#34416	constant GL_MAP2_VERTEX_ATTRIB0_4_NV
#34417	constant GL_MAP2_VERTEX_ATTRIB1_4_NV
#34418	constant GL_MAP2_VERTEX_ATTRIB2_4_NV
#34419	constant GL_MAP2_VERTEX_ATTRIB3_4_NV
#34420	constant GL_MAP2_VERTEX_ATTRIB4_4_NV
#34421	constant GL_MAP2_VERTEX_ATTRIB5_4_NV
#34422	constant GL_MAP2_VERTEX_ATTRIB6_4_NV
#34423	constant GL_MAP2_VERTEX_ATTRIB7_4_NV
#34424	constant GL_MAP2_VERTEX_ATTRIB8_4_NV
#34425	constant GL_MAP2_VERTEX_ATTRIB9_4_NV
#34426	constant GL_MAP2_VERTEX_ATTRIB10_4_NV
#34427	constant GL_MAP2_VERTEX_ATTRIB11_4_NV
#34428	constant GL_MAP2_VERTEX_ATTRIB12_4_NV
#34429	constant GL_MAP2_VERTEX_ATTRIB13_4_NV
#34430	constant GL_MAP2_VERTEX_ATTRIB14_4_NV
#34431	constant GL_MAP2_VERTEX_ATTRIB15_4_NV
#1	constant GL_NV_vertex_program1_1
#1	constant GL_NV_vertex_program2
#1	constant GL_NV_vertex_program2_option
#1	constant GL_NV_vertex_program3
#1	constant GL_NV_vertex_program4
#35069	constant GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
#1	constant GL_NV_video_capture
#36896	constant GL_VIDEO_BUFFER_NV
#36897	constant GL_VIDEO_BUFFER_BINDING_NV
#36898	constant GL_FIELD_UPPER_NV
#36899	constant GL_FIELD_LOWER_NV
#36900	constant GL_NUM_VIDEO_CAPTURE_STREAMS_NV
#36901	constant GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
#36902	constant GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
#36903	constant GL_LAST_VIDEO_CAPTURE_STATUS_NV
#36904	constant GL_VIDEO_BUFFER_PITCH_NV
#36905	constant GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
#36906	constant GL_VIDEO_COLOR_CONVERSION_MAX_NV
#36907	constant GL_VIDEO_COLOR_CONVERSION_MIN_NV
#36908	constant GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
#36909	constant GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
#36910	constant GL_PARTIAL_SUCCESS_NV
#36911	constant GL_SUCCESS_NV
#36912	constant GL_FAILURE_NV
#36913	constant GL_YCBYCR8_422_NV
#36914	constant GL_YCBAYCR8A_4224_NV
#36915	constant GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
#36916	constant GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
#36917	constant GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
#36918	constant GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
#36919	constant GL_Z4Y12Z4CB12Z4CR12_444_NV
#36920	constant GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
#36921	constant GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
#36922	constant GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
#36923	constant GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
#36924	constant GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
#1	constant GL_NV_viewport_array2
#1	constant GL_NV_viewport_swizzle
#37712	constant GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV
#37713	constant GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV
#37714	constant GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV
#37715	constant GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV
#37716	constant GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV
#37717	constant GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV
#37718	constant GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV
#37719	constant GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV
#37720	constant GL_VIEWPORT_SWIZZLE_X_NV
#37721	constant GL_VIEWPORT_SWIZZLE_Y_NV
#37722	constant GL_VIEWPORT_SWIZZLE_Z_NV
#37723	constant GL_VIEWPORT_SWIZZLE_W_NV
#1	constant GL_OML_interlace
#35200	constant GL_INTERLACE_OML
#35201	constant GL_INTERLACE_READ_OML
#1	constant GL_OML_resample
#35204	constant GL_PACK_RESAMPLE_OML
#35205	constant GL_UNPACK_RESAMPLE_OML
#35206	constant GL_RESAMPLE_REPLICATE_OML
#35207	constant GL_RESAMPLE_ZERO_FILL_OML
#35208	constant GL_RESAMPLE_AVERAGE_OML
#35209	constant GL_RESAMPLE_DECIMATE_OML
#1	constant GL_OML_subsample
#35202	constant GL_FORMAT_SUBSAMPLE_24_24_OML
#35203	constant GL_FORMAT_SUBSAMPLE_244_244_OML
#1	constant GL_OVR_multiview
#38448	constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
#38450	constant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
#38449	constant GL_MAX_VIEWS_OVR
#38451	constant GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR
#1	constant GL_OVR_multiview2
#1	constant GL_PGI_misc_hints
#107000	constant GL_PREFER_DOUBLEBUFFER_HINT_PGI
#107005	constant GL_CONSERVE_MEMORY_HINT_PGI
#107006	constant GL_RECLAIM_MEMORY_HINT_PGI
#107010	constant GL_NATIVE_GRAPHICS_HANDLE_PGI
#107011	constant GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
#107012	constant GL_NATIVE_GRAPHICS_END_HINT_PGI
#107020	constant GL_ALWAYS_FAST_HINT_PGI
#107021	constant GL_ALWAYS_SOFT_HINT_PGI
#107022	constant GL_ALLOW_DRAW_OBJ_HINT_PGI
#107023	constant GL_ALLOW_DRAW_WIN_HINT_PGI
#107024	constant GL_ALLOW_DRAW_FRG_HINT_PGI
#107025	constant GL_ALLOW_DRAW_MEM_HINT_PGI
#107030	constant GL_STRICT_DEPTHFUNC_HINT_PGI
#107031	constant GL_STRICT_LIGHTING_HINT_PGI
#107032	constant GL_STRICT_SCISSOR_HINT_PGI
#107033	constant GL_FULL_STIPPLE_HINT_PGI
#107040	constant GL_CLIP_NEAR_HINT_PGI
#107041	constant GL_CLIP_FAR_HINT_PGI
#107042	constant GL_WIDE_LINE_HINT_PGI
#107043	constant GL_BACK_NORMALS_HINT_PGI
#1	constant GL_PGI_vertex_hints
#107050	constant GL_VERTEX_DATA_HINT_PGI
#107051	constant GL_VERTEX_CONSISTENT_HINT_PGI
#107052	constant GL_MATERIAL_SIDE_HINT_PGI
#107053	constant GL_MAX_VERTEX_HINT_PGI
#65536	constant GL_COLOR3_BIT_PGI
#131072	constant GL_COLOR4_BIT_PGI
#262144	constant GL_EDGEFLAG_BIT_PGI
#524288	constant GL_INDEX_BIT_PGI
#1048576	constant GL_MAT_AMBIENT_BIT_PGI
#2097152	constant GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
#4194304	constant GL_MAT_DIFFUSE_BIT_PGI
#8388608	constant GL_MAT_EMISSION_BIT_PGI
#16777216	constant GL_MAT_COLOR_INDEXES_BIT_PGI
#33554432	constant GL_MAT_SHININESS_BIT_PGI
#67108864	constant GL_MAT_SPECULAR_BIT_PGI
#134217728	constant GL_NORMAL_BIT_PGI
#268435456	constant GL_TEXCOORD1_BIT_PGI
#536870912	constant GL_TEXCOORD2_BIT_PGI
#1073741824	constant GL_TEXCOORD3_BIT_PGI
#2147483648	constant GL_TEXCOORD4_BIT_PGI
#4	constant GL_VERTEX23_BIT_PGI
#8	constant GL_VERTEX4_BIT_PGI
#1	constant GL_REND_screen_coordinates
#33936	constant GL_SCREEN_COORDINATES_REND
#33937	constant GL_INVERTED_SCREEN_W_REND
#1	constant GL_S3_s3tc
#33696	constant GL_RGB_S3TC
#33697	constant GL_RGB4_S3TC
#33698	constant GL_RGBA_S3TC
#33699	constant GL_RGBA4_S3TC
#33700	constant GL_RGBA_DXT5_S3TC
#33701	constant GL_RGBA4_DXT5_S3TC
#1	constant GL_SGIS_detail_texture
#32917	constant GL_DETAIL_TEXTURE_2D_SGIS
#32918	constant GL_DETAIL_TEXTURE_2D_BINDING_SGIS
#32919	constant GL_LINEAR_DETAIL_SGIS
#32920	constant GL_LINEAR_DETAIL_ALPHA_SGIS
#32921	constant GL_LINEAR_DETAIL_COLOR_SGIS
#32922	constant GL_DETAIL_TEXTURE_LEVEL_SGIS
#32923	constant GL_DETAIL_TEXTURE_MODE_SGIS
#32924	constant GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
#1	constant GL_SGIS_fog_function
#33066	constant GL_FOG_FUNC_SGIS
#33067	constant GL_FOG_FUNC_POINTS_SGIS
#33068	constant GL_MAX_FOG_FUNC_POINTS_SGIS
#1	constant GL_SGIS_generate_mipmap
#33169	constant GL_GENERATE_MIPMAP_SGIS
#33170	constant GL_GENERATE_MIPMAP_HINT_SGIS
#1	constant GL_SGIS_multisample
#32925	constant GL_MULTISAMPLE_SGIS
#32926	constant GL_SAMPLE_ALPHA_TO_MASK_SGIS
#32927	constant GL_SAMPLE_ALPHA_TO_ONE_SGIS
#32928	constant GL_SAMPLE_MASK_SGIS
#32929	constant GL_1PASS_SGIS
#32930	constant GL_2PASS_0_SGIS
#32931	constant GL_2PASS_1_SGIS
#32932	constant GL_4PASS_0_SGIS
#32933	constant GL_4PASS_1_SGIS
#32934	constant GL_4PASS_2_SGIS
#32935	constant GL_4PASS_3_SGIS
#32936	constant GL_SAMPLE_BUFFERS_SGIS
#32937	constant GL_SAMPLES_SGIS
#32938	constant GL_SAMPLE_MASK_VALUE_SGIS
#32939	constant GL_SAMPLE_MASK_INVERT_SGIS
#32940	constant GL_SAMPLE_PATTERN_SGIS
#1	constant GL_SGIS_pixel_texture
#33619	constant GL_PIXEL_TEXTURE_SGIS
#33620	constant GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
#33621	constant GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
#33622	constant GL_PIXEL_GROUP_COLOR_SGIS
#1	constant GL_SGIS_point_line_texgen
#33264	constant GL_EYE_DISTANCE_TO_POINT_SGIS
#33265	constant GL_OBJECT_DISTANCE_TO_POINT_SGIS
#33266	constant GL_EYE_DISTANCE_TO_LINE_SGIS
#33267	constant GL_OBJECT_DISTANCE_TO_LINE_SGIS
#33268	constant GL_EYE_POINT_SGIS
#33269	constant GL_OBJECT_POINT_SGIS
#33270	constant GL_EYE_LINE_SGIS
#33271	constant GL_OBJECT_LINE_SGIS
#1	constant GL_SGIS_point_parameters
#33062	constant GL_POINT_SIZE_MIN_SGIS
#33063	constant GL_POINT_SIZE_MAX_SGIS
#33064	constant GL_POINT_FADE_THRESHOLD_SIZE_SGIS
#33065	constant GL_DISTANCE_ATTENUATION_SGIS
#1	constant GL_SGIS_sharpen_texture
#32941	constant GL_LINEAR_SHARPEN_SGIS
#32942	constant GL_LINEAR_SHARPEN_ALPHA_SGIS
#32943	constant GL_LINEAR_SHARPEN_COLOR_SGIS
#32944	constant GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
#1	constant GL_SGIS_texture4D
#33072	constant GL_PACK_SKIP_VOLUMES_SGIS
#33073	constant GL_PACK_IMAGE_DEPTH_SGIS
#33074	constant GL_UNPACK_SKIP_VOLUMES_SGIS
#33075	constant GL_UNPACK_IMAGE_DEPTH_SGIS
#33076	constant GL_TEXTURE_4D_SGIS
#33077	constant GL_PROXY_TEXTURE_4D_SGIS
#33078	constant GL_TEXTURE_4DSIZE_SGIS
#33079	constant GL_TEXTURE_WRAP_Q_SGIS
#33080	constant GL_MAX_4D_TEXTURE_SIZE_SGIS
#33103	constant GL_TEXTURE_4D_BINDING_SGIS
#1	constant GL_SGIS_texture_border_clamp
#33069	constant GL_CLAMP_TO_BORDER_SGIS
#1	constant GL_SGIS_texture_color_mask
#33263	constant GL_TEXTURE_COLOR_WRITEMASK_SGIS
#1	constant GL_SGIS_texture_edge_clamp
#33071	constant GL_CLAMP_TO_EDGE_SGIS
#1	constant GL_SGIS_texture_filter4
#33094	constant GL_FILTER4_SGIS
#33095	constant GL_TEXTURE_FILTER4_SIZE_SGIS
#1	constant GL_SGIS_texture_lod
#33082	constant GL_TEXTURE_MIN_LOD_SGIS
#33083	constant GL_TEXTURE_MAX_LOD_SGIS
#33084	constant GL_TEXTURE_BASE_LEVEL_SGIS
#33085	constant GL_TEXTURE_MAX_LEVEL_SGIS
#1	constant GL_SGIS_texture_select
#33040	constant GL_DUAL_ALPHA4_SGIS
#33041	constant GL_DUAL_ALPHA8_SGIS
#33042	constant GL_DUAL_ALPHA12_SGIS
#33043	constant GL_DUAL_ALPHA16_SGIS
#33044	constant GL_DUAL_LUMINANCE4_SGIS
#33045	constant GL_DUAL_LUMINANCE8_SGIS
#33046	constant GL_DUAL_LUMINANCE12_SGIS
#33047	constant GL_DUAL_LUMINANCE16_SGIS
#33048	constant GL_DUAL_INTENSITY4_SGIS
#33049	constant GL_DUAL_INTENSITY8_SGIS
#33050	constant GL_DUAL_INTENSITY12_SGIS
#33051	constant GL_DUAL_INTENSITY16_SGIS
#33052	constant GL_DUAL_LUMINANCE_ALPHA4_SGIS
#33053	constant GL_DUAL_LUMINANCE_ALPHA8_SGIS
#33054	constant GL_QUAD_ALPHA4_SGIS
#33055	constant GL_QUAD_ALPHA8_SGIS
#33056	constant GL_QUAD_LUMINANCE4_SGIS
#33057	constant GL_QUAD_LUMINANCE8_SGIS
#33058	constant GL_QUAD_INTENSITY4_SGIS
#33059	constant GL_QUAD_INTENSITY8_SGIS
#33060	constant GL_DUAL_TEXTURE_SELECT_SGIS
#33061	constant GL_QUAD_TEXTURE_SELECT_SGIS
#1	constant GL_SGIX_async
#33577	constant GL_ASYNC_MARKER_SGIX
#1	constant GL_SGIX_async_histogram
#33580	constant GL_ASYNC_HISTOGRAM_SGIX
#33581	constant GL_MAX_ASYNC_HISTOGRAM_SGIX
#1	constant GL_SGIX_async_pixel
#33628	constant GL_ASYNC_TEX_IMAGE_SGIX
#33629	constant GL_ASYNC_DRAW_PIXELS_SGIX
#33630	constant GL_ASYNC_READ_PIXELS_SGIX
#33631	constant GL_MAX_ASYNC_TEX_IMAGE_SGIX
#33632	constant GL_MAX_ASYNC_DRAW_PIXELS_SGIX
#33633	constant GL_MAX_ASYNC_READ_PIXELS_SGIX
#1	constant GL_SGIX_blend_alpha_minmax
#33568	constant GL_ALPHA_MIN_SGIX
#33569	constant GL_ALPHA_MAX_SGIX
#1	constant GL_SGIX_calligraphic_fragment
#33155	constant GL_CALLIGRAPHIC_FRAGMENT_SGIX
#1	constant GL_SGIX_clipmap
#33136	constant GL_LINEAR_CLIPMAP_LINEAR_SGIX
#33137	constant GL_TEXTURE_CLIPMAP_CENTER_SGIX
#33138	constant GL_TEXTURE_CLIPMAP_FRAME_SGIX
#33139	constant GL_TEXTURE_CLIPMAP_OFFSET_SGIX
#33140	constant GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
#33141	constant GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
#33142	constant GL_TEXTURE_CLIPMAP_DEPTH_SGIX
#33143	constant GL_MAX_CLIPMAP_DEPTH_SGIX
#33144	constant GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
#33869	constant GL_NEAREST_CLIPMAP_NEAREST_SGIX
#33870	constant GL_NEAREST_CLIPMAP_LINEAR_SGIX
#33871	constant GL_LINEAR_CLIPMAP_NEAREST_SGIX
#1	constant GL_SGIX_convolution_accuracy
#33558	constant GL_CONVOLUTION_HINT_SGIX
#1	constant GL_SGIX_depth_pass_instrument
#1	constant GL_SGIX_depth_texture
#33189	constant GL_DEPTH_COMPONENT16_SGIX
#33190	constant GL_DEPTH_COMPONENT24_SGIX
#33191	constant GL_DEPTH_COMPONENT32_SGIX
#1	constant GL_SGIX_flush_raster
#1	constant GL_SGIX_fog_offset
#33176	constant GL_FOG_OFFSET_SGIX
#33177	constant GL_FOG_OFFSET_VALUE_SGIX
#1	constant GL_SGIX_fragment_lighting
#33792	constant GL_FRAGMENT_LIGHTING_SGIX
#33793	constant GL_FRAGMENT_COLOR_MATERIAL_SGIX
#33794	constant GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
#33795	constant GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
#33796	constant GL_MAX_FRAGMENT_LIGHTS_SGIX
#33797	constant GL_MAX_ACTIVE_LIGHTS_SGIX
#33798	constant GL_CURRENT_RASTER_NORMAL_SGIX
#33799	constant GL_LIGHT_ENV_MODE_SGIX
#33800	constant GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
#33801	constant GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
#33802	constant GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
#33803	constant GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
#33804	constant GL_FRAGMENT_LIGHT0_SGIX
#33805	constant GL_FRAGMENT_LIGHT1_SGIX
#33806	constant GL_FRAGMENT_LIGHT2_SGIX
#33807	constant GL_FRAGMENT_LIGHT3_SGIX
#33808	constant GL_FRAGMENT_LIGHT4_SGIX
#33809	constant GL_FRAGMENT_LIGHT5_SGIX
#33810	constant GL_FRAGMENT_LIGHT6_SGIX
#33811	constant GL_FRAGMENT_LIGHT7_SGIX
#1	constant GL_SGIX_framezoom
#33163	constant GL_FRAMEZOOM_SGIX
#33164	constant GL_FRAMEZOOM_FACTOR_SGIX
#33165	constant GL_MAX_FRAMEZOOM_FACTOR_SGIX
#1	constant GL_SGIX_igloo_interface
#1	constant GL_SGIX_instruments
#33152	constant GL_INSTRUMENT_BUFFER_POINTER_SGIX
#33153	constant GL_INSTRUMENT_MEASUREMENTS_SGIX
#1	constant GL_SGIX_interlace
#32916	constant GL_INTERLACE_SGIX
#1	constant GL_SGIX_ir_instrument1
#33151	constant GL_IR_INSTRUMENT1_SGIX
#1	constant GL_SGIX_list_priority
#33154	constant GL_LIST_PRIORITY_SGIX
#1	constant GL_SGIX_pixel_texture
#33081	constant GL_PIXEL_TEX_GEN_SGIX
#33579	constant GL_PIXEL_TEX_GEN_MODE_SGIX
#1	constant GL_SGIX_pixel_tiles
#33086	constant GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
#33087	constant GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
#33088	constant GL_PIXEL_TILE_WIDTH_SGIX
#33089	constant GL_PIXEL_TILE_HEIGHT_SGIX
#33090	constant GL_PIXEL_TILE_GRID_WIDTH_SGIX
#33091	constant GL_PIXEL_TILE_GRID_HEIGHT_SGIX
#33092	constant GL_PIXEL_TILE_GRID_DEPTH_SGIX
#33093	constant GL_PIXEL_TILE_CACHE_SIZE_SGIX
#1	constant GL_SGIX_polynomial_ffd
#1	constant GL_TEXTURE_DEFORMATION_BIT_SGIX
#2	constant GL_GEOMETRY_DEFORMATION_BIT_SGIX
#33172	constant GL_GEOMETRY_DEFORMATION_SGIX
#33173	constant GL_TEXTURE_DEFORMATION_SGIX
#33174	constant GL_DEFORMATIONS_MASK_SGIX
#33175	constant GL_MAX_DEFORMATION_ORDER_SGIX
#1	constant GL_SGIX_reference_plane
#33149	constant GL_REFERENCE_PLANE_SGIX
#33150	constant GL_REFERENCE_PLANE_EQUATION_SGIX
#1	constant GL_SGIX_resample
#33838	constant GL_PACK_RESAMPLE_SGIX
#33839	constant GL_UNPACK_RESAMPLE_SGIX
#33843	constant GL_RESAMPLE_REPLICATE_SGIX
#33844	constant GL_RESAMPLE_ZERO_FILL_SGIX
#33840	constant GL_RESAMPLE_DECIMATE_SGIX
#1	constant GL_SGIX_scalebias_hint
#33570	constant GL_SCALEBIAS_HINT_SGIX
#1	constant GL_SGIX_shadow
#33178	constant GL_TEXTURE_COMPARE_SGIX
#33179	constant GL_TEXTURE_COMPARE_OPERATOR_SGIX
#33180	constant GL_TEXTURE_LEQUAL_R_SGIX
#33181	constant GL_TEXTURE_GEQUAL_R_SGIX
#1	constant GL_SGIX_shadow_ambient
#32959	constant GL_SHADOW_AMBIENT_SGIX
#1	constant GL_SGIX_sprite
#33096	constant GL_SPRITE_SGIX
#33097	constant GL_SPRITE_MODE_SGIX
#33098	constant GL_SPRITE_AXIS_SGIX
#33099	constant GL_SPRITE_TRANSLATION_SGIX
#33100	constant GL_SPRITE_AXIAL_SGIX
#33101	constant GL_SPRITE_OBJECT_ALIGNED_SGIX
#33102	constant GL_SPRITE_EYE_ALIGNED_SGIX
#1	constant GL_SGIX_subsample
#34208	constant GL_PACK_SUBSAMPLE_RATE_SGIX
#34209	constant GL_UNPACK_SUBSAMPLE_RATE_SGIX
#34210	constant GL_PIXEL_SUBSAMPLE_4444_SGIX
#34211	constant GL_PIXEL_SUBSAMPLE_2424_SGIX
#34212	constant GL_PIXEL_SUBSAMPLE_4242_SGIX
#1	constant GL_SGIX_tag_sample_buffer
#1	constant GL_SGIX_texture_add_env
#32958	constant GL_TEXTURE_ENV_BIAS_SGIX
#1	constant GL_SGIX_texture_coordinate_clamp
#33641	constant GL_TEXTURE_MAX_CLAMP_S_SGIX
#33642	constant GL_TEXTURE_MAX_CLAMP_T_SGIX
#33643	constant GL_TEXTURE_MAX_CLAMP_R_SGIX
#1	constant GL_SGIX_texture_lod_bias
#33166	constant GL_TEXTURE_LOD_BIAS_S_SGIX
#33167	constant GL_TEXTURE_LOD_BIAS_T_SGIX
#33168	constant GL_TEXTURE_LOD_BIAS_R_SGIX
#1	constant GL_SGIX_texture_multi_buffer
#33070	constant GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
#1	constant GL_SGIX_texture_scale_bias
#33145	constant GL_POST_TEXTURE_FILTER_BIAS_SGIX
#33146	constant GL_POST_TEXTURE_FILTER_SCALE_SGIX
#33147	constant GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
#33148	constant GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
#1	constant GL_SGIX_vertex_preclip
#33774	constant GL_VERTEX_PRECLIP_SGIX
#33775	constant GL_VERTEX_PRECLIP_HINT_SGIX
#1	constant GL_SGIX_ycrcb
#33211	constant GL_YCRCB_422_SGIX
#33212	constant GL_YCRCB_444_SGIX
#1	constant GL_SGIX_ycrcb_subsample
#1	constant GL_SGIX_ycrcba
#33560	constant GL_YCRCB_SGIX
#33561	constant GL_YCRCBA_SGIX
#1	constant GL_SGI_color_matrix
#32945	constant GL_COLOR_MATRIX_SGI
#32946	constant GL_COLOR_MATRIX_STACK_DEPTH_SGI
#32947	constant GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
#32948	constant GL_POST_COLOR_MATRIX_RED_SCALE_SGI
#32949	constant GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
#32950	constant GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
#32951	constant GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
#32952	constant GL_POST_COLOR_MATRIX_RED_BIAS_SGI
#32953	constant GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
#32954	constant GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
#32955	constant GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
#1	constant GL_SGI_color_table
#32976	constant GL_COLOR_TABLE_SGI
#32977	constant GL_POST_CONVOLUTION_COLOR_TABLE_SGI
#32978	constant GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#32979	constant GL_PROXY_COLOR_TABLE_SGI
#32980	constant GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
#32981	constant GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#32982	constant GL_COLOR_TABLE_SCALE_SGI
#32983	constant GL_COLOR_TABLE_BIAS_SGI
#32984	constant GL_COLOR_TABLE_FORMAT_SGI
#32985	constant GL_COLOR_TABLE_WIDTH_SGI
#32986	constant GL_COLOR_TABLE_RED_SIZE_SGI
#32987	constant GL_COLOR_TABLE_GREEN_SIZE_SGI
#32988	constant GL_COLOR_TABLE_BLUE_SIZE_SGI
#32989	constant GL_COLOR_TABLE_ALPHA_SIZE_SGI
#32990	constant GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
#32991	constant GL_COLOR_TABLE_INTENSITY_SIZE_SGI
#1	constant GL_SGI_texture_color_table
#32956	constant GL_TEXTURE_COLOR_TABLE_SGI
#32957	constant GL_PROXY_TEXTURE_COLOR_TABLE_SGI
#1	constant GL_SUNX_constant_data
#33237	constant GL_UNPACK_CONSTANT_DATA_SUNX
#33238	constant GL_TEXTURE_CONSTANT_DATA_SUNX
#1	constant GL_SUN_convolution_border_modes
#33236	constant GL_WRAP_BORDER_SUN
#1	constant GL_SUN_global_alpha
#33241	constant GL_GLOBAL_ALPHA_SUN
#33242	constant GL_GLOBAL_ALPHA_FACTOR_SUN
#1	constant GL_SUN_mesh_array
#34324	constant GL_QUAD_MESH_SUN
#34325	constant GL_TRIANGLE_MESH_SUN
#1	constant GL_SUN_slice_accum
#34252	constant GL_SLICE_ACCUM_SUN
#1	constant GL_SUN_triangle_list
#1	constant GL_RESTART_SUN
#2	constant GL_REPLACE_MIDDLE_SUN
#3	constant GL_REPLACE_OLDEST_SUN
#33239	constant GL_TRIANGLE_LIST_SUN
#33240	constant GL_REPLACEMENT_CODE_SUN
#34240	constant GL_REPLACEMENT_CODE_ARRAY_SUN
#34241	constant GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
#34242	constant GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
#34243	constant GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
#34244	constant GL_R1UI_V3F_SUN
#34245	constant GL_R1UI_C4UB_V3F_SUN
#34246	constant GL_R1UI_C3F_V3F_SUN
#34247	constant GL_R1UI_N3F_V3F_SUN
#34248	constant GL_R1UI_C4F_N3F_V3F_SUN
#34249	constant GL_R1UI_T2F_V3F_SUN
#34250	constant GL_R1UI_T2F_N3F_V3F_SUN
#34251	constant GL_R1UI_T2F_C4F_N3F_V3F_SUN
#1	constant GL_SUN_vertex
#1	constant GL_WIN_phong_shading
#33002	constant GL_PHONG_WIN
#33003	constant GL_PHONG_HINT_WIN
#1	constant GL_WIN_specular_fog
#33004	constant GL_FOG_SPECULAR_TEXTURE_WIN

\ ----===< long constants >===-----
#18446744073709551615.	2constant GL_TIMEOUT_IGNORED

\ ------===< functions >===-------
EXTERN: "C" void glClearIndex( float c );	( c -- )
EXTERN: "C" void glClearColor( float red, float green, float blue, float alpha );	( red green blue alpha -- )
EXTERN: "C" void glClear( int mask );	( mask -- )
EXTERN: "C" void glIndexMask( int mask );	( mask -- )
EXTERN: "C" void glColorMask( char red, char green, char blue, char alpha );	( red green blue alpha -- )
EXTERN: "C" void glAlphaFunc( int func, float ref );	( func ref -- )
EXTERN: "C" void glBlendFunc( int sfactor, int dfactor );	( sfactor dfactor -- )
EXTERN: "C" void glLogicOp( int opcode );	( opcode -- )
EXTERN: "C" void glCullFace( int mode );	( mode -- )
EXTERN: "C" void glFrontFace( int mode );	( mode -- )
EXTERN: "C" void glPointSize( float size );	( size -- )
EXTERN: "C" void glLineWidth( float width );	( width -- )
EXTERN: "C" void glLineStipple( int factor, short pattern );	( factor pattern -- )
EXTERN: "C" void glPolygonMode( int face, int mode );	( face mode -- )
EXTERN: "C" void glPolygonOffset( float factor, float units );	( factor units -- )
EXTERN: "C" void glPolygonStipple( void * mask );	( mask -- )
EXTERN: "C" void glGetPolygonStipple( void * mask );	( mask -- )
EXTERN: "C" void glEdgeFlag( char flag );	( flag -- )
EXTERN: "C" void glEdgeFlagv( void * flag );	( flag -- )
EXTERN: "C" void glScissor( int x, int y, int width, int height );	( x y width height -- )
EXTERN: "C" void glClipPlane( int plane, void * equation );	( plane equation -- )
EXTERN: "C" void glGetClipPlane( int plane, void * equation );	( plane equation -- )
EXTERN: "C" void glDrawBuffer( int mode );	( mode -- )
EXTERN: "C" void glReadBuffer( int mode );	( mode -- )
EXTERN: "C" void glEnable( int cap );	( cap -- )
EXTERN: "C" void glDisable( int cap );	( cap -- )
EXTERN: "C" char glIsEnabled( int cap );	( cap -- )
EXTERN: "C" void glEnableClientState( int cap );	( cap -- )
EXTERN: "C" void glDisableClientState( int cap );	( cap -- )
EXTERN: "C" void glGetBooleanv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glGetDoublev( int pname, void * params );	( pname params -- )
EXTERN: "C" void glGetFloatv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glGetIntegerv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glPushAttrib( int mask );	( mask -- )
EXTERN: "C" void glPopAttrib(  );	( -- )
EXTERN: "C" void glPushClientAttrib( int mask );	( mask -- )
EXTERN: "C" void glPopClientAttrib(  );	( -- )
EXTERN: "C" int glRenderMode( int mode );	( mode -- )
EXTERN: "C" int glGetError(  );	( -- )
EXTERN: "C" void * glGetString( int name );	( name -- )
EXTERN: "C" void glFinish(  );	( -- )
EXTERN: "C" void glFlush(  );	( -- )
EXTERN: "C" void glHint( int target, int mode );	( target mode -- )
EXTERN: "C" void glClearDepth( double depth );	( depth -- )
EXTERN: "C" void glDepthFunc( int func );	( func -- )
EXTERN: "C" void glDepthMask( char flag );	( flag -- )
EXTERN: "C" void glDepthRange( double near_val, double far_val );	( near_val far_val -- )
EXTERN: "C" void glClearAccum( float red, float green, float blue, float alpha );	( red green blue alpha -- )
EXTERN: "C" void glAccum( int op, float value );	( op value -- )
EXTERN: "C" void glMatrixMode( int mode );	( mode -- )
EXTERN: "C" void glOrtho( double left, double right, double bottom, double top, double near_val, double far_val );	( left right bottom top near_val far_val -- )
EXTERN: "C" void glFrustum( double left, double right, double bottom, double top, double near_val, double far_val );	( left right bottom top near_val far_val -- )
EXTERN: "C" void glViewport( int x, int y, int width, int height );	( x y width height -- )
EXTERN: "C" void glPushMatrix(  );	( -- )
EXTERN: "C" void glPopMatrix(  );	( -- )
EXTERN: "C" void glLoadIdentity(  );	( -- )
EXTERN: "C" void glLoadMatrixd( void * m );	( m -- )
EXTERN: "C" void glLoadMatrixf( void * m );	( m -- )
EXTERN: "C" void glMultMatrixd( void * m );	( m -- )
EXTERN: "C" void glMultMatrixf( void * m );	( m -- )
EXTERN: "C" void glRotated( double angle, double x, double y, double z );	( angle x y z -- )
EXTERN: "C" void glRotatef( float angle, float x, float y, float z );	( angle x y z -- )
EXTERN: "C" void glScaled( double x, double y, double z );	( x y z -- )
EXTERN: "C" void glScalef( float x, float y, float z );	( x y z -- )
EXTERN: "C" void glTranslated( double x, double y, double z );	( x y z -- )
EXTERN: "C" void glTranslatef( float x, float y, float z );	( x y z -- )
EXTERN: "C" char glIsList( int list );	( list -- )
EXTERN: "C" void glDeleteLists( int list, int range );	( list range -- )
EXTERN: "C" int glGenLists( int range );	( range -- )
EXTERN: "C" void glNewList( int list, int mode );	( list mode -- )
EXTERN: "C" void glEndList(  );	( -- )
EXTERN: "C" void glCallList( int list );	( list -- )
EXTERN: "C" void glCallLists( int n, int type, void * lists );	( n type lists -- )
EXTERN: "C" void glListBase( int base );	( base -- )
EXTERN: "C" void glBegin( int mode );	( mode -- )
EXTERN: "C" void glEnd(  );	( -- )
EXTERN: "C" void glVertex2d( double x, double y );	( x y -- )
EXTERN: "C" void glVertex2f( float x, float y );	( x y -- )
EXTERN: "C" void glVertex2i( int x, int y );	( x y -- )
EXTERN: "C" void glVertex2s( short x, short y );	( x y -- )
EXTERN: "C" void glVertex3d( double x, double y, double z );	( x y z -- )
EXTERN: "C" void glVertex3f( float x, float y, float z );	( x y z -- )
EXTERN: "C" void glVertex3i( int x, int y, int z );	( x y z -- )
EXTERN: "C" void glVertex3s( short x, short y, short z );	( x y z -- )
EXTERN: "C" void glVertex4d( double x, double y, double z, double w );	( x y z w -- )
EXTERN: "C" void glVertex4f( float x, float y, float z, float w );	( x y z w -- )
EXTERN: "C" void glVertex4i( int x, int y, int z, int w );	( x y z w -- )
EXTERN: "C" void glVertex4s( short x, short y, short z, short w );	( x y z w -- )
EXTERN: "C" void glVertex2dv( void * v );	( v -- )
EXTERN: "C" void glVertex2fv( void * v );	( v -- )
EXTERN: "C" void glVertex2iv( void * v );	( v -- )
EXTERN: "C" void glVertex2sv( void * v );	( v -- )
EXTERN: "C" void glVertex3dv( void * v );	( v -- )
EXTERN: "C" void glVertex3fv( void * v );	( v -- )
EXTERN: "C" void glVertex3iv( void * v );	( v -- )
EXTERN: "C" void glVertex3sv( void * v );	( v -- )
EXTERN: "C" void glVertex4dv( void * v );	( v -- )
EXTERN: "C" void glVertex4fv( void * v );	( v -- )
EXTERN: "C" void glVertex4iv( void * v );	( v -- )
EXTERN: "C" void glVertex4sv( void * v );	( v -- )
EXTERN: "C" void glNormal3b( char nx, char ny, char nz );	( nx ny nz -- )
EXTERN: "C" void glNormal3d( double nx, double ny, double nz );	( nx ny nz -- )
EXTERN: "C" void glNormal3f( float nx, float ny, float nz );	( nx ny nz -- )
EXTERN: "C" void glNormal3i( int nx, int ny, int nz );	( nx ny nz -- )
EXTERN: "C" void glNormal3s( short nx, short ny, short nz );	( nx ny nz -- )
EXTERN: "C" void glNormal3bv( void * v );	( v -- )
EXTERN: "C" void glNormal3dv( void * v );	( v -- )
EXTERN: "C" void glNormal3fv( void * v );	( v -- )
EXTERN: "C" void glNormal3iv( void * v );	( v -- )
EXTERN: "C" void glNormal3sv( void * v );	( v -- )
EXTERN: "C" void glIndexd( double c );	( c -- )
EXTERN: "C" void glIndexf( float c );	( c -- )
EXTERN: "C" void glIndexi( int c );	( c -- )
EXTERN: "C" void glIndexs( short c );	( c -- )
EXTERN: "C" void glIndexub( char c );	( c -- )
EXTERN: "C" void glIndexdv( void * c );	( c -- )
EXTERN: "C" void glIndexfv( void * c );	( c -- )
EXTERN: "C" void glIndexiv( void * c );	( c -- )
EXTERN: "C" void glIndexsv( void * c );	( c -- )
EXTERN: "C" void glIndexubv( void * c );	( c -- )
EXTERN: "C" void glColor3b( char red, char green, char blue );	( red green blue -- )
EXTERN: "C" void glColor3d( double red, double green, double blue );	( red green blue -- )
EXTERN: "C" void glColor3f( float red, float green, float blue );	( red green blue -- )
EXTERN: "C" void glColor3i( int red, int green, int blue );	( red green blue -- )
EXTERN: "C" void glColor3s( short red, short green, short blue );	( red green blue -- )
EXTERN: "C" void glColor3ub( char red, char green, char blue );	( red green blue -- )
EXTERN: "C" void glColor3ui( int red, int green, int blue );	( red green blue -- )
EXTERN: "C" void glColor3us( short red, short green, short blue );	( red green blue -- )
EXTERN: "C" void glColor4b( char red, char green, char blue, char alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor4d( double red, double green, double blue, double alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor4f( float red, float green, float blue, float alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor4i( int red, int green, int blue, int alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor4s( short red, short green, short blue, short alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor4ub( char red, char green, char blue, char alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor4ui( int red, int green, int blue, int alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor4us( short red, short green, short blue, short alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor3bv( void * v );	( v -- )
EXTERN: "C" void glColor3dv( void * v );	( v -- )
EXTERN: "C" void glColor3fv( void * v );	( v -- )
EXTERN: "C" void glColor3iv( void * v );	( v -- )
EXTERN: "C" void glColor3sv( void * v );	( v -- )
EXTERN: "C" void glColor3ubv( void * v );	( v -- )
EXTERN: "C" void glColor3uiv( void * v );	( v -- )
EXTERN: "C" void glColor3usv( void * v );	( v -- )
EXTERN: "C" void glColor4bv( void * v );	( v -- )
EXTERN: "C" void glColor4dv( void * v );	( v -- )
EXTERN: "C" void glColor4fv( void * v );	( v -- )
EXTERN: "C" void glColor4iv( void * v );	( v -- )
EXTERN: "C" void glColor4sv( void * v );	( v -- )
EXTERN: "C" void glColor4ubv( void * v );	( v -- )
EXTERN: "C" void glColor4uiv( void * v );	( v -- )
EXTERN: "C" void glColor4usv( void * v );	( v -- )
EXTERN: "C" void glTexCoord1d( double s );	( s -- )
EXTERN: "C" void glTexCoord1f( float s );	( s -- )
EXTERN: "C" void glTexCoord1i( int s );	( s -- )
EXTERN: "C" void glTexCoord1s( short s );	( s -- )
EXTERN: "C" void glTexCoord2d( double s, double t );	( s t -- )
EXTERN: "C" void glTexCoord2f( float s, float t );	( s t -- )
EXTERN: "C" void glTexCoord2i( int s, int t );	( s t -- )
EXTERN: "C" void glTexCoord2s( short s, short t );	( s t -- )
EXTERN: "C" void glTexCoord3d( double s, double t, double r );	( s t r -- )
EXTERN: "C" void glTexCoord3f( float s, float t, float r );	( s t r -- )
EXTERN: "C" void glTexCoord3i( int s, int t, int r );	( s t r -- )
EXTERN: "C" void glTexCoord3s( short s, short t, short r );	( s t r -- )
EXTERN: "C" void glTexCoord4d( double s, double t, double r, double q );	( s t r q -- )
EXTERN: "C" void glTexCoord4f( float s, float t, float r, float q );	( s t r q -- )
EXTERN: "C" void glTexCoord4i( int s, int t, int r, int q );	( s t r q -- )
EXTERN: "C" void glTexCoord4s( short s, short t, short r, short q );	( s t r q -- )
EXTERN: "C" void glTexCoord1dv( void * v );	( v -- )
EXTERN: "C" void glTexCoord1fv( void * v );	( v -- )
EXTERN: "C" void glTexCoord1iv( void * v );	( v -- )
EXTERN: "C" void glTexCoord1sv( void * v );	( v -- )
EXTERN: "C" void glTexCoord2dv( void * v );	( v -- )
EXTERN: "C" void glTexCoord2fv( void * v );	( v -- )
EXTERN: "C" void glTexCoord2iv( void * v );	( v -- )
EXTERN: "C" void glTexCoord2sv( void * v );	( v -- )
EXTERN: "C" void glTexCoord3dv( void * v );	( v -- )
EXTERN: "C" void glTexCoord3fv( void * v );	( v -- )
EXTERN: "C" void glTexCoord3iv( void * v );	( v -- )
EXTERN: "C" void glTexCoord3sv( void * v );	( v -- )
EXTERN: "C" void glTexCoord4dv( void * v );	( v -- )
EXTERN: "C" void glTexCoord4fv( void * v );	( v -- )
EXTERN: "C" void glTexCoord4iv( void * v );	( v -- )
EXTERN: "C" void glTexCoord4sv( void * v );	( v -- )
EXTERN: "C" void glRasterPos2d( double x, double y );	( x y -- )
EXTERN: "C" void glRasterPos2f( float x, float y );	( x y -- )
EXTERN: "C" void glRasterPos2i( int x, int y );	( x y -- )
EXTERN: "C" void glRasterPos2s( short x, short y );	( x y -- )
EXTERN: "C" void glRasterPos3d( double x, double y, double z );	( x y z -- )
EXTERN: "C" void glRasterPos3f( float x, float y, float z );	( x y z -- )
EXTERN: "C" void glRasterPos3i( int x, int y, int z );	( x y z -- )
EXTERN: "C" void glRasterPos3s( short x, short y, short z );	( x y z -- )
EXTERN: "C" void glRasterPos4d( double x, double y, double z, double w );	( x y z w -- )
EXTERN: "C" void glRasterPos4f( float x, float y, float z, float w );	( x y z w -- )
EXTERN: "C" void glRasterPos4i( int x, int y, int z, int w );	( x y z w -- )
EXTERN: "C" void glRasterPos4s( short x, short y, short z, short w );	( x y z w -- )
EXTERN: "C" void glRasterPos2dv( void * v );	( v -- )
EXTERN: "C" void glRasterPos2fv( void * v );	( v -- )
EXTERN: "C" void glRasterPos2iv( void * v );	( v -- )
EXTERN: "C" void glRasterPos2sv( void * v );	( v -- )
EXTERN: "C" void glRasterPos3dv( void * v );	( v -- )
EXTERN: "C" void glRasterPos3fv( void * v );	( v -- )
EXTERN: "C" void glRasterPos3iv( void * v );	( v -- )
EXTERN: "C" void glRasterPos3sv( void * v );	( v -- )
EXTERN: "C" void glRasterPos4dv( void * v );	( v -- )
EXTERN: "C" void glRasterPos4fv( void * v );	( v -- )
EXTERN: "C" void glRasterPos4iv( void * v );	( v -- )
EXTERN: "C" void glRasterPos4sv( void * v );	( v -- )
EXTERN: "C" void glRectd( double x1, double y1, double x2, double y2 );	( x1 y1 x2 y2 -- )
EXTERN: "C" void glRectf( float x1, float y1, float x2, float y2 );	( x1 y1 x2 y2 -- )
EXTERN: "C" void glRecti( int x1, int y1, int x2, int y2 );	( x1 y1 x2 y2 -- )
EXTERN: "C" void glRects( short x1, short y1, short x2, short y2 );	( x1 y1 x2 y2 -- )
EXTERN: "C" void glRectdv( void * v1, void * v2 );	( v1 v2 -- )
EXTERN: "C" void glRectfv( void * v1, void * v2 );	( v1 v2 -- )
EXTERN: "C" void glRectiv( void * v1, void * v2 );	( v1 v2 -- )
EXTERN: "C" void glRectsv( void * v1, void * v2 );	( v1 v2 -- )
EXTERN: "C" void glVertexPointer( int size, int type, int stride, void * ptr );	( size type stride ptr -- )
EXTERN: "C" void glNormalPointer( int type, int stride, void * ptr );	( type stride ptr -- )
EXTERN: "C" void glColorPointer( int size, int type, int stride, void * ptr );	( size type stride ptr -- )
EXTERN: "C" void glIndexPointer( int type, int stride, void * ptr );	( type stride ptr -- )
EXTERN: "C" void glTexCoordPointer( int size, int type, int stride, void * ptr );	( size type stride ptr -- )
EXTERN: "C" void glEdgeFlagPointer( int stride, void * ptr );	( stride ptr -- )
EXTERN: "C" void glGetPointerv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glArrayElement( int i );	( i -- )
EXTERN: "C" void glDrawArrays( int mode, int first, int count );	( mode first count -- )
EXTERN: "C" void glDrawElements( int mode, int count, int type, void * indices );	( mode count type indices -- )
EXTERN: "C" void glInterleavedArrays( int format, int stride, void * pointer );	( format stride pointer -- )
EXTERN: "C" void glShadeModel( int mode );	( mode -- )
EXTERN: "C" void glLightf( int light, int pname, float param );	( light pname param -- )
EXTERN: "C" void glLighti( int light, int pname, int param );	( light pname param -- )
EXTERN: "C" void glLightfv( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glLightiv( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glGetLightfv( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glGetLightiv( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glLightModelf( int pname, float param );	( pname param -- )
EXTERN: "C" void glLightModeli( int pname, int param );	( pname param -- )
EXTERN: "C" void glLightModelfv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glLightModeliv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glMaterialf( int face, int pname, float param );	( face pname param -- )
EXTERN: "C" void glMateriali( int face, int pname, int param );	( face pname param -- )
EXTERN: "C" void glMaterialfv( int face, int pname, void * params );	( face pname params -- )
EXTERN: "C" void glMaterialiv( int face, int pname, void * params );	( face pname params -- )
EXTERN: "C" void glGetMaterialfv( int face, int pname, void * params );	( face pname params -- )
EXTERN: "C" void glGetMaterialiv( int face, int pname, void * params );	( face pname params -- )
EXTERN: "C" void glColorMaterial( int face, int mode );	( face mode -- )
EXTERN: "C" void glPixelZoom( float xfactor, float yfactor );	( xfactor yfactor -- )
EXTERN: "C" void glPixelStoref( int pname, float param );	( pname param -- )
EXTERN: "C" void glPixelStorei( int pname, int param );	( pname param -- )
EXTERN: "C" void glPixelTransferf( int pname, float param );	( pname param -- )
EXTERN: "C" void glPixelTransferi( int pname, int param );	( pname param -- )
EXTERN: "C" void glPixelMapfv( int map, int mapsize, void * values );	( map mapsize values -- )
EXTERN: "C" void glPixelMapuiv( int map, int mapsize, void * values );	( map mapsize values -- )
EXTERN: "C" void glPixelMapusv( int map, int mapsize, void * values );	( map mapsize values -- )
EXTERN: "C" void glGetPixelMapfv( int map, void * values );	( map values -- )
EXTERN: "C" void glGetPixelMapuiv( int map, void * values );	( map values -- )
EXTERN: "C" void glGetPixelMapusv( int map, void * values );	( map values -- )
EXTERN: "C" void glBitmap( int width, int height, float xorig, float yorig, float xmove, float ymove, void * bitmap );	( width height xorig yorig xmove ymove bitmap -- )
EXTERN: "C" void glReadPixels( int x, int y, int width, int height, int format, int type, void * pixels );	( x y width height format type pixels -- )
EXTERN: "C" void glDrawPixels( int width, int height, int format, int type, void * pixels );	( width height format type pixels -- )
EXTERN: "C" void glCopyPixels( int x, int y, int width, int height, int type );	( x y width height type -- )
EXTERN: "C" void glStencilFunc( int func, int ref, int mask );	( func ref mask -- )
EXTERN: "C" void glStencilMask( int mask );	( mask -- )
EXTERN: "C" void glStencilOp( int fail, int zfail, int zpass );	( fail zfail zpass -- )
EXTERN: "C" void glClearStencil( int s );	( s -- )
EXTERN: "C" void glTexGend( int coord, int pname, double param );	( coord pname param -- )
EXTERN: "C" void glTexGenf( int coord, int pname, float param );	( coord pname param -- )
EXTERN: "C" void glTexGeni( int coord, int pname, int param );	( coord pname param -- )
EXTERN: "C" void glTexGendv( int coord, int pname, void * params );	( coord pname params -- )
EXTERN: "C" void glTexGenfv( int coord, int pname, void * params );	( coord pname params -- )
EXTERN: "C" void glTexGeniv( int coord, int pname, void * params );	( coord pname params -- )
EXTERN: "C" void glGetTexGendv( int coord, int pname, void * params );	( coord pname params -- )
EXTERN: "C" void glGetTexGenfv( int coord, int pname, void * params );	( coord pname params -- )
EXTERN: "C" void glGetTexGeniv( int coord, int pname, void * params );	( coord pname params -- )
EXTERN: "C" void glTexEnvf( int target, int pname, float param );	( target pname param -- )
EXTERN: "C" void glTexEnvi( int target, int pname, int param );	( target pname param -- )
EXTERN: "C" void glTexEnvfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glTexEnviv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexEnvfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexEnviv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glTexParameterf( int target, int pname, float param );	( target pname param -- )
EXTERN: "C" void glTexParameteri( int target, int pname, int param );	( target pname param -- )
EXTERN: "C" void glTexParameterfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glTexParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexParameterfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexLevelParameterfv( int target, int level, int pname, void * params );	( target level pname params -- )
EXTERN: "C" void glGetTexLevelParameteriv( int target, int level, int pname, void * params );	( target level pname params -- )
EXTERN: "C" void glTexImage1D( int target, int level, int internalFormat, int width, int border, int format, int type, void * pixels );	( target level internalFormat width border format type pixels -- )
EXTERN: "C" void glTexImage2D( int target, int level, int internalFormat, int width, int height, int border, int format, int type, void * pixels );	( target level internalFormat width height border format type pixels -- )
EXTERN: "C" void glGetTexImage( int target, int level, int format, int type, void * pixels );	( target level format type pixels -- )
EXTERN: "C" void glGenTextures( int n, void * textures );	( n textures -- )
EXTERN: "C" void glDeleteTextures( int n, void * textures );	( n textures -- )
EXTERN: "C" void glBindTexture( int target, int texture );	( target texture -- )
EXTERN: "C" void glPrioritizeTextures( int n, void * textures, void * priorities );	( n textures priorities -- )
EXTERN: "C" char glAreTexturesResident( int n, void * textures, void * residences );	( n textures residences -- )
EXTERN: "C" char glIsTexture( int texture );	( texture -- )
EXTERN: "C" void glTexSubImage1D( int target, int level, int xoffset, int width, int format, int type, void * pixels );	( target level xoffset width format type pixels -- )
EXTERN: "C" void glTexSubImage2D( int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, void * pixels );	( target level xoffset yoffset width height format type pixels -- )
EXTERN: "C" void glCopyTexImage1D( int target, int level, int internalformat, int x, int y, int width, int border );	( target level internalformat x y width border -- )
EXTERN: "C" void glCopyTexImage2D( int target, int level, int internalformat, int x, int y, int width, int height, int border );	( target level internalformat x y width height border -- )
EXTERN: "C" void glCopyTexSubImage1D( int target, int level, int xoffset, int x, int y, int width );	( target level xoffset x y width -- )
EXTERN: "C" void glCopyTexSubImage2D( int target, int level, int xoffset, int yoffset, int x, int y, int width, int height );	( target level xoffset yoffset x y width height -- )
EXTERN: "C" void glMap1d( int target, double u1, double u2, int stride, int order, void * points );	( target u1 u2 stride order points -- )
EXTERN: "C" void glMap1f( int target, float u1, float u2, int stride, int order, void * points );	( target u1 u2 stride order points -- )
EXTERN: "C" void glMap2d( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, void * points );	( target u1 u2 ustride uorder v1 v2 vstride vorder points -- )
EXTERN: "C" void glMap2f( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, void * points );	( target u1 u2 ustride uorder v1 v2 vstride vorder points -- )
EXTERN: "C" void glGetMapdv( int target, int query, void * v );	( target query v -- )
EXTERN: "C" void glGetMapfv( int target, int query, void * v );	( target query v -- )
EXTERN: "C" void glGetMapiv( int target, int query, void * v );	( target query v -- )
EXTERN: "C" void glEvalCoord1d( double u );	( u -- )
EXTERN: "C" void glEvalCoord1f( float u );	( u -- )
EXTERN: "C" void glEvalCoord1dv( void * u );	( u -- )
EXTERN: "C" void glEvalCoord1fv( void * u );	( u -- )
EXTERN: "C" void glEvalCoord2d( double u, double v );	( u v -- )
EXTERN: "C" void glEvalCoord2f( float u, float v );	( u v -- )
EXTERN: "C" void glEvalCoord2dv( void * u );	( u -- )
EXTERN: "C" void glEvalCoord2fv( void * u );	( u -- )
EXTERN: "C" void glMapGrid1d( int un, double u1, double u2 );	( un u1 u2 -- )
EXTERN: "C" void glMapGrid1f( int un, float u1, float u2 );	( un u1 u2 -- )
EXTERN: "C" void glMapGrid2d( int un, double u1, double u2, int vn, double v1, double v2 );	( un u1 u2 vn v1 v2 -- )
EXTERN: "C" void glMapGrid2f( int un, float u1, float u2, int vn, float v1, float v2 );	( un u1 u2 vn v1 v2 -- )
EXTERN: "C" void glEvalPoint1( int i );	( i -- )
EXTERN: "C" void glEvalPoint2( int i, int j );	( i j -- )
EXTERN: "C" void glEvalMesh1( int mode, int i1, int i2 );	( mode i1 i2 -- )
EXTERN: "C" void glEvalMesh2( int mode, int i1, int i2, int j1, int j2 );	( mode i1 i2 j1 j2 -- )
EXTERN: "C" void glFogf( int pname, float param );	( pname param -- )
EXTERN: "C" void glFogi( int pname, int param );	( pname param -- )
EXTERN: "C" void glFogfv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glFogiv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glFeedbackBuffer( int size, int type, void * buffer );	( size type buffer -- )
EXTERN: "C" void glPassThrough( float token );	( token -- )
EXTERN: "C" void glSelectBuffer( int size, void * buffer );	( size buffer -- )
EXTERN: "C" void glInitNames(  );	( -- )
EXTERN: "C" void glLoadName( int name );	( name -- )
EXTERN: "C" void glPushName( int name );	( name -- )
EXTERN: "C" void glPopName(  );	( -- )
EXTERN: "C" void glDrawRangeElements( int mode, int start, int end, int count, int type, void * indices );	( mode start end count type indices -- )
EXTERN: "C" void glTexImage3D( int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, void * pixels );	( target level internalFormat width height depth border format type pixels -- )
EXTERN: "C" void glTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, void * pixels );	( target level xoffset yoffset zoffset width height depth format type pixels -- )
EXTERN: "C" void glCopyTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height );	( target level xoffset yoffset zoffset x y width height -- )
EXTERN: "C" void glColorTable( int target, int internalformat, int width, int format, int type, void * table );	( target internalformat width format type table -- )
EXTERN: "C" void glColorSubTable( int target, int start, int count, int format, int type, void * data );	( target start count format type data -- )
EXTERN: "C" void glColorTableParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glColorTableParameterfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glCopyColorSubTable( int target, int start, int x, int y, int width );	( target start x y width -- )
EXTERN: "C" void glCopyColorTable( int target, int internalformat, int x, int y, int width );	( target internalformat x y width -- )
EXTERN: "C" void glGetColorTable( int target, int format, int type, void * table );	( target format type table -- )
EXTERN: "C" void glGetColorTableParameterfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetColorTableParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glBlendEquation( int mode );	( mode -- )
EXTERN: "C" void glBlendColor( float red, float green, float blue, float alpha );	( red green blue alpha -- )
EXTERN: "C" void glHistogram( int target, int width, int internalformat, char sink );	( target width internalformat sink -- )
EXTERN: "C" void glResetHistogram( int target );	( target -- )
EXTERN: "C" void glGetHistogram( int target, char reset, int format, int type, void * values );	( target reset format type values -- )
EXTERN: "C" void glGetHistogramParameterfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetHistogramParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glMinmax( int target, int internalformat, char sink );	( target internalformat sink -- )
EXTERN: "C" void glResetMinmax( int target );	( target -- )
EXTERN: "C" void glGetMinmax( int target, char reset, int format, int types, void * values );	( target reset format types values -- )
EXTERN: "C" void glGetMinmaxParameterfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetMinmaxParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glConvolutionFilter1D( int target, int internalformat, int width, int format, int type, void * image );	( target internalformat width format type image -- )
EXTERN: "C" void glConvolutionFilter2D( int target, int internalformat, int width, int height, int format, int type, void * image );	( target internalformat width height format type image -- )
EXTERN: "C" void glConvolutionParameterf( int target, int pname, float params );	( target pname params -- )
EXTERN: "C" void glConvolutionParameterfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glConvolutionParameteri( int target, int pname, int params );	( target pname params -- )
EXTERN: "C" void glConvolutionParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glCopyConvolutionFilter1D( int target, int internalformat, int x, int y, int width );	( target internalformat x y width -- )
EXTERN: "C" void glCopyConvolutionFilter2D( int target, int internalformat, int x, int y, int width, int height );	( target internalformat x y width height -- )
EXTERN: "C" void glGetConvolutionFilter( int target, int format, int type, void * image );	( target format type image -- )
EXTERN: "C" void glGetConvolutionParameterfv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetConvolutionParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glSeparableFilter2D( int target, int internalformat, int width, int height, int format, int type, void * row, void * column );	( target internalformat width height format type row column -- )
EXTERN: "C" void glGetSeparableFilter( int target, int format, int type, void * row, void * column, void * span );	( target format type row column span -- )
EXTERN: "C" void glActiveTexture( int texture );	( texture -- )
EXTERN: "C" void glClientActiveTexture( int texture );	( texture -- )
EXTERN: "C" void glCompressedTexImage1D( int target, int level, int internalformat, int width, int border, int imageSize, void * data );	( target level internalformat width border imageSize data -- )
EXTERN: "C" void glCompressedTexImage2D( int target, int level, int internalformat, int width, int height, int border, int imageSize, void * data );	( target level internalformat width height border imageSize data -- )
EXTERN: "C" void glCompressedTexImage3D( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, void * data );	( target level internalformat width height depth border imageSize data -- )
EXTERN: "C" void glCompressedTexSubImage1D( int target, int level, int xoffset, int width, int format, int imageSize, void * data );	( target level xoffset width format imageSize data -- )
EXTERN: "C" void glCompressedTexSubImage2D( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, void * data );	( target level xoffset yoffset width height format imageSize data -- )
EXTERN: "C" void glCompressedTexSubImage3D( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, void * data );	( target level xoffset yoffset zoffset width height depth format imageSize data -- )
EXTERN: "C" void glGetCompressedTexImage( int target, int lod, void * img );	( target lod img -- )
EXTERN: "C" void glMultiTexCoord1d( int target, double s );	( target s -- )
EXTERN: "C" void glMultiTexCoord1dv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord1f( int target, float s );	( target s -- )
EXTERN: "C" void glMultiTexCoord1fv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord1i( int target, int s );	( target s -- )
EXTERN: "C" void glMultiTexCoord1iv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord1s( int target, short s );	( target s -- )
EXTERN: "C" void glMultiTexCoord1sv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord2d( int target, double s, double t );	( target s t -- )
EXTERN: "C" void glMultiTexCoord2dv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord2f( int target, float s, float t );	( target s t -- )
EXTERN: "C" void glMultiTexCoord2fv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord2i( int target, int s, int t );	( target s t -- )
EXTERN: "C" void glMultiTexCoord2iv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord2s( int target, short s, short t );	( target s t -- )
EXTERN: "C" void glMultiTexCoord2sv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord3d( int target, double s, double t, double r );	( target s t r -- )
EXTERN: "C" void glMultiTexCoord3dv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord3f( int target, float s, float t, float r );	( target s t r -- )
EXTERN: "C" void glMultiTexCoord3fv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord3i( int target, int s, int t, int r );	( target s t r -- )
EXTERN: "C" void glMultiTexCoord3iv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord3s( int target, short s, short t, short r );	( target s t r -- )
EXTERN: "C" void glMultiTexCoord3sv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord4d( int target, double s, double t, double r, double q );	( target s t r q -- )
EXTERN: "C" void glMultiTexCoord4dv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord4f( int target, float s, float t, float r, float q );	( target s t r q -- )
EXTERN: "C" void glMultiTexCoord4fv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord4i( int target, int s, int t, int r, int q );	( target s t r q -- )
EXTERN: "C" void glMultiTexCoord4iv( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord4s( int target, short s, short t, short r, short q );	( target s t r q -- )
EXTERN: "C" void glMultiTexCoord4sv( int target, void * v );	( target v -- )
EXTERN: "C" void glLoadTransposeMatrixd( void * m );	( m -- )
EXTERN: "C" void glLoadTransposeMatrixf( void * m );	( m -- )
EXTERN: "C" void glMultTransposeMatrixd( void * m );	( m -- )
EXTERN: "C" void glMultTransposeMatrixf( void * m );	( m -- )
EXTERN: "C" void glSampleCoverage( float value, char invert );	( value invert -- )
EXTERN: "C" void glActiveTextureARB( int texture );	( texture -- )
EXTERN: "C" void glClientActiveTextureARB( int texture );	( texture -- )
EXTERN: "C" void glMultiTexCoord1dARB( int target, double s );	( target s -- )
EXTERN: "C" void glMultiTexCoord1dvARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord1fARB( int target, float s );	( target s -- )
EXTERN: "C" void glMultiTexCoord1fvARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord1iARB( int target, int s );	( target s -- )
EXTERN: "C" void glMultiTexCoord1ivARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord1sARB( int target, short s );	( target s -- )
EXTERN: "C" void glMultiTexCoord1svARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord2dARB( int target, double s, double t );	( target s t -- )
EXTERN: "C" void glMultiTexCoord2dvARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord2fARB( int target, float s, float t );	( target s t -- )
EXTERN: "C" void glMultiTexCoord2fvARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord2iARB( int target, int s, int t );	( target s t -- )
EXTERN: "C" void glMultiTexCoord2ivARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord2sARB( int target, short s, short t );	( target s t -- )
EXTERN: "C" void glMultiTexCoord2svARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord3dARB( int target, double s, double t, double r );	( target s t r -- )
EXTERN: "C" void glMultiTexCoord3dvARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord3fARB( int target, float s, float t, float r );	( target s t r -- )
EXTERN: "C" void glMultiTexCoord3fvARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord3iARB( int target, int s, int t, int r );	( target s t r -- )
EXTERN: "C" void glMultiTexCoord3ivARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord3sARB( int target, short s, short t, short r );	( target s t r -- )
EXTERN: "C" void glMultiTexCoord3svARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord4dARB( int target, double s, double t, double r, double q );	( target s t r q -- )
EXTERN: "C" void glMultiTexCoord4dvARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord4fARB( int target, float s, float t, float r, float q );	( target s t r q -- )
EXTERN: "C" void glMultiTexCoord4fvARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord4iARB( int target, int s, int t, int r, int q );	( target s t r q -- )
EXTERN: "C" void glMultiTexCoord4ivARB( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord4sARB( int target, short s, short t, short r, short q );	( target s t r q -- )
EXTERN: "C" void glMultiTexCoord4svARB( int target, void * v );	( target v -- )
EXTERN: "C" void glBlendEquationSeparateATI( int modeRGB, int modeA );	( modeRGB modeA -- )
EXTERN: "C" void glEGLImageTargetTexture2DOES( int target, void * image );	( target image -- )
EXTERN: "C" void glEGLImageTargetRenderbufferStorageOES( int target, void * image );	( target image -- )
EXTERN: "C" void glBlendFuncSeparate( int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha );	( sfactorRGB dfactorRGB sfactorAlpha dfactorAlpha -- )
EXTERN: "C" void glMultiDrawArrays( int mode, void * first, void * count, int drawcount );	( mode first count drawcount -- )
EXTERN: "C" void glMultiDrawElements( int mode, void * count, int type, void * indices, int drawcount );	( mode count type indices drawcount -- )
EXTERN: "C" void glPointParameterf( int pname, float param );	( pname param -- )
EXTERN: "C" void glPointParameterfv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glPointParameteri( int pname, int param );	( pname param -- )
EXTERN: "C" void glPointParameteriv( int pname, void * params );	( pname params -- )
EXTERN: "C" void glFogCoordf( float coord );	( coord -- )
EXTERN: "C" void glFogCoordfv( void * coord );	( coord -- )
EXTERN: "C" void glFogCoordd( double coord );	( coord -- )
EXTERN: "C" void glFogCoorddv( void * coord );	( coord -- )
EXTERN: "C" void glFogCoordPointer( int type, int stride, void * pointer );	( type stride pointer -- )
EXTERN: "C" void glSecondaryColor3b( char red, char green, char blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3bv( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3d( double red, double green, double blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3dv( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3f( float red, float green, float blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3fv( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3i( int red, int green, int blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3iv( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3s( short red, short green, short blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3sv( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3ub( char red, char green, char blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3ubv( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3ui( int red, int green, int blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3uiv( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3us( short red, short green, short blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3usv( void * v );	( v -- )
EXTERN: "C" void glSecondaryColorPointer( int size, int type, int stride, void * pointer );	( size type stride pointer -- )
EXTERN: "C" void glWindowPos2d( double x, double y );	( x y -- )
EXTERN: "C" void glWindowPos2dv( void * v );	( v -- )
EXTERN: "C" void glWindowPos2f( float x, float y );	( x y -- )
EXTERN: "C" void glWindowPos2fv( void * v );	( v -- )
EXTERN: "C" void glWindowPos2i( int x, int y );	( x y -- )
EXTERN: "C" void glWindowPos2iv( void * v );	( v -- )
EXTERN: "C" void glWindowPos2s( short x, short y );	( x y -- )
EXTERN: "C" void glWindowPos2sv( void * v );	( v -- )
EXTERN: "C" void glWindowPos3d( double x, double y, double z );	( x y z -- )
EXTERN: "C" void glWindowPos3dv( void * v );	( v -- )
EXTERN: "C" void glWindowPos3f( float x, float y, float z );	( x y z -- )
EXTERN: "C" void glWindowPos3fv( void * v );	( v -- )
EXTERN: "C" void glWindowPos3i( int x, int y, int z );	( x y z -- )
EXTERN: "C" void glWindowPos3iv( void * v );	( v -- )
EXTERN: "C" void glWindowPos3s( short x, short y, short z );	( x y z -- )
EXTERN: "C" void glWindowPos3sv( void * v );	( v -- )
EXTERN: "C" void glGenQueries( int n, void * ids );	( n ids -- )
EXTERN: "C" void glDeleteQueries( int n, void * ids );	( n ids -- )
EXTERN: "C" char glIsQuery( int id );	( id -- )
EXTERN: "C" void glBeginQuery( int target, int id );	( target id -- )
EXTERN: "C" void glEndQuery( int target );	( target -- )
EXTERN: "C" void glGetQueryiv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetQueryObjectiv( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glGetQueryObjectuiv( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glBindBuffer( int target, int buffer );	( target buffer -- )
EXTERN: "C" void glDeleteBuffers( int n, void * buffers );	( n buffers -- )
EXTERN: "C" void glGenBuffers( int n, void * buffers );	( n buffers -- )
EXTERN: "C" char glIsBuffer( int buffer );	( buffer -- )
EXTERN: "C" void glBufferData( int target, long size, void * data, int usage );	( target size data usage -- )
EXTERN: "C" void glBufferSubData( int target, long offset, long size, void * data );	( target offset size data -- )
EXTERN: "C" void glGetBufferSubData( int target, long offset, long size, void * data );	( target offset size data -- )
EXTERN: "C" void * glMapBuffer( int target, int access );	( target access -- )
EXTERN: "C" char glUnmapBuffer( int target );	( target -- )
EXTERN: "C" void glGetBufferParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetBufferPointerv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glBlendEquationSeparate( int modeRGB, int modeAlpha );	( modeRGB modeAlpha -- )
EXTERN: "C" void glDrawBuffers( int n, void * bufs );	( n bufs -- )
EXTERN: "C" void glStencilOpSeparate( int face, int sfail, int dpfail, int dppass );	( face sfail dpfail dppass -- )
EXTERN: "C" void glStencilFuncSeparate( int face, int func, int ref, int mask );	( face func ref mask -- )
EXTERN: "C" void glStencilMaskSeparate( int face, int mask );	( face mask -- )
EXTERN: "C" void glAttachShader( int program, int shader );	( program shader -- )
EXTERN: "C" void glBindAttribLocation( int program, int index, char * name );	( program index name -- )
EXTERN: "C" void glCompileShader( int shader );	( shader -- )
EXTERN: "C" int glCreateProgram(  );	( -- )
EXTERN: "C" int glCreateShader( int type );	( type -- )
EXTERN: "C" void glDeleteProgram( int program );	( program -- )
EXTERN: "C" void glDeleteShader( int shader );	( shader -- )
EXTERN: "C" void glDetachShader( int program, int shader );	( program shader -- )
EXTERN: "C" void glDisableVertexAttribArray( int index );	( index -- )
EXTERN: "C" void glEnableVertexAttribArray( int index );	( index -- )
EXTERN: "C" void glGetActiveAttrib( int program, int index, int bufSize, void * length, void * size, void * type, void * name );	( program index bufSize length size type name -- )
EXTERN: "C" void glGetActiveUniform( int program, int index, int bufSize, void * length, void * size, void * type, void * name );	( program index bufSize length size type name -- )
EXTERN: "C" void glGetAttachedShaders( int program, int maxCount, void * count, void * shaders );	( program maxCount count shaders -- )
EXTERN: "C" int glGetAttribLocation( int program, char * name );	( program name -- )
EXTERN: "C" void glGetProgramiv( int program, int pname, void * params );	( program pname params -- )
EXTERN: "C" void glGetProgramInfoLog( int program, int bufSize, void * length, void * infoLog );	( program bufSize length infoLog -- )
EXTERN: "C" void glGetShaderiv( int shader, int pname, void * params );	( shader pname params -- )
EXTERN: "C" void glGetShaderInfoLog( int shader, int bufSize, void * length, void * infoLog );	( shader bufSize length infoLog -- )
EXTERN: "C" void glGetShaderSource( int shader, int bufSize, void * length, void * source );	( shader bufSize length source -- )
EXTERN: "C" int glGetUniformLocation( int program, char * name );	( program name -- )
EXTERN: "C" void glGetUniformfv( int program, int location, void * params );	( program location params -- )
EXTERN: "C" void glGetUniformiv( int program, int location, void * params );	( program location params -- )
EXTERN: "C" void glGetVertexAttribdv( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribfv( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribiv( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribPointerv( int index, int pname, void * pointer );	( index pname pointer -- )
EXTERN: "C" char glIsProgram( int program );	( program -- )
EXTERN: "C" char glIsShader( int shader );	( shader -- )
EXTERN: "C" void glLinkProgram( int program );	( program -- )
EXTERN: "C" void glShaderSource( int shader, int count, void * string, void * length );	( shader count string length -- )
EXTERN: "C" void glUseProgram( int program );	( program -- )
EXTERN: "C" void glUniform1f( int location, float v0 );	( location v0 -- )
EXTERN: "C" void glUniform2f( int location, float v0, float v1 );	( location v0 v1 -- )
EXTERN: "C" void glUniform3f( int location, float v0, float v1, float v2 );	( location v0 v1 v2 -- )
EXTERN: "C" void glUniform4f( int location, float v0, float v1, float v2, float v3 );	( location v0 v1 v2 v3 -- )
EXTERN: "C" void glUniform1i( int location, int v0 );	( location v0 -- )
EXTERN: "C" void glUniform2i( int location, int v0, int v1 );	( location v0 v1 -- )
EXTERN: "C" void glUniform3i( int location, int v0, int v1, int v2 );	( location v0 v1 v2 -- )
EXTERN: "C" void glUniform4i( int location, int v0, int v1, int v2, int v3 );	( location v0 v1 v2 v3 -- )
EXTERN: "C" void glUniform1fv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2fv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3fv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4fv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform1iv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2iv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3iv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4iv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniformMatrix2fv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix3fv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix4fv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glValidateProgram( int program );	( program -- )
EXTERN: "C" void glVertexAttrib1d( int index, double x );	( index x -- )
EXTERN: "C" void glVertexAttrib1dv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib1f( int index, float x );	( index x -- )
EXTERN: "C" void glVertexAttrib1fv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib1s( int index, short x );	( index x -- )
EXTERN: "C" void glVertexAttrib1sv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2d( int index, double x, double y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2dv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2f( int index, float x, float y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2fv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2s( int index, short x, short y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2sv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3d( int index, double x, double y, double z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3dv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3f( int index, float x, float y, float z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3fv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3s( int index, short x, short y, short z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3sv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4Nbv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4Niv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4Nsv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4Nub( int index, char x, char y, char z, char w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4Nubv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4Nuiv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4Nusv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4bv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4d( int index, double x, double y, double z, double w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4dv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4f( int index, float x, float y, float z, float w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4fv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4iv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4s( int index, short x, short y, short z, short w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4sv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4ubv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4uiv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4usv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribPointer( int index, int size, int type, char normalized, int stride, void * pointer );	( index size type normalized stride pointer -- )
EXTERN: "C" void glUniformMatrix2x3fv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix3x2fv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix2x4fv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix4x2fv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix3x4fv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix4x3fv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glColorMaski( int index, char r, char g, char b, char a );	( index r g b a -- )
EXTERN: "C" void glGetBooleani_v( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glGetIntegeri_v( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glEnablei( int target, int index );	( target index -- )
EXTERN: "C" void glDisablei( int target, int index );	( target index -- )
EXTERN: "C" char glIsEnabledi( int target, int index );	( target index -- )
EXTERN: "C" void glBeginTransformFeedback( int primitiveMode );	( primitiveMode -- )
EXTERN: "C" void glEndTransformFeedback(  );	( -- )
EXTERN: "C" void glBindBufferRange( int target, int index, int buffer, long offset, long size );	( target index buffer offset size -- )
EXTERN: "C" void glBindBufferBase( int target, int index, int buffer );	( target index buffer -- )
EXTERN: "C" void glTransformFeedbackVaryings( int program, int count, void * varyings, int bufferMode );	( program count varyings bufferMode -- )
EXTERN: "C" void glGetTransformFeedbackVarying( int program, int index, int bufSize, void * length, void * size, void * type, void * name );	( program index bufSize length size type name -- )
EXTERN: "C" void glClampColor( int target, int clamp );	( target clamp -- )
EXTERN: "C" void glBeginConditionalRender( int id, int mode );	( id mode -- )
EXTERN: "C" void glEndConditionalRender(  );	( -- )
EXTERN: "C" void glVertexAttribIPointer( int index, int size, int type, int stride, void * pointer );	( index size type stride pointer -- )
EXTERN: "C" void glGetVertexAttribIiv( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribIuiv( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glVertexAttribI1i( int index, int x );	( index x -- )
EXTERN: "C" void glVertexAttribI2i( int index, int x, int y );	( index x y -- )
EXTERN: "C" void glVertexAttribI3i( int index, int x, int y, int z );	( index x y z -- )
EXTERN: "C" void glVertexAttribI4i( int index, int x, int y, int z, int w );	( index x y z w -- )
EXTERN: "C" void glVertexAttribI1ui( int index, int x );	( index x -- )
EXTERN: "C" void glVertexAttribI2ui( int index, int x, int y );	( index x y -- )
EXTERN: "C" void glVertexAttribI3ui( int index, int x, int y, int z );	( index x y z -- )
EXTERN: "C" void glVertexAttribI4ui( int index, int x, int y, int z, int w );	( index x y z w -- )
EXTERN: "C" void glVertexAttribI1iv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI2iv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI3iv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4iv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI1uiv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI2uiv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI3uiv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4uiv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4bv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4sv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4ubv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4usv( int index, void * v );	( index v -- )
EXTERN: "C" void glGetUniformuiv( int program, int location, void * params );	( program location params -- )
EXTERN: "C" void glBindFragDataLocation( int program, int color, char * name );	( program color name -- )
EXTERN: "C" int glGetFragDataLocation( int program, char * name );	( program name -- )
EXTERN: "C" void glUniform1ui( int location, int v0 );	( location v0 -- )
EXTERN: "C" void glUniform2ui( int location, int v0, int v1 );	( location v0 v1 -- )
EXTERN: "C" void glUniform3ui( int location, int v0, int v1, int v2 );	( location v0 v1 v2 -- )
EXTERN: "C" void glUniform4ui( int location, int v0, int v1, int v2, int v3 );	( location v0 v1 v2 v3 -- )
EXTERN: "C" void glUniform1uiv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2uiv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3uiv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4uiv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glTexParameterIiv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glTexParameterIuiv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexParameterIiv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexParameterIuiv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glClearBufferiv( int buffer, int drawbuffer, void * value );	( buffer drawbuffer value -- )
EXTERN: "C" void glClearBufferuiv( int buffer, int drawbuffer, void * value );	( buffer drawbuffer value -- )
EXTERN: "C" void glClearBufferfv( int buffer, int drawbuffer, void * value );	( buffer drawbuffer value -- )
EXTERN: "C" void glClearBufferfi( int buffer, int drawbuffer, float depth, int stencil );	( buffer drawbuffer depth stencil -- )
EXTERN: "C" void * glGetStringi( int name, int index );	( name index -- )
EXTERN: "C" char glIsRenderbuffer( int renderbuffer );	( renderbuffer -- )
EXTERN: "C" void glBindRenderbuffer( int target, int renderbuffer );	( target renderbuffer -- )
EXTERN: "C" void glDeleteRenderbuffers( int n, void * renderbuffers );	( n renderbuffers -- )
EXTERN: "C" void glGenRenderbuffers( int n, void * renderbuffers );	( n renderbuffers -- )
EXTERN: "C" void glRenderbufferStorage( int target, int internalformat, int width, int height );	( target internalformat width height -- )
EXTERN: "C" void glGetRenderbufferParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" char glIsFramebuffer( int framebuffer );	( framebuffer -- )
EXTERN: "C" void glBindFramebuffer( int target, int framebuffer );	( target framebuffer -- )
EXTERN: "C" void glDeleteFramebuffers( int n, void * framebuffers );	( n framebuffers -- )
EXTERN: "C" void glGenFramebuffers( int n, void * framebuffers );	( n framebuffers -- )
EXTERN: "C" int glCheckFramebufferStatus( int target );	( target -- )
EXTERN: "C" void glFramebufferTexture1D( int target, int attachment, int textarget, int texture, int level );	( target attachment textarget texture level -- )
EXTERN: "C" void glFramebufferTexture2D( int target, int attachment, int textarget, int texture, int level );	( target attachment textarget texture level -- )
EXTERN: "C" void glFramebufferTexture3D( int target, int attachment, int textarget, int texture, int level, int zoffset );	( target attachment textarget texture level zoffset -- )
EXTERN: "C" void glFramebufferRenderbuffer( int target, int attachment, int renderbuffertarget, int renderbuffer );	( target attachment renderbuffertarget renderbuffer -- )
EXTERN: "C" void glGetFramebufferAttachmentParameteriv( int target, int attachment, int pname, void * params );	( target attachment pname params -- )
EXTERN: "C" void glGenerateMipmap( int target );	( target -- )
EXTERN: "C" void glBlitFramebuffer( int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter );	( srcX0 srcY0 srcX1 srcY1 dstX0 dstY0 dstX1 dstY1 mask filter -- )
EXTERN: "C" void glRenderbufferStorageMultisample( int target, int samples, int internalformat, int width, int height );	( target samples internalformat width height -- )
EXTERN: "C" void glFramebufferTextureLayer( int target, int attachment, int texture, int level, int layer );	( target attachment texture level layer -- )
EXTERN: "C" void * glMapBufferRange( int target, long offset, long length, int access );	( target offset length access -- )
EXTERN: "C" void glFlushMappedBufferRange( int target, long offset, long length );	( target offset length -- )
EXTERN: "C" void glBindVertexArray( int array );	( array -- )
EXTERN: "C" void glDeleteVertexArrays( int n, void * arrays );	( n arrays -- )
EXTERN: "C" void glGenVertexArrays( int n, void * arrays );	( n arrays -- )
EXTERN: "C" char glIsVertexArray( int array );	( array -- )
EXTERN: "C" void glDrawArraysInstanced( int mode, int first, int count, int instancecount );	( mode first count instancecount -- )
EXTERN: "C" void glDrawElementsInstanced( int mode, int count, int type, void * indices, int instancecount );	( mode count type indices instancecount -- )
EXTERN: "C" void glTexBuffer( int target, int internalformat, int buffer );	( target internalformat buffer -- )
EXTERN: "C" void glPrimitiveRestartIndex( int index );	( index -- )
EXTERN: "C" void glCopyBufferSubData( int readTarget, int writeTarget, long readOffset, long writeOffset, long size );	( readTarget writeTarget readOffset writeOffset size -- )
EXTERN: "C" void glGetUniformIndices( int program, int uniformCount, void * uniformNames, void * uniformIndices );	( program uniformCount uniformNames uniformIndices -- )
EXTERN: "C" void glGetActiveUniformsiv( int program, int uniformCount, void * uniformIndices, int pname, void * params );	( program uniformCount uniformIndices pname params -- )
EXTERN: "C" void glGetActiveUniformName( int program, int uniformIndex, int bufSize, void * length, void * uniformName );	( program uniformIndex bufSize length uniformName -- )
EXTERN: "C" int glGetUniformBlockIndex( int program, char * uniformBlockName );	( program uniformBlockName -- )
EXTERN: "C" void glGetActiveUniformBlockiv( int program, int uniformBlockIndex, int pname, void * params );	( program uniformBlockIndex pname params -- )
EXTERN: "C" void glGetActiveUniformBlockName( int program, int uniformBlockIndex, int bufSize, void * length, void * uniformBlockName );	( program uniformBlockIndex bufSize length uniformBlockName -- )
EXTERN: "C" void glUniformBlockBinding( int program, int uniformBlockIndex, int uniformBlockBinding );	( program uniformBlockIndex uniformBlockBinding -- )
EXTERN: "C" void glDrawElementsBaseVertex( int mode, int count, int type, void * indices, int basevertex );	( mode count type indices basevertex -- )
EXTERN: "C" void glDrawRangeElementsBaseVertex( int mode, int start, int end, int count, int type, void * indices, int basevertex );	( mode start end count type indices basevertex -- )
EXTERN: "C" void glDrawElementsInstancedBaseVertex( int mode, int count, int type, void * indices, int instancecount, int basevertex );	( mode count type indices instancecount basevertex -- )
EXTERN: "C" void glMultiDrawElementsBaseVertex( int mode, void * count, int type, void * indices, int drawcount, void * basevertex );	( mode count type indices drawcount basevertex -- )
EXTERN: "C" void glProvokingVertex( int mode );	( mode -- )
EXTERN: "C" void * glFenceSync( int condition, int flags );	( condition flags -- )
EXTERN: "C" char glIsSync( void * sync );	( sync -- )
EXTERN: "C" void glDeleteSync( void * sync );	( sync -- )
EXTERN: "C" int glClientWaitSync( void * sync, int flags, long long timeout );	( sync flags timeout -- )
EXTERN: "C" void glWaitSync( void * sync, int flags, long long timeout );	( sync flags timeout -- )
EXTERN: "C" void glGetInteger64v( int pname, void * data );	( pname data -- )
EXTERN: "C" void glGetSynciv( void * sync, int pname, int bufSize, void * length, void * values );	( sync pname bufSize length values -- )
EXTERN: "C" void glGetInteger64i_v( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glGetBufferParameteri64v( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glFramebufferTexture( int target, int attachment, int texture, int level );	( target attachment texture level -- )
EXTERN: "C" void glTexImage2DMultisample( int target, int samples, int internalformat, int width, int height, char fixedsamplelocations );	( target samples internalformat width height fixedsamplelocations -- )
EXTERN: "C" void glTexImage3DMultisample( int target, int samples, int internalformat, int width, int height, int depth, char fixedsamplelocations );	( target samples internalformat width height depth fixedsamplelocations -- )
EXTERN: "C" void glGetMultisamplefv( int pname, int index, void * val );	( pname index val -- )
EXTERN: "C" void glSampleMaski( int maskNumber, int mask );	( maskNumber mask -- )
EXTERN: "C" void glBindFragDataLocationIndexed( int program, int colorNumber, int index, char * name );	( program colorNumber index name -- )
EXTERN: "C" int glGetFragDataIndex( int program, char * name );	( program name -- )
EXTERN: "C" void glGenSamplers( int count, void * samplers );	( count samplers -- )
EXTERN: "C" void glDeleteSamplers( int count, void * samplers );	( count samplers -- )
EXTERN: "C" char glIsSampler( int sampler );	( sampler -- )
EXTERN: "C" void glBindSampler( int unit, int sampler );	( unit sampler -- )
EXTERN: "C" void glSamplerParameteri( int sampler, int pname, int param );	( sampler pname param -- )
EXTERN: "C" void glSamplerParameteriv( int sampler, int pname, void * param );	( sampler pname param -- )
EXTERN: "C" void glSamplerParameterf( int sampler, int pname, float param );	( sampler pname param -- )
EXTERN: "C" void glSamplerParameterfv( int sampler, int pname, void * param );	( sampler pname param -- )
EXTERN: "C" void glSamplerParameterIiv( int sampler, int pname, void * param );	( sampler pname param -- )
EXTERN: "C" void glSamplerParameterIuiv( int sampler, int pname, void * param );	( sampler pname param -- )
EXTERN: "C" void glGetSamplerParameteriv( int sampler, int pname, void * params );	( sampler pname params -- )
EXTERN: "C" void glGetSamplerParameterIiv( int sampler, int pname, void * params );	( sampler pname params -- )
EXTERN: "C" void glGetSamplerParameterfv( int sampler, int pname, void * params );	( sampler pname params -- )
EXTERN: "C" void glGetSamplerParameterIuiv( int sampler, int pname, void * params );	( sampler pname params -- )
EXTERN: "C" void glQueryCounter( int id, int target );	( id target -- )
EXTERN: "C" void glGetQueryObjecti64v( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glGetQueryObjectui64v( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glVertexAttribDivisor( int index, int divisor );	( index divisor -- )
EXTERN: "C" void glVertexAttribP1ui( int index, int type, char normalized, int value );	( index type normalized value -- )
EXTERN: "C" void glVertexAttribP1uiv( int index, int type, char normalized, void * value );	( index type normalized value -- )
EXTERN: "C" void glVertexAttribP2ui( int index, int type, char normalized, int value );	( index type normalized value -- )
EXTERN: "C" void glVertexAttribP2uiv( int index, int type, char normalized, void * value );	( index type normalized value -- )
EXTERN: "C" void glVertexAttribP3ui( int index, int type, char normalized, int value );	( index type normalized value -- )
EXTERN: "C" void glVertexAttribP3uiv( int index, int type, char normalized, void * value );	( index type normalized value -- )
EXTERN: "C" void glVertexAttribP4ui( int index, int type, char normalized, int value );	( index type normalized value -- )
EXTERN: "C" void glVertexAttribP4uiv( int index, int type, char normalized, void * value );	( index type normalized value -- )
EXTERN: "C" void glVertexP2ui( int type, int value );	( type value -- )
EXTERN: "C" void glVertexP2uiv( int type, void * value );	( type value -- )
EXTERN: "C" void glVertexP3ui( int type, int value );	( type value -- )
EXTERN: "C" void glVertexP3uiv( int type, void * value );	( type value -- )
EXTERN: "C" void glVertexP4ui( int type, int value );	( type value -- )
EXTERN: "C" void glVertexP4uiv( int type, void * value );	( type value -- )
EXTERN: "C" void glTexCoordP1ui( int type, int coords );	( type coords -- )
EXTERN: "C" void glTexCoordP1uiv( int type, void * coords );	( type coords -- )
EXTERN: "C" void glTexCoordP2ui( int type, int coords );	( type coords -- )
EXTERN: "C" void glTexCoordP2uiv( int type, void * coords );	( type coords -- )
EXTERN: "C" void glTexCoordP3ui( int type, int coords );	( type coords -- )
EXTERN: "C" void glTexCoordP3uiv( int type, void * coords );	( type coords -- )
EXTERN: "C" void glTexCoordP4ui( int type, int coords );	( type coords -- )
EXTERN: "C" void glTexCoordP4uiv( int type, void * coords );	( type coords -- )
EXTERN: "C" void glMultiTexCoordP1ui( int texture, int type, int coords );	( texture type coords -- )
EXTERN: "C" void glMultiTexCoordP1uiv( int texture, int type, void * coords );	( texture type coords -- )
EXTERN: "C" void glMultiTexCoordP2ui( int texture, int type, int coords );	( texture type coords -- )
EXTERN: "C" void glMultiTexCoordP2uiv( int texture, int type, void * coords );	( texture type coords -- )
EXTERN: "C" void glMultiTexCoordP3ui( int texture, int type, int coords );	( texture type coords -- )
EXTERN: "C" void glMultiTexCoordP3uiv( int texture, int type, void * coords );	( texture type coords -- )
EXTERN: "C" void glMultiTexCoordP4ui( int texture, int type, int coords );	( texture type coords -- )
EXTERN: "C" void glMultiTexCoordP4uiv( int texture, int type, void * coords );	( texture type coords -- )
EXTERN: "C" void glNormalP3ui( int type, int coords );	( type coords -- )
EXTERN: "C" void glNormalP3uiv( int type, void * coords );	( type coords -- )
EXTERN: "C" void glColorP3ui( int type, int color );	( type color -- )
EXTERN: "C" void glColorP3uiv( int type, void * color );	( type color -- )
EXTERN: "C" void glColorP4ui( int type, int color );	( type color -- )
EXTERN: "C" void glColorP4uiv( int type, void * color );	( type color -- )
EXTERN: "C" void glSecondaryColorP3ui( int type, int color );	( type color -- )
EXTERN: "C" void glSecondaryColorP3uiv( int type, void * color );	( type color -- )
EXTERN: "C" void glMinSampleShading( float value );	( value -- )
EXTERN: "C" void glBlendEquationi( int buf, int mode );	( buf mode -- )
EXTERN: "C" void glBlendEquationSeparatei( int buf, int modeRGB, int modeAlpha );	( buf modeRGB modeAlpha -- )
EXTERN: "C" void glBlendFunci( int buf, int src, int dst );	( buf src dst -- )
EXTERN: "C" void glBlendFuncSeparatei( int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha );	( buf srcRGB dstRGB srcAlpha dstAlpha -- )
EXTERN: "C" void glDrawArraysIndirect( int mode, void * indirect );	( mode indirect -- )
EXTERN: "C" void glDrawElementsIndirect( int mode, int type, void * indirect );	( mode type indirect -- )
EXTERN: "C" void glUniform1d( int location, double x );	( location x -- )
EXTERN: "C" void glUniform2d( int location, double x, double y );	( location x y -- )
EXTERN: "C" void glUniform3d( int location, double x, double y, double z );	( location x y z -- )
EXTERN: "C" void glUniform4d( int location, double x, double y, double z, double w );	( location x y z w -- )
EXTERN: "C" void glUniform1dv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2dv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3dv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4dv( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniformMatrix2dv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix3dv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix4dv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix2x3dv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix2x4dv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix3x2dv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix3x4dv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix4x2dv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix4x3dv( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glGetUniformdv( int program, int location, void * params );	( program location params -- )
EXTERN: "C" int glGetSubroutineUniformLocation( int program, int shadertype, char * name );	( program shadertype name -- )
EXTERN: "C" int glGetSubroutineIndex( int program, int shadertype, char * name );	( program shadertype name -- )
EXTERN: "C" void glGetActiveSubroutineUniformiv( int program, int shadertype, int index, int pname, void * values );	( program shadertype index pname values -- )
EXTERN: "C" void glGetActiveSubroutineUniformName( int program, int shadertype, int index, int bufsize, void * length, void * name );	( program shadertype index bufsize length name -- )
EXTERN: "C" void glGetActiveSubroutineName( int program, int shadertype, int index, int bufsize, void * length, void * name );	( program shadertype index bufsize length name -- )
EXTERN: "C" void glUniformSubroutinesuiv( int shadertype, int count, void * indices );	( shadertype count indices -- )
EXTERN: "C" void glGetUniformSubroutineuiv( int shadertype, int location, void * params );	( shadertype location params -- )
EXTERN: "C" void glGetProgramStageiv( int program, int shadertype, int pname, void * values );	( program shadertype pname values -- )
EXTERN: "C" void glPatchParameteri( int pname, int value );	( pname value -- )
EXTERN: "C" void glPatchParameterfv( int pname, void * values );	( pname values -- )
EXTERN: "C" void glBindTransformFeedback( int target, int id );	( target id -- )
EXTERN: "C" void glDeleteTransformFeedbacks( int n, void * ids );	( n ids -- )
EXTERN: "C" void glGenTransformFeedbacks( int n, void * ids );	( n ids -- )
EXTERN: "C" char glIsTransformFeedback( int id );	( id -- )
EXTERN: "C" void glPauseTransformFeedback(  );	( -- )
EXTERN: "C" void glResumeTransformFeedback(  );	( -- )
EXTERN: "C" void glDrawTransformFeedback( int mode, int id );	( mode id -- )
EXTERN: "C" void glDrawTransformFeedbackStream( int mode, int id, int stream );	( mode id stream -- )
EXTERN: "C" void glBeginQueryIndexed( int target, int index, int id );	( target index id -- )
EXTERN: "C" void glEndQueryIndexed( int target, int index );	( target index -- )
EXTERN: "C" void glGetQueryIndexediv( int target, int index, int pname, void * params );	( target index pname params -- )
EXTERN: "C" void glReleaseShaderCompiler(  );	( -- )
EXTERN: "C" void glShaderBinary( int count, void * shaders, int binaryformat, void * binary, int length );	( count shaders binaryformat binary length -- )
EXTERN: "C" void glGetShaderPrecisionFormat( int shadertype, int precisiontype, void * range, void * precision );	( shadertype precisiontype range precision -- )
EXTERN: "C" void glDepthRangef( float n, float f );	( n f -- )
EXTERN: "C" void glClearDepthf( float d );	( d -- )
EXTERN: "C" void glGetProgramBinary( int program, int bufSize, void * length, void * binaryFormat, void * binary );	( program bufSize length binaryFormat binary -- )
EXTERN: "C" void glProgramBinary( int program, int binaryFormat, void * binary, int length );	( program binaryFormat binary length -- )
EXTERN: "C" void glProgramParameteri( int program, int pname, int value );	( program pname value -- )
EXTERN: "C" void glUseProgramStages( int pipeline, int stages, int program );	( pipeline stages program -- )
EXTERN: "C" void glActiveShaderProgram( int pipeline, int program );	( pipeline program -- )
EXTERN: "C" int glCreateShaderProgramv( int type, int count, void * strings );	( type count strings -- )
EXTERN: "C" void glBindProgramPipeline( int pipeline );	( pipeline -- )
EXTERN: "C" void glDeleteProgramPipelines( int n, void * pipelines );	( n pipelines -- )
EXTERN: "C" void glGenProgramPipelines( int n, void * pipelines );	( n pipelines -- )
EXTERN: "C" char glIsProgramPipeline( int pipeline );	( pipeline -- )
EXTERN: "C" void glGetProgramPipelineiv( int pipeline, int pname, void * params );	( pipeline pname params -- )
EXTERN: "C" void glProgramUniform1i( int program, int location, int v0 );	( program location v0 -- )
EXTERN: "C" void glProgramUniform1iv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform1f( int program, int location, float v0 );	( program location v0 -- )
EXTERN: "C" void glProgramUniform1fv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform1d( int program, int location, double v0 );	( program location v0 -- )
EXTERN: "C" void glProgramUniform1dv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform1ui( int program, int location, int v0 );	( program location v0 -- )
EXTERN: "C" void glProgramUniform1uiv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2i( int program, int location, int v0, int v1 );	( program location v0 v1 -- )
EXTERN: "C" void glProgramUniform2iv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2f( int program, int location, float v0, float v1 );	( program location v0 v1 -- )
EXTERN: "C" void glProgramUniform2fv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2d( int program, int location, double v0, double v1 );	( program location v0 v1 -- )
EXTERN: "C" void glProgramUniform2dv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2ui( int program, int location, int v0, int v1 );	( program location v0 v1 -- )
EXTERN: "C" void glProgramUniform2uiv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3i( int program, int location, int v0, int v1, int v2 );	( program location v0 v1 v2 -- )
EXTERN: "C" void glProgramUniform3iv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3f( int program, int location, float v0, float v1, float v2 );	( program location v0 v1 v2 -- )
EXTERN: "C" void glProgramUniform3fv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3d( int program, int location, double v0, double v1, double v2 );	( program location v0 v1 v2 -- )
EXTERN: "C" void glProgramUniform3dv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3ui( int program, int location, int v0, int v1, int v2 );	( program location v0 v1 v2 -- )
EXTERN: "C" void glProgramUniform3uiv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4i( int program, int location, int v0, int v1, int v2, int v3 );	( program location v0 v1 v2 v3 -- )
EXTERN: "C" void glProgramUniform4iv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4f( int program, int location, float v0, float v1, float v2, float v3 );	( program location v0 v1 v2 v3 -- )
EXTERN: "C" void glProgramUniform4fv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4d( int program, int location, double v0, double v1, double v2, double v3 );	( program location v0 v1 v2 v3 -- )
EXTERN: "C" void glProgramUniform4dv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4ui( int program, int location, int v0, int v1, int v2, int v3 );	( program location v0 v1 v2 v3 -- )
EXTERN: "C" void glProgramUniform4uiv( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniformMatrix2fv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3fv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4fv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix2dv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3dv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4dv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix2x3fv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3x2fv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix2x4fv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4x2fv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3x4fv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4x3fv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix2x3dv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3x2dv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix2x4dv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4x2dv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3x4dv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4x3dv( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glValidateProgramPipeline( int pipeline );	( pipeline -- )
EXTERN: "C" void glGetProgramPipelineInfoLog( int pipeline, int bufSize, void * length, void * infoLog );	( pipeline bufSize length infoLog -- )
EXTERN: "C" void glVertexAttribL1d( int index, double x );	( index x -- )
EXTERN: "C" void glVertexAttribL2d( int index, double x, double y );	( index x y -- )
EXTERN: "C" void glVertexAttribL3d( int index, double x, double y, double z );	( index x y z -- )
EXTERN: "C" void glVertexAttribL4d( int index, double x, double y, double z, double w );	( index x y z w -- )
EXTERN: "C" void glVertexAttribL1dv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL2dv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL3dv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL4dv( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribLPointer( int index, int size, int type, int stride, void * pointer );	( index size type stride pointer -- )
EXTERN: "C" void glGetVertexAttribLdv( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glViewportArrayv( int first, int count, void * v );	( first count v -- )
EXTERN: "C" void glViewportIndexedf( int index, float x, float y, float w, float h );	( index x y w h -- )
EXTERN: "C" void glViewportIndexedfv( int index, void * v );	( index v -- )
EXTERN: "C" void glScissorArrayv( int first, int count, void * v );	( first count v -- )
EXTERN: "C" void glScissorIndexed( int index, int left, int bottom, int width, int height );	( index left bottom width height -- )
EXTERN: "C" void glScissorIndexedv( int index, void * v );	( index v -- )
EXTERN: "C" void glDepthRangeArrayv( int first, int count, void * v );	( first count v -- )
EXTERN: "C" void glDepthRangeIndexed( int index, double n, double f );	( index n f -- )
EXTERN: "C" void glGetFloati_v( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glGetDoublei_v( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glDrawArraysInstancedBaseInstance( int mode, int first, int count, int instancecount, int baseinstance );	( mode first count instancecount baseinstance -- )
EXTERN: "C" void glDrawElementsInstancedBaseInstance( int mode, int count, int type, void * indices, int instancecount, int baseinstance );	( mode count type indices instancecount baseinstance -- )
EXTERN: "C" void glDrawElementsInstancedBaseVertexBaseInstance( int mode, int count, int type, void * indices, int instancecount, int basevertex, int baseinstance );	( mode count type indices instancecount basevertex baseinstance -- )
EXTERN: "C" void glGetInternalformativ( int target, int internalformat, int pname, int bufSize, void * params );	( target internalformat pname bufSize params -- )
EXTERN: "C" void glGetActiveAtomicCounterBufferiv( int program, int bufferIndex, int pname, void * params );	( program bufferIndex pname params -- )
EXTERN: "C" void glBindImageTexture( int unit, int texture, int level, char layered, int layer, int access, int format );	( unit texture level layered layer access format -- )
EXTERN: "C" void glMemoryBarrier( int barriers );	( barriers -- )
EXTERN: "C" void glTexStorage1D( int target, int levels, int internalformat, int width );	( target levels internalformat width -- )
EXTERN: "C" void glTexStorage2D( int target, int levels, int internalformat, int width, int height );	( target levels internalformat width height -- )
EXTERN: "C" void glTexStorage3D( int target, int levels, int internalformat, int width, int height, int depth );	( target levels internalformat width height depth -- )
EXTERN: "C" void glDrawTransformFeedbackInstanced( int mode, int id, int instancecount );	( mode id instancecount -- )
EXTERN: "C" void glDrawTransformFeedbackStreamInstanced( int mode, int id, int stream, int instancecount );	( mode id stream instancecount -- )
EXTERN: "C" void glClearBufferData( int target, int internalformat, int format, int type, void * data );	( target internalformat format type data -- )
EXTERN: "C" void glClearBufferSubData( int target, int internalformat, long offset, long size, int format, int type, void * data );	( target internalformat offset size format type data -- )
EXTERN: "C" void glDispatchCompute( int num_groups_x, int num_groups_y, int num_groups_z );	( num_groups_x num_groups_y num_groups_z -- )
EXTERN: "C" void glDispatchComputeIndirect( long indirect );	( indirect -- )
EXTERN: "C" void glCopyImageSubData( int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth );	( srcName srcTarget srcLevel srcX srcY srcZ dstName dstTarget dstLevel dstX dstY dstZ srcWidth srcHeight srcDepth -- )
EXTERN: "C" void glFramebufferParameteri( int target, int pname, int param );	( target pname param -- )
EXTERN: "C" void glGetFramebufferParameteriv( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetInternalformati64v( int target, int internalformat, int pname, int bufSize, void * params );	( target internalformat pname bufSize params -- )
EXTERN: "C" void glInvalidateTexSubImage( int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth );	( texture level xoffset yoffset zoffset width height depth -- )
EXTERN: "C" void glInvalidateTexImage( int texture, int level );	( texture level -- )
EXTERN: "C" void glInvalidateBufferSubData( int buffer, long offset, long length );	( buffer offset length -- )
EXTERN: "C" void glInvalidateBufferData( int buffer );	( buffer -- )
EXTERN: "C" void glInvalidateFramebuffer( int target, int numAttachments, void * attachments );	( target numAttachments attachments -- )
EXTERN: "C" void glInvalidateSubFramebuffer( int target, int numAttachments, void * attachments, int x, int y, int width, int height );	( target numAttachments attachments x y width height -- )
EXTERN: "C" void glMultiDrawArraysIndirect( int mode, void * indirect, int drawcount, int stride );	( mode indirect drawcount stride -- )
EXTERN: "C" void glMultiDrawElementsIndirect( int mode, int type, void * indirect, int drawcount, int stride );	( mode type indirect drawcount stride -- )
EXTERN: "C" void glGetProgramInterfaceiv( int program, int programInterface, int pname, void * params );	( program programInterface pname params -- )
EXTERN: "C" int glGetProgramResourceIndex( int program, int programInterface, char * name );	( program programInterface name -- )
EXTERN: "C" void glGetProgramResourceName( int program, int programInterface, int index, int bufSize, void * length, void * name );	( program programInterface index bufSize length name -- )
EXTERN: "C" void glGetProgramResourceiv( int program, int programInterface, int index, int propCount, void * props, int bufSize, void * length, void * params );	( program programInterface index propCount props bufSize length params -- )
EXTERN: "C" int glGetProgramResourceLocation( int program, int programInterface, char * name );	( program programInterface name -- )
EXTERN: "C" int glGetProgramResourceLocationIndex( int program, int programInterface, char * name );	( program programInterface name -- )
EXTERN: "C" void glShaderStorageBlockBinding( int program, int storageBlockIndex, int storageBlockBinding );	( program storageBlockIndex storageBlockBinding -- )
EXTERN: "C" void glTexBufferRange( int target, int internalformat, int buffer, long offset, long size );	( target internalformat buffer offset size -- )
EXTERN: "C" void glTexStorage2DMultisample( int target, int samples, int internalformat, int width, int height, char fixedsamplelocations );	( target samples internalformat width height fixedsamplelocations -- )
EXTERN: "C" void glTexStorage3DMultisample( int target, int samples, int internalformat, int width, int height, int depth, char fixedsamplelocations );	( target samples internalformat width height depth fixedsamplelocations -- )
EXTERN: "C" void glTextureView( int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers );	( texture target origtexture internalformat minlevel numlevels minlayer numlayers -- )
EXTERN: "C" void glBindVertexBuffer( int bindingindex, int buffer, long offset, int stride );	( bindingindex buffer offset stride -- )
EXTERN: "C" void glVertexAttribFormat( int attribindex, int size, int type, char normalized, int relativeoffset );	( attribindex size type normalized relativeoffset -- )
EXTERN: "C" void glVertexAttribIFormat( int attribindex, int size, int type, int relativeoffset );	( attribindex size type relativeoffset -- )
EXTERN: "C" void glVertexAttribLFormat( int attribindex, int size, int type, int relativeoffset );	( attribindex size type relativeoffset -- )
EXTERN: "C" void glVertexAttribBinding( int attribindex, int bindingindex );	( attribindex bindingindex -- )
EXTERN: "C" void glVertexBindingDivisor( int bindingindex, int divisor );	( bindingindex divisor -- )
EXTERN: "C" void glDebugMessageControl( int source, int type, int severity, int count, void * ids, char enabled );	( source type severity count ids enabled -- )
EXTERN: "C" void glDebugMessageInsert( int source, int type, int id, int severity, int length, char * buf );	( source type id severity length buf -- )
EXTERN: "C" void glDebugMessageCallback( void * callback, void * userParam );	( callback userParam -- )
EXTERN: "C" int glGetDebugMessageLog( int count, int bufSize, void * sources, void * types, void * ids, void * severities, void * lengths, void * messageLog );	( count bufSize sources types ids severities lengths messageLog -- )
EXTERN: "C" void glPushDebugGroup( int source, int id, int length, char * message );	( source id length message -- )
EXTERN: "C" void glPopDebugGroup(  );	( -- )
EXTERN: "C" void glObjectLabel( int identifier, int name, int length, char * label );	( identifier name length label -- )
EXTERN: "C" void glGetObjectLabel( int identifier, int name, int bufSize, void * length, void * label );	( identifier name bufSize length label -- )
EXTERN: "C" void glObjectPtrLabel( void * ptr, int length, char * label );	( ptr length label -- )
EXTERN: "C" void glGetObjectPtrLabel( void * ptr, int bufSize, void * length, void * label );	( ptr bufSize length label -- )
EXTERN: "C" void glBufferStorage( int target, long size, void * data, int flags );	( target size data flags -- )
EXTERN: "C" void glClearTexImage( int texture, int level, int format, int type, void * data );	( texture level format type data -- )
EXTERN: "C" void glClearTexSubImage( int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, void * data );	( texture level xoffset yoffset zoffset width height depth format type data -- )
EXTERN: "C" void glBindBuffersBase( int target, int first, int count, void * buffers );	( target first count buffers -- )
EXTERN: "C" void glBindBuffersRange( int target, int first, int count, void * buffers, void * offsets, void * sizes );	( target first count buffers offsets sizes -- )
EXTERN: "C" void glBindTextures( int first, int count, void * textures );	( first count textures -- )
EXTERN: "C" void glBindSamplers( int first, int count, void * samplers );	( first count samplers -- )
EXTERN: "C" void glBindImageTextures( int first, int count, void * textures );	( first count textures -- )
EXTERN: "C" void glBindVertexBuffers( int first, int count, void * buffers, void * offsets, void * strides );	( first count buffers offsets strides -- )
EXTERN: "C" void glClipControl( int origin, int depth );	( origin depth -- )
EXTERN: "C" void glCreateTransformFeedbacks( int n, void * ids );	( n ids -- )
EXTERN: "C" void glTransformFeedbackBufferBase( int xfb, int index, int buffer );	( xfb index buffer -- )
EXTERN: "C" void glTransformFeedbackBufferRange( int xfb, int index, int buffer, long offset, long size );	( xfb index buffer offset size -- )
EXTERN: "C" void glGetTransformFeedbackiv( int xfb, int pname, void * param );	( xfb pname param -- )
EXTERN: "C" void glGetTransformFeedbacki_v( int xfb, int pname, int index, void * param );	( xfb pname index param -- )
EXTERN: "C" void glGetTransformFeedbacki64_v( int xfb, int pname, int index, void * param );	( xfb pname index param -- )
EXTERN: "C" void glCreateBuffers( int n, void * buffers );	( n buffers -- )
EXTERN: "C" void glNamedBufferStorage( int buffer, long size, void * data, int flags );	( buffer size data flags -- )
EXTERN: "C" void glNamedBufferData( int buffer, long size, void * data, int usage );	( buffer size data usage -- )
EXTERN: "C" void glNamedBufferSubData( int buffer, long offset, long size, void * data );	( buffer offset size data -- )
EXTERN: "C" void glCopyNamedBufferSubData( int readBuffer, int writeBuffer, long readOffset, long writeOffset, long size );	( readBuffer writeBuffer readOffset writeOffset size -- )
EXTERN: "C" void glClearNamedBufferData( int buffer, int internalformat, int format, int type, void * data );	( buffer internalformat format type data -- )
EXTERN: "C" void glClearNamedBufferSubData( int buffer, int internalformat, long offset, long size, int format, int type, void * data );	( buffer internalformat offset size format type data -- )
EXTERN: "C" void * glMapNamedBuffer( int buffer, int access );	( buffer access -- )
EXTERN: "C" void * glMapNamedBufferRange( int buffer, long offset, long length, int access );	( buffer offset length access -- )
EXTERN: "C" char glUnmapNamedBuffer( int buffer );	( buffer -- )
EXTERN: "C" void glFlushMappedNamedBufferRange( int buffer, long offset, long length );	( buffer offset length -- )
EXTERN: "C" void glGetNamedBufferParameteriv( int buffer, int pname, void * params );	( buffer pname params -- )
EXTERN: "C" void glGetNamedBufferParameteri64v( int buffer, int pname, void * params );	( buffer pname params -- )
EXTERN: "C" void glGetNamedBufferPointerv( int buffer, int pname, void * params );	( buffer pname params -- )
EXTERN: "C" void glGetNamedBufferSubData( int buffer, long offset, long size, void * data );	( buffer offset size data -- )
EXTERN: "C" void glCreateFramebuffers( int n, void * framebuffers );	( n framebuffers -- )
EXTERN: "C" void glNamedFramebufferRenderbuffer( int framebuffer, int attachment, int renderbuffertarget, int renderbuffer );	( framebuffer attachment renderbuffertarget renderbuffer -- )
EXTERN: "C" void glNamedFramebufferParameteri( int framebuffer, int pname, int param );	( framebuffer pname param -- )
EXTERN: "C" void glNamedFramebufferTexture( int framebuffer, int attachment, int texture, int level );	( framebuffer attachment texture level -- )
EXTERN: "C" void glNamedFramebufferTextureLayer( int framebuffer, int attachment, int texture, int level, int layer );	( framebuffer attachment texture level layer -- )
EXTERN: "C" void glNamedFramebufferDrawBuffer( int framebuffer, int buf );	( framebuffer buf -- )
EXTERN: "C" void glNamedFramebufferDrawBuffers( int framebuffer, int n, void * bufs );	( framebuffer n bufs -- )
EXTERN: "C" void glNamedFramebufferReadBuffer( int framebuffer, int src );	( framebuffer src -- )
EXTERN: "C" void glInvalidateNamedFramebufferData( int framebuffer, int numAttachments, void * attachments );	( framebuffer numAttachments attachments -- )
EXTERN: "C" void glInvalidateNamedFramebufferSubData( int framebuffer, int numAttachments, void * attachments, int x, int y, int width, int height );	( framebuffer numAttachments attachments x y width height -- )
EXTERN: "C" void glClearNamedFramebufferiv( int framebuffer, int buffer, int drawbuffer, void * value );	( framebuffer buffer drawbuffer value -- )
EXTERN: "C" void glClearNamedFramebufferuiv( int framebuffer, int buffer, int drawbuffer, void * value );	( framebuffer buffer drawbuffer value -- )
EXTERN: "C" void glClearNamedFramebufferfv( int framebuffer, int buffer, int drawbuffer, void * value );	( framebuffer buffer drawbuffer value -- )
EXTERN: "C" void glClearNamedFramebufferfi( int framebuffer, int buffer, int drawbuffer, float depth, int stencil );	( framebuffer buffer drawbuffer depth stencil -- )
EXTERN: "C" void glBlitNamedFramebuffer( int readFramebuffer, int drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter );	( readFramebuffer drawFramebuffer srcX0 srcY0 srcX1 srcY1 dstX0 dstY0 dstX1 dstY1 mask filter -- )
EXTERN: "C" int glCheckNamedFramebufferStatus( int framebuffer, int target );	( framebuffer target -- )
EXTERN: "C" void glGetNamedFramebufferParameteriv( int framebuffer, int pname, void * param );	( framebuffer pname param -- )
EXTERN: "C" void glGetNamedFramebufferAttachmentParameteriv( int framebuffer, int attachment, int pname, void * params );	( framebuffer attachment pname params -- )
EXTERN: "C" void glCreateRenderbuffers( int n, void * renderbuffers );	( n renderbuffers -- )
EXTERN: "C" void glNamedRenderbufferStorage( int renderbuffer, int internalformat, int width, int height );	( renderbuffer internalformat width height -- )
EXTERN: "C" void glNamedRenderbufferStorageMultisample( int renderbuffer, int samples, int internalformat, int width, int height );	( renderbuffer samples internalformat width height -- )
EXTERN: "C" void glGetNamedRenderbufferParameteriv( int renderbuffer, int pname, void * params );	( renderbuffer pname params -- )
EXTERN: "C" void glCreateTextures( int target, int n, void * textures );	( target n textures -- )
EXTERN: "C" void glTextureBuffer( int texture, int internalformat, int buffer );	( texture internalformat buffer -- )
EXTERN: "C" void glTextureBufferRange( int texture, int internalformat, int buffer, long offset, long size );	( texture internalformat buffer offset size -- )
EXTERN: "C" void glTextureStorage1D( int texture, int levels, int internalformat, int width );	( texture levels internalformat width -- )
EXTERN: "C" void glTextureStorage2D( int texture, int levels, int internalformat, int width, int height );	( texture levels internalformat width height -- )
EXTERN: "C" void glTextureStorage3D( int texture, int levels, int internalformat, int width, int height, int depth );	( texture levels internalformat width height depth -- )
EXTERN: "C" void glTextureStorage2DMultisample( int texture, int samples, int internalformat, int width, int height, char fixedsamplelocations );	( texture samples internalformat width height fixedsamplelocations -- )
EXTERN: "C" void glTextureStorage3DMultisample( int texture, int samples, int internalformat, int width, int height, int depth, char fixedsamplelocations );	( texture samples internalformat width height depth fixedsamplelocations -- )
EXTERN: "C" void glTextureSubImage1D( int texture, int level, int xoffset, int width, int format, int type, void * pixels );	( texture level xoffset width format type pixels -- )
EXTERN: "C" void glTextureSubImage2D( int texture, int level, int xoffset, int yoffset, int width, int height, int format, int type, void * pixels );	( texture level xoffset yoffset width height format type pixels -- )
EXTERN: "C" void glTextureSubImage3D( int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, void * pixels );	( texture level xoffset yoffset zoffset width height depth format type pixels -- )
EXTERN: "C" void glCompressedTextureSubImage1D( int texture, int level, int xoffset, int width, int format, int imageSize, void * data );	( texture level xoffset width format imageSize data -- )
EXTERN: "C" void glCompressedTextureSubImage2D( int texture, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, void * data );	( texture level xoffset yoffset width height format imageSize data -- )
EXTERN: "C" void glCompressedTextureSubImage3D( int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, void * data );	( texture level xoffset yoffset zoffset width height depth format imageSize data -- )
EXTERN: "C" void glCopyTextureSubImage1D( int texture, int level, int xoffset, int x, int y, int width );	( texture level xoffset x y width -- )
EXTERN: "C" void glCopyTextureSubImage2D( int texture, int level, int xoffset, int yoffset, int x, int y, int width, int height );	( texture level xoffset yoffset x y width height -- )
EXTERN: "C" void glCopyTextureSubImage3D( int texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height );	( texture level xoffset yoffset zoffset x y width height -- )
EXTERN: "C" void glTextureParameterf( int texture, int pname, float param );	( texture pname param -- )
EXTERN: "C" void glTextureParameterfv( int texture, int pname, void * param );	( texture pname param -- )
EXTERN: "C" void glTextureParameteri( int texture, int pname, int param );	( texture pname param -- )
EXTERN: "C" void glTextureParameterIiv( int texture, int pname, void * params );	( texture pname params -- )
EXTERN: "C" void glTextureParameterIuiv( int texture, int pname, void * params );	( texture pname params -- )
EXTERN: "C" void glTextureParameteriv( int texture, int pname, void * param );	( texture pname param -- )
EXTERN: "C" void glGenerateTextureMipmap( int texture );	( texture -- )
EXTERN: "C" void glBindTextureUnit( int unit, int texture );	( unit texture -- )
EXTERN: "C" void glGetTextureImage( int texture, int level, int format, int type, int bufSize, void * pixels );	( texture level format type bufSize pixels -- )
EXTERN: "C" void glGetCompressedTextureImage( int texture, int level, int bufSize, void * pixels );	( texture level bufSize pixels -- )
EXTERN: "C" void glGetTextureLevelParameterfv( int texture, int level, int pname, void * params );	( texture level pname params -- )
EXTERN: "C" void glGetTextureLevelParameteriv( int texture, int level, int pname, void * params );	( texture level pname params -- )
EXTERN: "C" void glGetTextureParameterfv( int texture, int pname, void * params );	( texture pname params -- )
EXTERN: "C" void glGetTextureParameterIiv( int texture, int pname, void * params );	( texture pname params -- )
EXTERN: "C" void glGetTextureParameterIuiv( int texture, int pname, void * params );	( texture pname params -- )
EXTERN: "C" void glGetTextureParameteriv( int texture, int pname, void * params );	( texture pname params -- )
EXTERN: "C" void glCreateVertexArrays( int n, void * arrays );	( n arrays -- )
EXTERN: "C" void glDisableVertexArrayAttrib( int vaobj, int index );	( vaobj index -- )
EXTERN: "C" void glEnableVertexArrayAttrib( int vaobj, int index );	( vaobj index -- )
EXTERN: "C" void glVertexArrayElementBuffer( int vaobj, int buffer );	( vaobj buffer -- )
EXTERN: "C" void glVertexArrayVertexBuffer( int vaobj, int bindingindex, int buffer, long offset, int stride );	( vaobj bindingindex buffer offset stride -- )
EXTERN: "C" void glVertexArrayVertexBuffers( int vaobj, int first, int count, void * buffers, void * offsets, void * strides );	( vaobj first count buffers offsets strides -- )
EXTERN: "C" void glVertexArrayAttribBinding( int vaobj, int attribindex, int bindingindex );	( vaobj attribindex bindingindex -- )
EXTERN: "C" void glVertexArrayAttribFormat( int vaobj, int attribindex, int size, int type, char normalized, int relativeoffset );	( vaobj attribindex size type normalized relativeoffset -- )
EXTERN: "C" void glVertexArrayAttribIFormat( int vaobj, int attribindex, int size, int type, int relativeoffset );	( vaobj attribindex size type relativeoffset -- )
EXTERN: "C" void glVertexArrayAttribLFormat( int vaobj, int attribindex, int size, int type, int relativeoffset );	( vaobj attribindex size type relativeoffset -- )
EXTERN: "C" void glVertexArrayBindingDivisor( int vaobj, int bindingindex, int divisor );	( vaobj bindingindex divisor -- )
EXTERN: "C" void glGetVertexArrayiv( int vaobj, int pname, void * param );	( vaobj pname param -- )
EXTERN: "C" void glGetVertexArrayIndexediv( int vaobj, int index, int pname, void * param );	( vaobj index pname param -- )
EXTERN: "C" void glGetVertexArrayIndexed64iv( int vaobj, int index, int pname, void * param );	( vaobj index pname param -- )
EXTERN: "C" void glCreateSamplers( int n, void * samplers );	( n samplers -- )
EXTERN: "C" void glCreateProgramPipelines( int n, void * pipelines );	( n pipelines -- )
EXTERN: "C" void glCreateQueries( int target, int n, void * ids );	( target n ids -- )
EXTERN: "C" void glGetQueryBufferObjecti64v( int id, int buffer, int pname, long offset );	( id buffer pname offset -- )
EXTERN: "C" void glGetQueryBufferObjectiv( int id, int buffer, int pname, long offset );	( id buffer pname offset -- )
EXTERN: "C" void glGetQueryBufferObjectui64v( int id, int buffer, int pname, long offset );	( id buffer pname offset -- )
EXTERN: "C" void glGetQueryBufferObjectuiv( int id, int buffer, int pname, long offset );	( id buffer pname offset -- )
EXTERN: "C" void glMemoryBarrierByRegion( int barriers );	( barriers -- )
EXTERN: "C" void glGetTextureSubImage( int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int bufSize, void * pixels );	( texture level xoffset yoffset zoffset width height depth format type bufSize pixels -- )
EXTERN: "C" void glGetCompressedTextureSubImage( int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, void * pixels );	( texture level xoffset yoffset zoffset width height depth bufSize pixels -- )
EXTERN: "C" int glGetGraphicsResetStatus(  );	( -- )
EXTERN: "C" void glGetnCompressedTexImage( int target, int lod, int bufSize, void * pixels );	( target lod bufSize pixels -- )
EXTERN: "C" void glGetnTexImage( int target, int level, int format, int type, int bufSize, void * pixels );	( target level format type bufSize pixels -- )
EXTERN: "C" void glGetnUniformdv( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glGetnUniformfv( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glGetnUniformiv( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glGetnUniformuiv( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glReadnPixels( int x, int y, int width, int height, int format, int type, int bufSize, void * data );	( x y width height format type bufSize data -- )
EXTERN: "C" void glGetnMapdv( int target, int query, int bufSize, void * v );	( target query bufSize v -- )
EXTERN: "C" void glGetnMapfv( int target, int query, int bufSize, void * v );	( target query bufSize v -- )
EXTERN: "C" void glGetnMapiv( int target, int query, int bufSize, void * v );	( target query bufSize v -- )
EXTERN: "C" void glGetnPixelMapfv( int map, int bufSize, void * values );	( map bufSize values -- )
EXTERN: "C" void glGetnPixelMapuiv( int map, int bufSize, void * values );	( map bufSize values -- )
EXTERN: "C" void glGetnPixelMapusv( int map, int bufSize, void * values );	( map bufSize values -- )
EXTERN: "C" void glGetnPolygonStipple( int bufSize, void * pattern );	( bufSize pattern -- )
EXTERN: "C" void glGetnColorTable( int target, int format, int type, int bufSize, void * table );	( target format type bufSize table -- )
EXTERN: "C" void glGetnConvolutionFilter( int target, int format, int type, int bufSize, void * image );	( target format type bufSize image -- )
EXTERN: "C" void glGetnSeparableFilter( int target, int format, int type, int rowBufSize, void * row, int columnBufSize, void * column, void * span );	( target format type rowBufSize row columnBufSize column span -- )
EXTERN: "C" void glGetnHistogram( int target, char reset, int format, int type, int bufSize, void * values );	( target reset format type bufSize values -- )
EXTERN: "C" void glGetnMinmax( int target, char reset, int format, int type, int bufSize, void * values );	( target reset format type bufSize values -- )
EXTERN: "C" void glTextureBarrier(  );	( -- )
EXTERN: "C" void glSpecializeShader( int shader, char * pEntryPoint, int numSpecializationConstants, void * pConstantIndex, void * pConstantValue );	( shader pEntryPoint numSpecializationConstants pConstantIndex pConstantValue -- )
EXTERN: "C" void glMultiDrawArraysIndirectCount( int mode, void * indirect, long drawcount, int maxdrawcount, int stride );	( mode indirect drawcount maxdrawcount stride -- )
EXTERN: "C" void glMultiDrawElementsIndirectCount( int mode, int type, void * indirect, long drawcount, int maxdrawcount, int stride );	( mode type indirect drawcount maxdrawcount stride -- )
EXTERN: "C" void glPolygonOffsetClamp( float factor, float units, float clamp );	( factor units clamp -- )
EXTERN: "C" void glPrimitiveBoundingBoxARB( float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW );	( minX minY minZ minW maxX maxY maxZ maxW -- )
EXTERN: "C" long long glGetTextureHandleARB( int texture );	( texture -- )
EXTERN: "C" long long glGetTextureSamplerHandleARB( int texture, int sampler );	( texture sampler -- )
EXTERN: "C" void glMakeTextureHandleResidentARB( long long handle );	( handle -- )
EXTERN: "C" void glMakeTextureHandleNonResidentARB( long long handle );	( handle -- )
EXTERN: "C" long long glGetImageHandleARB( int texture, int level, char layered, int layer, int format );	( texture level layered layer format -- )
EXTERN: "C" void glMakeImageHandleResidentARB( long long handle, int access );	( handle access -- )
EXTERN: "C" void glMakeImageHandleNonResidentARB( long long handle );	( handle -- )
EXTERN: "C" void glUniformHandleui64ARB( int location, long long value );	( location value -- )
EXTERN: "C" void glUniformHandleui64vARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glProgramUniformHandleui64ARB( int program, int location, long long value );	( program location value -- )
EXTERN: "C" void glProgramUniformHandleui64vARB( int program, int location, int count, void * values );	( program location count values -- )
EXTERN: "C" char glIsTextureHandleResidentARB( long long handle );	( handle -- )
EXTERN: "C" char glIsImageHandleResidentARB( long long handle );	( handle -- )
EXTERN: "C" void glVertexAttribL1ui64ARB( int index, long long x );	( index x -- )
EXTERN: "C" void glVertexAttribL1ui64vARB( int index, void * v );	( index v -- )
EXTERN: "C" void glGetVertexAttribLui64vARB( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void * glCreateSyncFromCLeventARB( void * context, void * event, int flags );	( context event flags -- )
EXTERN: "C" void glClampColorARB( int target, int clamp );	( target clamp -- )
EXTERN: "C" void glDispatchComputeGroupSizeARB( int num_groups_x, int num_groups_y, int num_groups_z, int group_size_x, int group_size_y, int group_size_z );	( num_groups_x num_groups_y num_groups_z group_size_x group_size_y group_size_z -- )
EXTERN: "C" void glDebugMessageControlARB( int source, int type, int severity, int count, void * ids, char enabled );	( source type severity count ids enabled -- )
EXTERN: "C" void glDebugMessageInsertARB( int source, int type, int id, int severity, int length, char * buf );	( source type id severity length buf -- )
EXTERN: "C" void glDebugMessageCallbackARB( void * callback, void * userParam );	( callback userParam -- )
EXTERN: "C" int glGetDebugMessageLogARB( int count, int bufSize, void * sources, void * types, void * ids, void * severities, void * lengths, void * messageLog );	( count bufSize sources types ids severities lengths messageLog -- )
EXTERN: "C" void glDrawBuffersARB( int n, void * bufs );	( n bufs -- )
EXTERN: "C" void glBlendEquationiARB( int buf, int mode );	( buf mode -- )
EXTERN: "C" void glBlendEquationSeparateiARB( int buf, int modeRGB, int modeAlpha );	( buf modeRGB modeAlpha -- )
EXTERN: "C" void glBlendFunciARB( int buf, int src, int dst );	( buf src dst -- )
EXTERN: "C" void glBlendFuncSeparateiARB( int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha );	( buf srcRGB dstRGB srcAlpha dstAlpha -- )
EXTERN: "C" void glDrawArraysInstancedARB( int mode, int first, int count, int primcount );	( mode first count primcount -- )
EXTERN: "C" void glDrawElementsInstancedARB( int mode, int count, int type, void * indices, int primcount );	( mode count type indices primcount -- )
EXTERN: "C" void glProgramStringARB( int target, int format, int len, void * string );	( target format len string -- )
EXTERN: "C" void glBindProgramARB( int target, int program );	( target program -- )
EXTERN: "C" void glDeleteProgramsARB( int n, void * programs );	( n programs -- )
EXTERN: "C" void glGenProgramsARB( int n, void * programs );	( n programs -- )
EXTERN: "C" void glProgramEnvParameter4dARB( int target, int index, double x, double y, double z, double w );	( target index x y z w -- )
EXTERN: "C" void glProgramEnvParameter4dvARB( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glProgramEnvParameter4fARB( int target, int index, float x, float y, float z, float w );	( target index x y z w -- )
EXTERN: "C" void glProgramEnvParameter4fvARB( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glProgramLocalParameter4dARB( int target, int index, double x, double y, double z, double w );	( target index x y z w -- )
EXTERN: "C" void glProgramLocalParameter4dvARB( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glProgramLocalParameter4fARB( int target, int index, float x, float y, float z, float w );	( target index x y z w -- )
EXTERN: "C" void glProgramLocalParameter4fvARB( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glGetProgramEnvParameterdvARB( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glGetProgramEnvParameterfvARB( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glGetProgramLocalParameterdvARB( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glGetProgramLocalParameterfvARB( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glGetProgramivARB( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetProgramStringARB( int target, int pname, void * string );	( target pname string -- )
EXTERN: "C" char glIsProgramARB( int program );	( program -- )
EXTERN: "C" void glProgramParameteriARB( int program, int pname, int value );	( program pname value -- )
EXTERN: "C" void glFramebufferTextureARB( int target, int attachment, int texture, int level );	( target attachment texture level -- )
EXTERN: "C" void glFramebufferTextureLayerARB( int target, int attachment, int texture, int level, int layer );	( target attachment texture level layer -- )
EXTERN: "C" void glFramebufferTextureFaceARB( int target, int attachment, int texture, int level, int face );	( target attachment texture level face -- )
EXTERN: "C" void glSpecializeShaderARB( int shader, char * pEntryPoint, int numSpecializationConstants, void * pConstantIndex, void * pConstantValue );	( shader pEntryPoint numSpecializationConstants pConstantIndex pConstantValue -- )
EXTERN: "C" void glUniform1i64ARB( int location, long long x );	( location x -- )
EXTERN: "C" void glUniform2i64ARB( int location, long long x, long long y );	( location x y -- )
EXTERN: "C" void glUniform3i64ARB( int location, long long x, long long y, long long z );	( location x y z -- )
EXTERN: "C" void glUniform4i64ARB( int location, long long x, long long y, long long z, long long w );	( location x y z w -- )
EXTERN: "C" void glUniform1i64vARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2i64vARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3i64vARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4i64vARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform1ui64ARB( int location, long long x );	( location x -- )
EXTERN: "C" void glUniform2ui64ARB( int location, long long x, long long y );	( location x y -- )
EXTERN: "C" void glUniform3ui64ARB( int location, long long x, long long y, long long z );	( location x y z -- )
EXTERN: "C" void glUniform4ui64ARB( int location, long long x, long long y, long long z, long long w );	( location x y z w -- )
EXTERN: "C" void glUniform1ui64vARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2ui64vARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3ui64vARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4ui64vARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glGetUniformi64vARB( int program, int location, void * params );	( program location params -- )
EXTERN: "C" void glGetUniformui64vARB( int program, int location, void * params );	( program location params -- )
EXTERN: "C" void glGetnUniformi64vARB( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glGetnUniformui64vARB( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glProgramUniform1i64ARB( int program, int location, long long x );	( program location x -- )
EXTERN: "C" void glProgramUniform2i64ARB( int program, int location, long long x, long long y );	( program location x y -- )
EXTERN: "C" void glProgramUniform3i64ARB( int program, int location, long long x, long long y, long long z );	( program location x y z -- )
EXTERN: "C" void glProgramUniform4i64ARB( int program, int location, long long x, long long y, long long z, long long w );	( program location x y z w -- )
EXTERN: "C" void glProgramUniform1i64vARB( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2i64vARB( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3i64vARB( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4i64vARB( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform1ui64ARB( int program, int location, long long x );	( program location x -- )
EXTERN: "C" void glProgramUniform2ui64ARB( int program, int location, long long x, long long y );	( program location x y -- )
EXTERN: "C" void glProgramUniform3ui64ARB( int program, int location, long long x, long long y, long long z );	( program location x y z -- )
EXTERN: "C" void glProgramUniform4ui64ARB( int program, int location, long long x, long long y, long long z, long long w );	( program location x y z w -- )
EXTERN: "C" void glProgramUniform1ui64vARB( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2ui64vARB( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3ui64vARB( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4ui64vARB( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glMultiDrawArraysIndirectCountARB( int mode, void * indirect, long drawcount, int maxdrawcount, int stride );	( mode indirect drawcount maxdrawcount stride -- )
EXTERN: "C" void glMultiDrawElementsIndirectCountARB( int mode, int type, void * indirect, long drawcount, int maxdrawcount, int stride );	( mode type indirect drawcount maxdrawcount stride -- )
EXTERN: "C" void glVertexAttribDivisorARB( int index, int divisor );	( index divisor -- )
EXTERN: "C" void glCurrentPaletteMatrixARB( int index );	( index -- )
EXTERN: "C" void glMatrixIndexubvARB( int size, void * indices );	( size indices -- )
EXTERN: "C" void glMatrixIndexusvARB( int size, void * indices );	( size indices -- )
EXTERN: "C" void glMatrixIndexuivARB( int size, void * indices );	( size indices -- )
EXTERN: "C" void glMatrixIndexPointerARB( int size, int type, int stride, void * pointer );	( size type stride pointer -- )
EXTERN: "C" void glSampleCoverageARB( float value, char invert );	( value invert -- )
EXTERN: "C" void glGenQueriesARB( int n, void * ids );	( n ids -- )
EXTERN: "C" void glDeleteQueriesARB( int n, void * ids );	( n ids -- )
EXTERN: "C" char glIsQueryARB( int id );	( id -- )
EXTERN: "C" void glBeginQueryARB( int target, int id );	( target id -- )
EXTERN: "C" void glEndQueryARB( int target );	( target -- )
EXTERN: "C" void glGetQueryivARB( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetQueryObjectivARB( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glGetQueryObjectuivARB( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glMaxShaderCompilerThreadsARB( int count );	( count -- )
EXTERN: "C" void glPointParameterfARB( int pname, float param );	( pname param -- )
EXTERN: "C" void glPointParameterfvARB( int pname, void * params );	( pname params -- )
EXTERN: "C" int glGetGraphicsResetStatusARB(  );	( -- )
EXTERN: "C" void glGetnTexImageARB( int target, int level, int format, int type, int bufSize, void * img );	( target level format type bufSize img -- )
EXTERN: "C" void glReadnPixelsARB( int x, int y, int width, int height, int format, int type, int bufSize, void * data );	( x y width height format type bufSize data -- )
EXTERN: "C" void glGetnCompressedTexImageARB( int target, int lod, int bufSize, void * img );	( target lod bufSize img -- )
EXTERN: "C" void glGetnUniformfvARB( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glGetnUniformivARB( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glGetnUniformuivARB( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glGetnUniformdvARB( int program, int location, int bufSize, void * params );	( program location bufSize params -- )
EXTERN: "C" void glGetnMapdvARB( int target, int query, int bufSize, void * v );	( target query bufSize v -- )
EXTERN: "C" void glGetnMapfvARB( int target, int query, int bufSize, void * v );	( target query bufSize v -- )
EXTERN: "C" void glGetnMapivARB( int target, int query, int bufSize, void * v );	( target query bufSize v -- )
EXTERN: "C" void glGetnPixelMapfvARB( int map, int bufSize, void * values );	( map bufSize values -- )
EXTERN: "C" void glGetnPixelMapuivARB( int map, int bufSize, void * values );	( map bufSize values -- )
EXTERN: "C" void glGetnPixelMapusvARB( int map, int bufSize, void * values );	( map bufSize values -- )
EXTERN: "C" void glGetnPolygonStippleARB( int bufSize, void * pattern );	( bufSize pattern -- )
EXTERN: "C" void glGetnColorTableARB( int target, int format, int type, int bufSize, void * table );	( target format type bufSize table -- )
EXTERN: "C" void glGetnConvolutionFilterARB( int target, int format, int type, int bufSize, void * image );	( target format type bufSize image -- )
EXTERN: "C" void glGetnSeparableFilterARB( int target, int format, int type, int rowBufSize, void * row, int columnBufSize, void * column, void * span );	( target format type rowBufSize row columnBufSize column span -- )
EXTERN: "C" void glGetnHistogramARB( int target, char reset, int format, int type, int bufSize, void * values );	( target reset format type bufSize values -- )
EXTERN: "C" void glGetnMinmaxARB( int target, char reset, int format, int type, int bufSize, void * values );	( target reset format type bufSize values -- )
EXTERN: "C" void glFramebufferSampleLocationsfvARB( int target, int start, int count, void * v );	( target start count v -- )
EXTERN: "C" void glNamedFramebufferSampleLocationsfvARB( int framebuffer, int start, int count, void * v );	( framebuffer start count v -- )
EXTERN: "C" void glEvaluateDepthValuesARB(  );	( -- )
EXTERN: "C" void glMinSampleShadingARB( float value );	( value -- )
EXTERN: "C" void glDeleteObjectARB( void * obj );	( obj -- )
EXTERN: "C" void * glGetHandleARB( int pname );	( pname -- )
EXTERN: "C" void glDetachObjectARB( void * containerObj, void * attachedObj );	( containerObj attachedObj -- )
EXTERN: "C" void * glCreateShaderObjectARB( int shaderType );	( shaderType -- )
EXTERN: "C" void glShaderSourceARB( void * shaderObj, int count, void * string, void * length );	( shaderObj count string length -- )
EXTERN: "C" void glCompileShaderARB( void * shaderObj );	( shaderObj -- )
EXTERN: "C" void * glCreateProgramObjectARB(  );	( -- )
EXTERN: "C" void glAttachObjectARB( void * containerObj, void * obj );	( containerObj obj -- )
EXTERN: "C" void glLinkProgramARB( void * programObj );	( programObj -- )
EXTERN: "C" void glUseProgramObjectARB( void * programObj );	( programObj -- )
EXTERN: "C" void glValidateProgramARB( void * programObj );	( programObj -- )
EXTERN: "C" void glUniform1fARB( int location, float v0 );	( location v0 -- )
EXTERN: "C" void glUniform2fARB( int location, float v0, float v1 );	( location v0 v1 -- )
EXTERN: "C" void glUniform3fARB( int location, float v0, float v1, float v2 );	( location v0 v1 v2 -- )
EXTERN: "C" void glUniform4fARB( int location, float v0, float v1, float v2, float v3 );	( location v0 v1 v2 v3 -- )
EXTERN: "C" void glUniform1iARB( int location, int v0 );	( location v0 -- )
EXTERN: "C" void glUniform2iARB( int location, int v0, int v1 );	( location v0 v1 -- )
EXTERN: "C" void glUniform3iARB( int location, int v0, int v1, int v2 );	( location v0 v1 v2 -- )
EXTERN: "C" void glUniform4iARB( int location, int v0, int v1, int v2, int v3 );	( location v0 v1 v2 v3 -- )
EXTERN: "C" void glUniform1fvARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2fvARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3fvARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4fvARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform1ivARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2ivARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3ivARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4ivARB( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniformMatrix2fvARB( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix3fvARB( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glUniformMatrix4fvARB( int location, int count, char transpose, void * value );	( location count transpose value -- )
EXTERN: "C" void glGetObjectParameterfvARB( void * obj, int pname, void * params );	( obj pname params -- )
EXTERN: "C" void glGetObjectParameterivARB( void * obj, int pname, void * params );	( obj pname params -- )
EXTERN: "C" void glGetInfoLogARB( void * obj, int maxLength, void * length, void * infoLog );	( obj maxLength length infoLog -- )
EXTERN: "C" void glGetAttachedObjectsARB( void * containerObj, int maxCount, void * count, void * obj );	( containerObj maxCount count obj -- )
EXTERN: "C" int glGetUniformLocationARB( void * programObj, char * name );	( programObj name -- )
EXTERN: "C" void glGetActiveUniformARB( void * programObj, int index, int maxLength, void * length, void * size, void * type, void * name );	( programObj index maxLength length size type name -- )
EXTERN: "C" void glGetUniformfvARB( void * programObj, int location, void * params );	( programObj location params -- )
EXTERN: "C" void glGetUniformivARB( void * programObj, int location, void * params );	( programObj location params -- )
EXTERN: "C" void glGetShaderSourceARB( void * obj, int maxLength, void * length, void * source );	( obj maxLength length source -- )
EXTERN: "C" void glNamedStringARB( int type, int namelen, char * name, int stringlen, char * string );	( type namelen name stringlen string -- )
EXTERN: "C" void glDeleteNamedStringARB( int namelen, char * name );	( namelen name -- )
EXTERN: "C" void glCompileShaderIncludeARB( int shader, int count, void * path, void * length );	( shader count path length -- )
EXTERN: "C" char glIsNamedStringARB( int namelen, char * name );	( namelen name -- )
EXTERN: "C" void glGetNamedStringARB( int namelen, char * name, int bufSize, void * stringlen, void * string );	( namelen name bufSize stringlen string -- )
EXTERN: "C" void glGetNamedStringivARB( int namelen, char * name, int pname, void * params );	( namelen name pname params -- )
EXTERN: "C" void glBufferPageCommitmentARB( int target, long offset, long size, char commit );	( target offset size commit -- )
EXTERN: "C" void glNamedBufferPageCommitmentEXT( int buffer, long offset, long size, char commit );	( buffer offset size commit -- )
EXTERN: "C" void glNamedBufferPageCommitmentARB( int buffer, long offset, long size, char commit );	( buffer offset size commit -- )
EXTERN: "C" void glTexPageCommitmentARB( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, char commit );	( target level xoffset yoffset zoffset width height depth commit -- )
EXTERN: "C" void glTexBufferARB( int target, int internalformat, int buffer );	( target internalformat buffer -- )
EXTERN: "C" void glCompressedTexImage3DARB( int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, void * data );	( target level internalformat width height depth border imageSize data -- )
EXTERN: "C" void glCompressedTexImage2DARB( int target, int level, int internalformat, int width, int height, int border, int imageSize, void * data );	( target level internalformat width height border imageSize data -- )
EXTERN: "C" void glCompressedTexImage1DARB( int target, int level, int internalformat, int width, int border, int imageSize, void * data );	( target level internalformat width border imageSize data -- )
EXTERN: "C" void glCompressedTexSubImage3DARB( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, void * data );	( target level xoffset yoffset zoffset width height depth format imageSize data -- )
EXTERN: "C" void glCompressedTexSubImage2DARB( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, void * data );	( target level xoffset yoffset width height format imageSize data -- )
EXTERN: "C" void glCompressedTexSubImage1DARB( int target, int level, int xoffset, int width, int format, int imageSize, void * data );	( target level xoffset width format imageSize data -- )
EXTERN: "C" void glGetCompressedTexImageARB( int target, int level, void * img );	( target level img -- )
EXTERN: "C" void glLoadTransposeMatrixfARB( void * m );	( m -- )
EXTERN: "C" void glLoadTransposeMatrixdARB( void * m );	( m -- )
EXTERN: "C" void glMultTransposeMatrixfARB( void * m );	( m -- )
EXTERN: "C" void glMultTransposeMatrixdARB( void * m );	( m -- )
EXTERN: "C" void glWeightbvARB( int size, void * weights );	( size weights -- )
EXTERN: "C" void glWeightsvARB( int size, void * weights );	( size weights -- )
EXTERN: "C" void glWeightivARB( int size, void * weights );	( size weights -- )
EXTERN: "C" void glWeightfvARB( int size, void * weights );	( size weights -- )
EXTERN: "C" void glWeightdvARB( int size, void * weights );	( size weights -- )
EXTERN: "C" void glWeightubvARB( int size, void * weights );	( size weights -- )
EXTERN: "C" void glWeightusvARB( int size, void * weights );	( size weights -- )
EXTERN: "C" void glWeightuivARB( int size, void * weights );	( size weights -- )
EXTERN: "C" void glWeightPointerARB( int size, int type, int stride, void * pointer );	( size type stride pointer -- )
EXTERN: "C" void glVertexBlendARB( int count );	( count -- )
EXTERN: "C" void glBindBufferARB( int target, int buffer );	( target buffer -- )
EXTERN: "C" void glDeleteBuffersARB( int n, void * buffers );	( n buffers -- )
EXTERN: "C" void glGenBuffersARB( int n, void * buffers );	( n buffers -- )
EXTERN: "C" char glIsBufferARB( int buffer );	( buffer -- )
EXTERN: "C" void glBufferDataARB( int target, long size, void * data, int usage );	( target size data usage -- )
EXTERN: "C" void glBufferSubDataARB( int target, long offset, long size, void * data );	( target offset size data -- )
EXTERN: "C" void glGetBufferSubDataARB( int target, long offset, long size, void * data );	( target offset size data -- )
EXTERN: "C" void * glMapBufferARB( int target, int access );	( target access -- )
EXTERN: "C" char glUnmapBufferARB( int target );	( target -- )
EXTERN: "C" void glGetBufferParameterivARB( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetBufferPointervARB( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glVertexAttrib1dARB( int index, double x );	( index x -- )
EXTERN: "C" void glVertexAttrib1dvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib1fARB( int index, float x );	( index x -- )
EXTERN: "C" void glVertexAttrib1fvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib1sARB( int index, short x );	( index x -- )
EXTERN: "C" void glVertexAttrib1svARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2dARB( int index, double x, double y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2dvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2fARB( int index, float x, float y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2fvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2sARB( int index, short x, short y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2svARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3dARB( int index, double x, double y, double z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3dvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3fARB( int index, float x, float y, float z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3fvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3sARB( int index, short x, short y, short z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3svARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4NbvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4NivARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4NsvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4NubARB( int index, char x, char y, char z, char w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4NubvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4NuivARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4NusvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4bvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4dARB( int index, double x, double y, double z, double w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4dvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4fARB( int index, float x, float y, float z, float w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4fvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4ivARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4sARB( int index, short x, short y, short z, short w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4svARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4ubvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4uivARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4usvARB( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribPointerARB( int index, int size, int type, char normalized, int stride, void * pointer );	( index size type normalized stride pointer -- )
EXTERN: "C" void glEnableVertexAttribArrayARB( int index );	( index -- )
EXTERN: "C" void glDisableVertexAttribArrayARB( int index );	( index -- )
EXTERN: "C" void glGetVertexAttribdvARB( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribfvARB( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribivARB( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribPointervARB( int index, int pname, void * pointer );	( index pname pointer -- )
EXTERN: "C" void glBindAttribLocationARB( void * programObj, int index, char * name );	( programObj index name -- )
EXTERN: "C" void glGetActiveAttribARB( void * programObj, int index, int maxLength, void * length, void * size, void * type, void * name );	( programObj index maxLength length size type name -- )
EXTERN: "C" int glGetAttribLocationARB( void * programObj, char * name );	( programObj name -- )
EXTERN: "C" void glWindowPos2dARB( double x, double y );	( x y -- )
EXTERN: "C" void glWindowPos2dvARB( void * v );	( v -- )
EXTERN: "C" void glWindowPos2fARB( float x, float y );	( x y -- )
EXTERN: "C" void glWindowPos2fvARB( void * v );	( v -- )
EXTERN: "C" void glWindowPos2iARB( int x, int y );	( x y -- )
EXTERN: "C" void glWindowPos2ivARB( void * v );	( v -- )
EXTERN: "C" void glWindowPos2sARB( short x, short y );	( x y -- )
EXTERN: "C" void glWindowPos2svARB( void * v );	( v -- )
EXTERN: "C" void glWindowPos3dARB( double x, double y, double z );	( x y z -- )
EXTERN: "C" void glWindowPos3dvARB( void * v );	( v -- )
EXTERN: "C" void glWindowPos3fARB( float x, float y, float z );	( x y z -- )
EXTERN: "C" void glWindowPos3fvARB( void * v );	( v -- )
EXTERN: "C" void glWindowPos3iARB( int x, int y, int z );	( x y z -- )
EXTERN: "C" void glWindowPos3ivARB( void * v );	( v -- )
EXTERN: "C" void glWindowPos3sARB( short x, short y, short z );	( x y z -- )
EXTERN: "C" void glWindowPos3svARB( void * v );	( v -- )
EXTERN: "C" void glBlendBarrierKHR(  );	( -- )
EXTERN: "C" void glMaxShaderCompilerThreadsKHR( int count );	( count -- )
EXTERN: "C" void glMultiTexCoord1bOES( int texture, char s );	( texture s -- )
EXTERN: "C" void glMultiTexCoord1bvOES( int texture, void * coords );	( texture coords -- )
EXTERN: "C" void glMultiTexCoord2bOES( int texture, char s, char t );	( texture s t -- )
EXTERN: "C" void glMultiTexCoord2bvOES( int texture, void * coords );	( texture coords -- )
EXTERN: "C" void glMultiTexCoord3bOES( int texture, char s, char t, char r );	( texture s t r -- )
EXTERN: "C" void glMultiTexCoord3bvOES( int texture, void * coords );	( texture coords -- )
EXTERN: "C" void glMultiTexCoord4bOES( int texture, char s, char t, char r, char q );	( texture s t r q -- )
EXTERN: "C" void glMultiTexCoord4bvOES( int texture, void * coords );	( texture coords -- )
EXTERN: "C" void glTexCoord1bOES( char s );	( s -- )
EXTERN: "C" void glTexCoord1bvOES( void * coords );	( coords -- )
EXTERN: "C" void glTexCoord2bOES( char s, char t );	( s t -- )
EXTERN: "C" void glTexCoord2bvOES( void * coords );	( coords -- )
EXTERN: "C" void glTexCoord3bOES( char s, char t, char r );	( s t r -- )
EXTERN: "C" void glTexCoord3bvOES( void * coords );	( coords -- )
EXTERN: "C" void glTexCoord4bOES( char s, char t, char r, char q );	( s t r q -- )
EXTERN: "C" void glTexCoord4bvOES( void * coords );	( coords -- )
EXTERN: "C" void glVertex2bOES( char x, char y );	( x y -- )
EXTERN: "C" void glVertex2bvOES( void * coords );	( coords -- )
EXTERN: "C" void glVertex3bOES( char x, char y, char z );	( x y z -- )
EXTERN: "C" void glVertex3bvOES( void * coords );	( coords -- )
EXTERN: "C" void glVertex4bOES( char x, char y, char z, char w );	( x y z w -- )
EXTERN: "C" void glVertex4bvOES( void * coords );	( coords -- )
EXTERN: "C" void glAlphaFuncxOES( int func, int ref );	( func ref -- )
EXTERN: "C" void glClearColorxOES( int red, int green, int blue, int alpha );	( red green blue alpha -- )
EXTERN: "C" void glClearDepthxOES( int depth );	( depth -- )
EXTERN: "C" void glClipPlanexOES( int plane, void * equation );	( plane equation -- )
EXTERN: "C" void glColor4xOES( int red, int green, int blue, int alpha );	( red green blue alpha -- )
EXTERN: "C" void glDepthRangexOES( int n, int f );	( n f -- )
EXTERN: "C" void glFogxOES( int pname, int param );	( pname param -- )
EXTERN: "C" void glFogxvOES( int pname, void * param );	( pname param -- )
EXTERN: "C" void glFrustumxOES( int l, int r, int b, int t, int n, int f );	( l r b t n f -- )
EXTERN: "C" void glGetClipPlanexOES( int plane, void * equation );	( plane equation -- )
EXTERN: "C" void glGetFixedvOES( int pname, void * params );	( pname params -- )
EXTERN: "C" void glGetTexEnvxvOES( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexParameterxvOES( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glLightModelxOES( int pname, int param );	( pname param -- )
EXTERN: "C" void glLightModelxvOES( int pname, void * param );	( pname param -- )
EXTERN: "C" void glLightxOES( int light, int pname, int param );	( light pname param -- )
EXTERN: "C" void glLightxvOES( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glLineWidthxOES( int width );	( width -- )
EXTERN: "C" void glLoadMatrixxOES( void * m );	( m -- )
EXTERN: "C" void glMaterialxOES( int face, int pname, int param );	( face pname param -- )
EXTERN: "C" void glMaterialxvOES( int face, int pname, void * param );	( face pname param -- )
EXTERN: "C" void glMultMatrixxOES( void * m );	( m -- )
EXTERN: "C" void glMultiTexCoord4xOES( int texture, int s, int t, int r, int q );	( texture s t r q -- )
EXTERN: "C" void glNormal3xOES( int nx, int ny, int nz );	( nx ny nz -- )
EXTERN: "C" void glOrthoxOES( int l, int r, int b, int t, int n, int f );	( l r b t n f -- )
EXTERN: "C" void glPointParameterxvOES( int pname, void * params );	( pname params -- )
EXTERN: "C" void glPointSizexOES( int size );	( size -- )
EXTERN: "C" void glPolygonOffsetxOES( int factor, int units );	( factor units -- )
EXTERN: "C" void glRotatexOES( int angle, int x, int y, int z );	( angle x y z -- )
EXTERN: "C" void glScalexOES( int x, int y, int z );	( x y z -- )
EXTERN: "C" void glTexEnvxOES( int target, int pname, int param );	( target pname param -- )
EXTERN: "C" void glTexEnvxvOES( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glTexParameterxOES( int target, int pname, int param );	( target pname param -- )
EXTERN: "C" void glTexParameterxvOES( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glTranslatexOES( int x, int y, int z );	( x y z -- )
EXTERN: "C" void glAccumxOES( int op, int value );	( op value -- )
EXTERN: "C" void glBitmapxOES( int width, int height, int xorig, int yorig, int xmove, int ymove, void * bitmap );	( width height xorig yorig xmove ymove bitmap -- )
EXTERN: "C" void glBlendColorxOES( int red, int green, int blue, int alpha );	( red green blue alpha -- )
EXTERN: "C" void glClearAccumxOES( int red, int green, int blue, int alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor3xOES( int red, int green, int blue );	( red green blue -- )
EXTERN: "C" void glColor3xvOES( void * components );	( components -- )
EXTERN: "C" void glColor4xvOES( void * components );	( components -- )
EXTERN: "C" void glConvolutionParameterxOES( int target, int pname, int param );	( target pname param -- )
EXTERN: "C" void glConvolutionParameterxvOES( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glEvalCoord1xOES( int u );	( u -- )
EXTERN: "C" void glEvalCoord1xvOES( void * coords );	( coords -- )
EXTERN: "C" void glEvalCoord2xOES( int u, int v );	( u v -- )
EXTERN: "C" void glEvalCoord2xvOES( void * coords );	( coords -- )
EXTERN: "C" void glFeedbackBufferxOES( int n, int type, void * buffer );	( n type buffer -- )
EXTERN: "C" void glGetConvolutionParameterxvOES( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetHistogramParameterxvOES( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetLightxOES( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glGetMapxvOES( int target, int query, void * v );	( target query v -- )
EXTERN: "C" void glGetMaterialxOES( int face, int pname, int param );	( face pname param -- )
EXTERN: "C" void glGetPixelMapxv( int map, int size, void * values );	( map size values -- )
EXTERN: "C" void glGetTexGenxvOES( int coord, int pname, void * params );	( coord pname params -- )
EXTERN: "C" void glGetTexLevelParameterxvOES( int target, int level, int pname, void * params );	( target level pname params -- )
EXTERN: "C" void glIndexxOES( int component );	( component -- )
EXTERN: "C" void glIndexxvOES( void * component );	( component -- )
EXTERN: "C" void glLoadTransposeMatrixxOES( void * m );	( m -- )
EXTERN: "C" void glMap1xOES( int target, int u1, int u2, int stride, int order, int points );	( target u1 u2 stride order points -- )
EXTERN: "C" void glMap2xOES( int target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points );	( target u1 u2 ustride uorder v1 v2 vstride vorder points -- )
EXTERN: "C" void glMapGrid1xOES( int n, int u1, int u2 );	( n u1 u2 -- )
EXTERN: "C" void glMapGrid2xOES( int n, int u1, int u2, int v1, int v2 );	( n u1 u2 v1 v2 -- )
EXTERN: "C" void glMultTransposeMatrixxOES( void * m );	( m -- )
EXTERN: "C" void glMultiTexCoord1xOES( int texture, int s );	( texture s -- )
EXTERN: "C" void glMultiTexCoord1xvOES( int texture, void * coords );	( texture coords -- )
EXTERN: "C" void glMultiTexCoord2xOES( int texture, int s, int t );	( texture s t -- )
EXTERN: "C" void glMultiTexCoord2xvOES( int texture, void * coords );	( texture coords -- )
EXTERN: "C" void glMultiTexCoord3xOES( int texture, int s, int t, int r );	( texture s t r -- )
EXTERN: "C" void glMultiTexCoord3xvOES( int texture, void * coords );	( texture coords -- )
EXTERN: "C" void glMultiTexCoord4xvOES( int texture, void * coords );	( texture coords -- )
EXTERN: "C" void glNormal3xvOES( void * coords );	( coords -- )
EXTERN: "C" void glPassThroughxOES( int token );	( token -- )
EXTERN: "C" void glPixelMapx( int map, int size, void * values );	( map size values -- )
EXTERN: "C" void glPixelStorex( int pname, int param );	( pname param -- )
EXTERN: "C" void glPixelTransferxOES( int pname, int param );	( pname param -- )
EXTERN: "C" void glPixelZoomxOES( int xfactor, int yfactor );	( xfactor yfactor -- )
EXTERN: "C" void glPrioritizeTexturesxOES( int n, void * textures, void * priorities );	( n textures priorities -- )
EXTERN: "C" void glRasterPos2xOES( int x, int y );	( x y -- )
EXTERN: "C" void glRasterPos2xvOES( void * coords );	( coords -- )
EXTERN: "C" void glRasterPos3xOES( int x, int y, int z );	( x y z -- )
EXTERN: "C" void glRasterPos3xvOES( void * coords );	( coords -- )
EXTERN: "C" void glRasterPos4xOES( int x, int y, int z, int w );	( x y z w -- )
EXTERN: "C" void glRasterPos4xvOES( void * coords );	( coords -- )
EXTERN: "C" void glRectxOES( int x1, int y1, int x2, int y2 );	( x1 y1 x2 y2 -- )
EXTERN: "C" void glRectxvOES( void * v1, void * v2 );	( v1 v2 -- )
EXTERN: "C" void glTexCoord1xOES( int s );	( s -- )
EXTERN: "C" void glTexCoord1xvOES( void * coords );	( coords -- )
EXTERN: "C" void glTexCoord2xOES( int s, int t );	( s t -- )
EXTERN: "C" void glTexCoord2xvOES( void * coords );	( coords -- )
EXTERN: "C" void glTexCoord3xOES( int s, int t, int r );	( s t r -- )
EXTERN: "C" void glTexCoord3xvOES( void * coords );	( coords -- )
EXTERN: "C" void glTexCoord4xOES( int s, int t, int r, int q );	( s t r q -- )
EXTERN: "C" void glTexCoord4xvOES( void * coords );	( coords -- )
EXTERN: "C" void glTexGenxOES( int coord, int pname, int param );	( coord pname param -- )
EXTERN: "C" void glTexGenxvOES( int coord, int pname, void * params );	( coord pname params -- )
EXTERN: "C" void glVertex2xOES( int x );	( x -- )
EXTERN: "C" void glVertex2xvOES( void * coords );	( coords -- )
EXTERN: "C" void glVertex3xOES( int x, int y );	( x y -- )
EXTERN: "C" void glVertex3xvOES( void * coords );	( coords -- )
EXTERN: "C" void glVertex4xOES( int x, int y, int z );	( x y z -- )
EXTERN: "C" void glVertex4xvOES( void * coords );	( coords -- )
EXTERN: "C" int glQueryMatrixxOES( void * mantissa, void * exponent );	( mantissa exponent -- )
EXTERN: "C" void glClearDepthfOES( float depth );	( depth -- )
EXTERN: "C" void glClipPlanefOES( int plane, void * equation );	( plane equation -- )
EXTERN: "C" void glDepthRangefOES( float n, float f );	( n f -- )
EXTERN: "C" void glFrustumfOES( float l, float r, float b, float t, float n, float f );	( l r b t n f -- )
EXTERN: "C" void glGetClipPlanefOES( int plane, void * equation );	( plane equation -- )
EXTERN: "C" void glOrthofOES( float l, float r, float b, float t, float n, float f );	( l r b t n f -- )
EXTERN: "C" void glTbufferMask3DFX( int mask );	( mask -- )
EXTERN: "C" void glDebugMessageEnableAMD( int category, int severity, int count, void * ids, char enabled );	( category severity count ids enabled -- )
EXTERN: "C" void glDebugMessageInsertAMD( int category, int severity, int id, int length, char * buf );	( category severity id length buf -- )
EXTERN: "C" void glDebugMessageCallbackAMD( void * callback, void * userParam );	( callback userParam -- )
EXTERN: "C" int glGetDebugMessageLogAMD( int count, int bufsize, void * categories, void * severities, void * ids, void * lengths, void * message );	( count bufsize categories severities ids lengths message -- )
EXTERN: "C" void glBlendFuncIndexedAMD( int buf, int src, int dst );	( buf src dst -- )
EXTERN: "C" void glBlendFuncSeparateIndexedAMD( int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha );	( buf srcRGB dstRGB srcAlpha dstAlpha -- )
EXTERN: "C" void glBlendEquationIndexedAMD( int buf, int mode );	( buf mode -- )
EXTERN: "C" void glBlendEquationSeparateIndexedAMD( int buf, int modeRGB, int modeAlpha );	( buf modeRGB modeAlpha -- )
EXTERN: "C" void glFramebufferSamplePositionsfvAMD( int target, int numsamples, int pixelindex, void * values );	( target numsamples pixelindex values -- )
EXTERN: "C" void glNamedFramebufferSamplePositionsfvAMD( int framebuffer, int numsamples, int pixelindex, void * values );	( framebuffer numsamples pixelindex values -- )
EXTERN: "C" void glGetFramebufferParameterfvAMD( int target, int pname, int numsamples, int pixelindex, int size, void * values );	( target pname numsamples pixelindex size values -- )
EXTERN: "C" void glGetNamedFramebufferParameterfvAMD( int framebuffer, int pname, int numsamples, int pixelindex, int size, void * values );	( framebuffer pname numsamples pixelindex size values -- )
EXTERN: "C" void glUniform1i64NV( int location, long long x );	( location x -- )
EXTERN: "C" void glUniform2i64NV( int location, long long x, long long y );	( location x y -- )
EXTERN: "C" void glUniform3i64NV( int location, long long x, long long y, long long z );	( location x y z -- )
EXTERN: "C" void glUniform4i64NV( int location, long long x, long long y, long long z, long long w );	( location x y z w -- )
EXTERN: "C" void glUniform1i64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2i64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3i64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4i64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform1ui64NV( int location, long long x );	( location x -- )
EXTERN: "C" void glUniform2ui64NV( int location, long long x, long long y );	( location x y -- )
EXTERN: "C" void glUniform3ui64NV( int location, long long x, long long y, long long z );	( location x y z -- )
EXTERN: "C" void glUniform4ui64NV( int location, long long x, long long y, long long z, long long w );	( location x y z w -- )
EXTERN: "C" void glUniform1ui64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2ui64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3ui64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4ui64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glGetUniformi64vNV( int program, int location, void * params );	( program location params -- )
EXTERN: "C" void glGetUniformui64vNV( int program, int location, void * params );	( program location params -- )
EXTERN: "C" void glProgramUniform1i64NV( int program, int location, long long x );	( program location x -- )
EXTERN: "C" void glProgramUniform2i64NV( int program, int location, long long x, long long y );	( program location x y -- )
EXTERN: "C" void glProgramUniform3i64NV( int program, int location, long long x, long long y, long long z );	( program location x y z -- )
EXTERN: "C" void glProgramUniform4i64NV( int program, int location, long long x, long long y, long long z, long long w );	( program location x y z w -- )
EXTERN: "C" void glProgramUniform1i64vNV( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2i64vNV( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3i64vNV( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4i64vNV( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform1ui64NV( int program, int location, long long x );	( program location x -- )
EXTERN: "C" void glProgramUniform2ui64NV( int program, int location, long long x, long long y );	( program location x y -- )
EXTERN: "C" void glProgramUniform3ui64NV( int program, int location, long long x, long long y, long long z );	( program location x y z -- )
EXTERN: "C" void glProgramUniform4ui64NV( int program, int location, long long x, long long y, long long z, long long w );	( program location x y z w -- )
EXTERN: "C" void glProgramUniform1ui64vNV( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2ui64vNV( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3ui64vNV( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4ui64vNV( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glVertexAttribParameteriAMD( int index, int pname, int param );	( index pname param -- )
EXTERN: "C" void glMultiDrawArraysIndirectAMD( int mode, void * indirect, int primcount, int stride );	( mode indirect primcount stride -- )
EXTERN: "C" void glMultiDrawElementsIndirectAMD( int mode, int type, void * indirect, int primcount, int stride );	( mode type indirect primcount stride -- )
EXTERN: "C" void glGenNamesAMD( int identifier, int num, void * names );	( identifier num names -- )
EXTERN: "C" void glDeleteNamesAMD( int identifier, int num, void * names );	( identifier num names -- )
EXTERN: "C" char glIsNameAMD( int identifier, int name );	( identifier name -- )
EXTERN: "C" void glQueryObjectParameteruiAMD( int target, int id, int pname, int param );	( target id pname param -- )
EXTERN: "C" void glGetPerfMonitorGroupsAMD( void * numGroups, int groupsSize, void * groups );	( numGroups groupsSize groups -- )
EXTERN: "C" void glGetPerfMonitorCountersAMD( int group, void * numCounters, void * maxActiveCounters, int counterSize, void * counters );	( group numCounters maxActiveCounters counterSize counters -- )
EXTERN: "C" void glGetPerfMonitorGroupStringAMD( int group, int bufSize, void * length, void * groupString );	( group bufSize length groupString -- )
EXTERN: "C" void glGetPerfMonitorCounterStringAMD( int group, int counter, int bufSize, void * length, void * counterString );	( group counter bufSize length counterString -- )
EXTERN: "C" void glGetPerfMonitorCounterInfoAMD( int group, int counter, int pname, void * data );	( group counter pname data -- )
EXTERN: "C" void glGenPerfMonitorsAMD( int n, void * monitors );	( n monitors -- )
EXTERN: "C" void glDeletePerfMonitorsAMD( int n, void * monitors );	( n monitors -- )
EXTERN: "C" void glSelectPerfMonitorCountersAMD( int monitor, char enable, int group, int numCounters, void * counterList );	( monitor enable group numCounters counterList -- )
EXTERN: "C" void glBeginPerfMonitorAMD( int monitor );	( monitor -- )
EXTERN: "C" void glEndPerfMonitorAMD( int monitor );	( monitor -- )
EXTERN: "C" void glGetPerfMonitorCounterDataAMD( int monitor, int pname, int dataSize, void * data, void * bytesWritten );	( monitor pname dataSize data bytesWritten -- )
EXTERN: "C" void glSetMultisamplefvAMD( int pname, int index, void * val );	( pname index val -- )
EXTERN: "C" void glTexStorageSparseAMD( int target, int internalFormat, int width, int height, int depth, int layers, int flags );	( target internalFormat width height depth layers flags -- )
EXTERN: "C" void glTextureStorageSparseAMD( int texture, int target, int internalFormat, int width, int height, int depth, int layers, int flags );	( texture target internalFormat width height depth layers flags -- )
EXTERN: "C" void glStencilOpValueAMD( int face, int value );	( face value -- )
EXTERN: "C" void glTessellationFactorAMD( float factor );	( factor -- )
EXTERN: "C" void glTessellationModeAMD( int mode );	( mode -- )
EXTERN: "C" void glElementPointerAPPLE( int type, void * pointer );	( type pointer -- )
EXTERN: "C" void glDrawElementArrayAPPLE( int mode, int first, int count );	( mode first count -- )
EXTERN: "C" void glDrawRangeElementArrayAPPLE( int mode, int start, int end, int first, int count );	( mode start end first count -- )
EXTERN: "C" void glMultiDrawElementArrayAPPLE( int mode, void * first, void * count, int primcount );	( mode first count primcount -- )
EXTERN: "C" void glMultiDrawRangeElementArrayAPPLE( int mode, int start, int end, void * first, void * count, int primcount );	( mode start end first count primcount -- )
EXTERN: "C" void glGenFencesAPPLE( int n, void * fences );	( n fences -- )
EXTERN: "C" void glDeleteFencesAPPLE( int n, void * fences );	( n fences -- )
EXTERN: "C" void glSetFenceAPPLE( int fence );	( fence -- )
EXTERN: "C" char glIsFenceAPPLE( int fence );	( fence -- )
EXTERN: "C" char glTestFenceAPPLE( int fence );	( fence -- )
EXTERN: "C" void glFinishFenceAPPLE( int fence );	( fence -- )
EXTERN: "C" char glTestObjectAPPLE( int object, int name );	( object name -- )
EXTERN: "C" void glFinishObjectAPPLE( int object, int name );	( object name -- )
EXTERN: "C" void glBufferParameteriAPPLE( int target, int pname, int param );	( target pname param -- )
EXTERN: "C" void glFlushMappedBufferRangeAPPLE( int target, long offset, long size );	( target offset size -- )
EXTERN: "C" int glObjectPurgeableAPPLE( int objectType, int name, int option );	( objectType name option -- )
EXTERN: "C" int glObjectUnpurgeableAPPLE( int objectType, int name, int option );	( objectType name option -- )
EXTERN: "C" void glGetObjectParameterivAPPLE( int objectType, int name, int pname, void * params );	( objectType name pname params -- )
EXTERN: "C" void glTextureRangeAPPLE( int target, int length, void * pointer );	( target length pointer -- )
EXTERN: "C" void glGetTexParameterPointervAPPLE( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glBindVertexArrayAPPLE( int array );	( array -- )
EXTERN: "C" void glDeleteVertexArraysAPPLE( int n, void * arrays );	( n arrays -- )
EXTERN: "C" void glGenVertexArraysAPPLE( int n, void * arrays );	( n arrays -- )
EXTERN: "C" char glIsVertexArrayAPPLE( int array );	( array -- )
EXTERN: "C" void glVertexArrayRangeAPPLE( int length, void * pointer );	( length pointer -- )
EXTERN: "C" void glFlushVertexArrayRangeAPPLE( int length, void * pointer );	( length pointer -- )
EXTERN: "C" void glVertexArrayParameteriAPPLE( int pname, int param );	( pname param -- )
EXTERN: "C" void glEnableVertexAttribAPPLE( int index, int pname );	( index pname -- )
EXTERN: "C" void glDisableVertexAttribAPPLE( int index, int pname );	( index pname -- )
EXTERN: "C" char glIsVertexAttribEnabledAPPLE( int index, int pname );	( index pname -- )
EXTERN: "C" void glMapVertexAttrib1dAPPLE( int index, int size, double u1, double u2, int stride, int order, void * points );	( index size u1 u2 stride order points -- )
EXTERN: "C" void glMapVertexAttrib1fAPPLE( int index, int size, float u1, float u2, int stride, int order, void * points );	( index size u1 u2 stride order points -- )
EXTERN: "C" void glMapVertexAttrib2dAPPLE( int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, void * points );	( index size u1 u2 ustride uorder v1 v2 vstride vorder points -- )
EXTERN: "C" void glMapVertexAttrib2fAPPLE( int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, void * points );	( index size u1 u2 ustride uorder v1 v2 vstride vorder points -- )
EXTERN: "C" void glDrawBuffersATI( int n, void * bufs );	( n bufs -- )
EXTERN: "C" void glElementPointerATI( int type, void * pointer );	( type pointer -- )
EXTERN: "C" void glDrawElementArrayATI( int mode, int count );	( mode count -- )
EXTERN: "C" void glDrawRangeElementArrayATI( int mode, int start, int end, int count );	( mode start end count -- )
EXTERN: "C" void glTexBumpParameterivATI( int pname, void * param );	( pname param -- )
EXTERN: "C" void glTexBumpParameterfvATI( int pname, void * param );	( pname param -- )
EXTERN: "C" void glGetTexBumpParameterivATI( int pname, void * param );	( pname param -- )
EXTERN: "C" void glGetTexBumpParameterfvATI( int pname, void * param );	( pname param -- )
EXTERN: "C" int glGenFragmentShadersATI( int range );	( range -- )
EXTERN: "C" void glBindFragmentShaderATI( int id );	( id -- )
EXTERN: "C" void glDeleteFragmentShaderATI( int id );	( id -- )
EXTERN: "C" void glBeginFragmentShaderATI(  );	( -- )
EXTERN: "C" void glEndFragmentShaderATI(  );	( -- )
EXTERN: "C" void glPassTexCoordATI( int dst, int coord, int swizzle );	( dst coord swizzle -- )
EXTERN: "C" void glSampleMapATI( int dst, int interp, int swizzle );	( dst interp swizzle -- )
EXTERN: "C" void glColorFragmentOp1ATI( int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod );	( op dst dstMask dstMod arg1 arg1Rep arg1Mod -- )
EXTERN: "C" void glColorFragmentOp2ATI( int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod );	( op dst dstMask dstMod arg1 arg1Rep arg1Mod arg2 arg2Rep arg2Mod -- )
EXTERN: "C" void glColorFragmentOp3ATI( int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod );	( op dst dstMask dstMod arg1 arg1Rep arg1Mod arg2 arg2Rep arg2Mod arg3 arg3Rep arg3Mod -- )
EXTERN: "C" void glAlphaFragmentOp1ATI( int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod );	( op dst dstMod arg1 arg1Rep arg1Mod -- )
EXTERN: "C" void glAlphaFragmentOp2ATI( int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod );	( op dst dstMod arg1 arg1Rep arg1Mod arg2 arg2Rep arg2Mod -- )
EXTERN: "C" void glAlphaFragmentOp3ATI( int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod );	( op dst dstMod arg1 arg1Rep arg1Mod arg2 arg2Rep arg2Mod arg3 arg3Rep arg3Mod -- )
EXTERN: "C" void glSetFragmentShaderConstantATI( int dst, void * value );	( dst value -- )
EXTERN: "C" void * glMapObjectBufferATI( int buffer );	( buffer -- )
EXTERN: "C" void glUnmapObjectBufferATI( int buffer );	( buffer -- )
EXTERN: "C" void glPNTrianglesiATI( int pname, int param );	( pname param -- )
EXTERN: "C" void glPNTrianglesfATI( int pname, float param );	( pname param -- )
EXTERN: "C" void glStencilOpSeparateATI( int face, int sfail, int dpfail, int dppass );	( face sfail dpfail dppass -- )
EXTERN: "C" void glStencilFuncSeparateATI( int frontfunc, int backfunc, int ref, int mask );	( frontfunc backfunc ref mask -- )
EXTERN: "C" int glNewObjectBufferATI( int size, void * pointer, int usage );	( size pointer usage -- )
EXTERN: "C" char glIsObjectBufferATI( int buffer );	( buffer -- )
EXTERN: "C" void glUpdateObjectBufferATI( int buffer, int offset, int size, void * pointer, int preserve );	( buffer offset size pointer preserve -- )
EXTERN: "C" void glGetObjectBufferfvATI( int buffer, int pname, void * params );	( buffer pname params -- )
EXTERN: "C" void glGetObjectBufferivATI( int buffer, int pname, void * params );	( buffer pname params -- )
EXTERN: "C" void glFreeObjectBufferATI( int buffer );	( buffer -- )
EXTERN: "C" void glArrayObjectATI( int array, int size, int type, int stride, int buffer, int offset );	( array size type stride buffer offset -- )
EXTERN: "C" void glGetArrayObjectfvATI( int array, int pname, void * params );	( array pname params -- )
EXTERN: "C" void glGetArrayObjectivATI( int array, int pname, void * params );	( array pname params -- )
EXTERN: "C" void glVariantArrayObjectATI( int id, int type, int stride, int buffer, int offset );	( id type stride buffer offset -- )
EXTERN: "C" void glGetVariantArrayObjectfvATI( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glGetVariantArrayObjectivATI( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glVertexAttribArrayObjectATI( int index, int size, int type, char normalized, int stride, int buffer, int offset );	( index size type normalized stride buffer offset -- )
EXTERN: "C" void glGetVertexAttribArrayObjectfvATI( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribArrayObjectivATI( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glVertexStream1sATI( int stream, short x );	( stream x -- )
EXTERN: "C" void glVertexStream1svATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream1iATI( int stream, int x );	( stream x -- )
EXTERN: "C" void glVertexStream1ivATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream1fATI( int stream, float x );	( stream x -- )
EXTERN: "C" void glVertexStream1fvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream1dATI( int stream, double x );	( stream x -- )
EXTERN: "C" void glVertexStream1dvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream2sATI( int stream, short x, short y );	( stream x y -- )
EXTERN: "C" void glVertexStream2svATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream2iATI( int stream, int x, int y );	( stream x y -- )
EXTERN: "C" void glVertexStream2ivATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream2fATI( int stream, float x, float y );	( stream x y -- )
EXTERN: "C" void glVertexStream2fvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream2dATI( int stream, double x, double y );	( stream x y -- )
EXTERN: "C" void glVertexStream2dvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream3sATI( int stream, short x, short y, short z );	( stream x y z -- )
EXTERN: "C" void glVertexStream3svATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream3iATI( int stream, int x, int y, int z );	( stream x y z -- )
EXTERN: "C" void glVertexStream3ivATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream3fATI( int stream, float x, float y, float z );	( stream x y z -- )
EXTERN: "C" void glVertexStream3fvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream3dATI( int stream, double x, double y, double z );	( stream x y z -- )
EXTERN: "C" void glVertexStream3dvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream4sATI( int stream, short x, short y, short z, short w );	( stream x y z w -- )
EXTERN: "C" void glVertexStream4svATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream4iATI( int stream, int x, int y, int z, int w );	( stream x y z w -- )
EXTERN: "C" void glVertexStream4ivATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream4fATI( int stream, float x, float y, float z, float w );	( stream x y z w -- )
EXTERN: "C" void glVertexStream4fvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glVertexStream4dATI( int stream, double x, double y, double z, double w );	( stream x y z w -- )
EXTERN: "C" void glVertexStream4dvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glNormalStream3bATI( int stream, char nx, char ny, char nz );	( stream nx ny nz -- )
EXTERN: "C" void glNormalStream3bvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glNormalStream3sATI( int stream, short nx, short ny, short nz );	( stream nx ny nz -- )
EXTERN: "C" void glNormalStream3svATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glNormalStream3iATI( int stream, int nx, int ny, int nz );	( stream nx ny nz -- )
EXTERN: "C" void glNormalStream3ivATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glNormalStream3fATI( int stream, float nx, float ny, float nz );	( stream nx ny nz -- )
EXTERN: "C" void glNormalStream3fvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glNormalStream3dATI( int stream, double nx, double ny, double nz );	( stream nx ny nz -- )
EXTERN: "C" void glNormalStream3dvATI( int stream, void * coords );	( stream coords -- )
EXTERN: "C" void glClientActiveVertexStreamATI( int stream );	( stream -- )
EXTERN: "C" void glVertexBlendEnviATI( int pname, int param );	( pname param -- )
EXTERN: "C" void glVertexBlendEnvfATI( int pname, float param );	( pname param -- )
EXTERN: "C" void glUniformBufferEXT( int program, int location, int buffer );	( program location buffer -- )
EXTERN: "C" int glGetUniformBufferSizeEXT( int program, int location );	( program location -- )
EXTERN: "C" long glGetUniformOffsetEXT( int program, int location );	( program location -- )
EXTERN: "C" void glBlendColorEXT( float red, float green, float blue, float alpha );	( red green blue alpha -- )
EXTERN: "C" void glBlendEquationSeparateEXT( int modeRGB, int modeAlpha );	( modeRGB modeAlpha -- )
EXTERN: "C" void glBlendFuncSeparateEXT( int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha );	( sfactorRGB dfactorRGB sfactorAlpha dfactorAlpha -- )
EXTERN: "C" void glBlendEquationEXT( int mode );	( mode -- )
EXTERN: "C" void glColorSubTableEXT( int target, int start, int count, int format, int type, void * data );	( target start count format type data -- )
EXTERN: "C" void glCopyColorSubTableEXT( int target, int start, int x, int y, int width );	( target start x y width -- )
EXTERN: "C" void glLockArraysEXT( int first, int count );	( first count -- )
EXTERN: "C" void glUnlockArraysEXT(  );	( -- )
EXTERN: "C" void glConvolutionFilter1DEXT( int target, int internalformat, int width, int format, int type, void * image );	( target internalformat width format type image -- )
EXTERN: "C" void glConvolutionFilter2DEXT( int target, int internalformat, int width, int height, int format, int type, void * image );	( target internalformat width height format type image -- )
EXTERN: "C" void glConvolutionParameterfEXT( int target, int pname, float params );	( target pname params -- )
EXTERN: "C" void glConvolutionParameterfvEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glConvolutionParameteriEXT( int target, int pname, int params );	( target pname params -- )
EXTERN: "C" void glConvolutionParameterivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glCopyConvolutionFilter1DEXT( int target, int internalformat, int x, int y, int width );	( target internalformat x y width -- )
EXTERN: "C" void glCopyConvolutionFilter2DEXT( int target, int internalformat, int x, int y, int width, int height );	( target internalformat x y width height -- )
EXTERN: "C" void glGetConvolutionFilterEXT( int target, int format, int type, void * image );	( target format type image -- )
EXTERN: "C" void glGetConvolutionParameterfvEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetConvolutionParameterivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetSeparableFilterEXT( int target, int format, int type, void * row, void * column, void * span );	( target format type row column span -- )
EXTERN: "C" void glSeparableFilter2DEXT( int target, int internalformat, int width, int height, int format, int type, void * row, void * column );	( target internalformat width height format type row column -- )
EXTERN: "C" void glTangent3bEXT( char tx, char ty, char tz );	( tx ty tz -- )
EXTERN: "C" void glTangent3bvEXT( void * v );	( v -- )
EXTERN: "C" void glTangent3dEXT( double tx, double ty, double tz );	( tx ty tz -- )
EXTERN: "C" void glTangent3dvEXT( void * v );	( v -- )
EXTERN: "C" void glTangent3fEXT( float tx, float ty, float tz );	( tx ty tz -- )
EXTERN: "C" void glTangent3fvEXT( void * v );	( v -- )
EXTERN: "C" void glTangent3iEXT( int tx, int ty, int tz );	( tx ty tz -- )
EXTERN: "C" void glTangent3ivEXT( void * v );	( v -- )
EXTERN: "C" void glTangent3sEXT( short tx, short ty, short tz );	( tx ty tz -- )
EXTERN: "C" void glTangent3svEXT( void * v );	( v -- )
EXTERN: "C" void glBinormal3bEXT( char bx, char by, char bz );	( bx by bz -- )
EXTERN: "C" void glBinormal3bvEXT( void * v );	( v -- )
EXTERN: "C" void glBinormal3dEXT( double bx, double by, double bz );	( bx by bz -- )
EXTERN: "C" void glBinormal3dvEXT( void * v );	( v -- )
EXTERN: "C" void glBinormal3fEXT( float bx, float by, float bz );	( bx by bz -- )
EXTERN: "C" void glBinormal3fvEXT( void * v );	( v -- )
EXTERN: "C" void glBinormal3iEXT( int bx, int by, int bz );	( bx by bz -- )
EXTERN: "C" void glBinormal3ivEXT( void * v );	( v -- )
EXTERN: "C" void glBinormal3sEXT( short bx, short by, short bz );	( bx by bz -- )
EXTERN: "C" void glBinormal3svEXT( void * v );	( v -- )
EXTERN: "C" void glTangentPointerEXT( int type, int stride, void * pointer );	( type stride pointer -- )
EXTERN: "C" void glBinormalPointerEXT( int type, int stride, void * pointer );	( type stride pointer -- )
EXTERN: "C" void glCopyTexImage1DEXT( int target, int level, int internalformat, int x, int y, int width, int border );	( target level internalformat x y width border -- )
EXTERN: "C" void glCopyTexImage2DEXT( int target, int level, int internalformat, int x, int y, int width, int height, int border );	( target level internalformat x y width height border -- )
EXTERN: "C" void glCopyTexSubImage1DEXT( int target, int level, int xoffset, int x, int y, int width );	( target level xoffset x y width -- )
EXTERN: "C" void glCopyTexSubImage2DEXT( int target, int level, int xoffset, int yoffset, int x, int y, int width, int height );	( target level xoffset yoffset x y width height -- )
EXTERN: "C" void glCopyTexSubImage3DEXT( int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height );	( target level xoffset yoffset zoffset x y width height -- )
EXTERN: "C" void glCullParameterdvEXT( int pname, void * params );	( pname params -- )
EXTERN: "C" void glCullParameterfvEXT( int pname, void * params );	( pname params -- )
EXTERN: "C" void glLabelObjectEXT( int type, int object, int length, char * label );	( type object length label -- )
EXTERN: "C" void glGetObjectLabelEXT( int type, int object, int bufSize, void * length, void * label );	( type object bufSize length label -- )
EXTERN: "C" void glInsertEventMarkerEXT( int length, char * marker );	( length marker -- )
EXTERN: "C" void glPushGroupMarkerEXT( int length, char * marker );	( length marker -- )
EXTERN: "C" void glPopGroupMarkerEXT(  );	( -- )
EXTERN: "C" void glDepthBoundsEXT( double zmin, double zmax );	( zmin zmax -- )
EXTERN: "C" void glMatrixLoadfEXT( int mode, void * m );	( mode m -- )
EXTERN: "C" void glMatrixLoaddEXT( int mode, void * m );	( mode m -- )
EXTERN: "C" void glMatrixMultfEXT( int mode, void * m );	( mode m -- )
EXTERN: "C" void glMatrixMultdEXT( int mode, void * m );	( mode m -- )
EXTERN: "C" void glMatrixLoadIdentityEXT( int mode );	( mode -- )
EXTERN: "C" void glMatrixRotatefEXT( int mode, float angle, float x, float y, float z );	( mode angle x y z -- )
EXTERN: "C" void glMatrixRotatedEXT( int mode, double angle, double x, double y, double z );	( mode angle x y z -- )
EXTERN: "C" void glMatrixScalefEXT( int mode, float x, float y, float z );	( mode x y z -- )
EXTERN: "C" void glMatrixScaledEXT( int mode, double x, double y, double z );	( mode x y z -- )
EXTERN: "C" void glMatrixTranslatefEXT( int mode, float x, float y, float z );	( mode x y z -- )
EXTERN: "C" void glMatrixTranslatedEXT( int mode, double x, double y, double z );	( mode x y z -- )
EXTERN: "C" void glMatrixFrustumEXT( int mode, double left, double right, double bottom, double top, double zNear, double zFar );	( mode left right bottom top zNear zFar -- )
EXTERN: "C" void glMatrixOrthoEXT( int mode, double left, double right, double bottom, double top, double zNear, double zFar );	( mode left right bottom top zNear zFar -- )
EXTERN: "C" void glMatrixPopEXT( int mode );	( mode -- )
EXTERN: "C" void glMatrixPushEXT( int mode );	( mode -- )
EXTERN: "C" void glClientAttribDefaultEXT( int mask );	( mask -- )
EXTERN: "C" void glPushClientAttribDefaultEXT( int mask );	( mask -- )
EXTERN: "C" void glTextureParameterfEXT( int texture, int target, int pname, float param );	( texture target pname param -- )
EXTERN: "C" void glTextureParameterfvEXT( int texture, int target, int pname, void * params );	( texture target pname params -- )
EXTERN: "C" void glTextureParameteriEXT( int texture, int target, int pname, int param );	( texture target pname param -- )
EXTERN: "C" void glTextureParameterivEXT( int texture, int target, int pname, void * params );	( texture target pname params -- )
EXTERN: "C" void glTextureImage1DEXT( int texture, int target, int level, int internalformat, int width, int border, int format, int type, void * pixels );	( texture target level internalformat width border format type pixels -- )
EXTERN: "C" void glTextureImage2DEXT( int texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, void * pixels );	( texture target level internalformat width height border format type pixels -- )
EXTERN: "C" void glTextureSubImage1DEXT( int texture, int target, int level, int xoffset, int width, int format, int type, void * pixels );	( texture target level xoffset width format type pixels -- )
EXTERN: "C" void glTextureSubImage2DEXT( int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, void * pixels );	( texture target level xoffset yoffset width height format type pixels -- )
EXTERN: "C" void glCopyTextureImage1DEXT( int texture, int target, int level, int internalformat, int x, int y, int width, int border );	( texture target level internalformat x y width border -- )
EXTERN: "C" void glCopyTextureImage2DEXT( int texture, int target, int level, int internalformat, int x, int y, int width, int height, int border );	( texture target level internalformat x y width height border -- )
EXTERN: "C" void glCopyTextureSubImage1DEXT( int texture, int target, int level, int xoffset, int x, int y, int width );	( texture target level xoffset x y width -- )
EXTERN: "C" void glCopyTextureSubImage2DEXT( int texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height );	( texture target level xoffset yoffset x y width height -- )
EXTERN: "C" void glGetTextureImageEXT( int texture, int target, int level, int format, int type, void * pixels );	( texture target level format type pixels -- )
EXTERN: "C" void glGetTextureParameterfvEXT( int texture, int target, int pname, void * params );	( texture target pname params -- )
EXTERN: "C" void glGetTextureParameterivEXT( int texture, int target, int pname, void * params );	( texture target pname params -- )
EXTERN: "C" void glGetTextureLevelParameterfvEXT( int texture, int target, int level, int pname, void * params );	( texture target level pname params -- )
EXTERN: "C" void glGetTextureLevelParameterivEXT( int texture, int target, int level, int pname, void * params );	( texture target level pname params -- )
EXTERN: "C" void glTextureImage3DEXT( int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, void * pixels );	( texture target level internalformat width height depth border format type pixels -- )
EXTERN: "C" void glTextureSubImage3DEXT( int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, void * pixels );	( texture target level xoffset yoffset zoffset width height depth format type pixels -- )
EXTERN: "C" void glCopyTextureSubImage3DEXT( int texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height );	( texture target level xoffset yoffset zoffset x y width height -- )
EXTERN: "C" void glBindMultiTextureEXT( int texunit, int target, int texture );	( texunit target texture -- )
EXTERN: "C" void glMultiTexCoordPointerEXT( int texunit, int size, int type, int stride, void * pointer );	( texunit size type stride pointer -- )
EXTERN: "C" void glMultiTexEnvfEXT( int texunit, int target, int pname, float param );	( texunit target pname param -- )
EXTERN: "C" void glMultiTexEnvfvEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glMultiTexEnviEXT( int texunit, int target, int pname, int param );	( texunit target pname param -- )
EXTERN: "C" void glMultiTexEnvivEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glMultiTexGendEXT( int texunit, int coord, int pname, double param );	( texunit coord pname param -- )
EXTERN: "C" void glMultiTexGendvEXT( int texunit, int coord, int pname, void * params );	( texunit coord pname params -- )
EXTERN: "C" void glMultiTexGenfEXT( int texunit, int coord, int pname, float param );	( texunit coord pname param -- )
EXTERN: "C" void glMultiTexGenfvEXT( int texunit, int coord, int pname, void * params );	( texunit coord pname params -- )
EXTERN: "C" void glMultiTexGeniEXT( int texunit, int coord, int pname, int param );	( texunit coord pname param -- )
EXTERN: "C" void glMultiTexGenivEXT( int texunit, int coord, int pname, void * params );	( texunit coord pname params -- )
EXTERN: "C" void glGetMultiTexEnvfvEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glGetMultiTexEnvivEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glGetMultiTexGendvEXT( int texunit, int coord, int pname, void * params );	( texunit coord pname params -- )
EXTERN: "C" void glGetMultiTexGenfvEXT( int texunit, int coord, int pname, void * params );	( texunit coord pname params -- )
EXTERN: "C" void glGetMultiTexGenivEXT( int texunit, int coord, int pname, void * params );	( texunit coord pname params -- )
EXTERN: "C" void glMultiTexParameteriEXT( int texunit, int target, int pname, int param );	( texunit target pname param -- )
EXTERN: "C" void glMultiTexParameterivEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glMultiTexParameterfEXT( int texunit, int target, int pname, float param );	( texunit target pname param -- )
EXTERN: "C" void glMultiTexParameterfvEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glMultiTexImage1DEXT( int texunit, int target, int level, int internalformat, int width, int border, int format, int type, void * pixels );	( texunit target level internalformat width border format type pixels -- )
EXTERN: "C" void glMultiTexImage2DEXT( int texunit, int target, int level, int internalformat, int width, int height, int border, int format, int type, void * pixels );	( texunit target level internalformat width height border format type pixels -- )
EXTERN: "C" void glMultiTexSubImage1DEXT( int texunit, int target, int level, int xoffset, int width, int format, int type, void * pixels );	( texunit target level xoffset width format type pixels -- )
EXTERN: "C" void glMultiTexSubImage2DEXT( int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, void * pixels );	( texunit target level xoffset yoffset width height format type pixels -- )
EXTERN: "C" void glCopyMultiTexImage1DEXT( int texunit, int target, int level, int internalformat, int x, int y, int width, int border );	( texunit target level internalformat x y width border -- )
EXTERN: "C" void glCopyMultiTexImage2DEXT( int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border );	( texunit target level internalformat x y width height border -- )
EXTERN: "C" void glCopyMultiTexSubImage1DEXT( int texunit, int target, int level, int xoffset, int x, int y, int width );	( texunit target level xoffset x y width -- )
EXTERN: "C" void glCopyMultiTexSubImage2DEXT( int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height );	( texunit target level xoffset yoffset x y width height -- )
EXTERN: "C" void glGetMultiTexImageEXT( int texunit, int target, int level, int format, int type, void * pixels );	( texunit target level format type pixels -- )
EXTERN: "C" void glGetMultiTexParameterfvEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glGetMultiTexParameterivEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glGetMultiTexLevelParameterfvEXT( int texunit, int target, int level, int pname, void * params );	( texunit target level pname params -- )
EXTERN: "C" void glGetMultiTexLevelParameterivEXT( int texunit, int target, int level, int pname, void * params );	( texunit target level pname params -- )
EXTERN: "C" void glMultiTexImage3DEXT( int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, void * pixels );	( texunit target level internalformat width height depth border format type pixels -- )
EXTERN: "C" void glMultiTexSubImage3DEXT( int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, void * pixels );	( texunit target level xoffset yoffset zoffset width height depth format type pixels -- )
EXTERN: "C" void glCopyMultiTexSubImage3DEXT( int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height );	( texunit target level xoffset yoffset zoffset x y width height -- )
EXTERN: "C" void glEnableClientStateIndexedEXT( int array, int index );	( array index -- )
EXTERN: "C" void glDisableClientStateIndexedEXT( int array, int index );	( array index -- )
EXTERN: "C" void glGetFloatIndexedvEXT( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glGetDoubleIndexedvEXT( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glGetPointerIndexedvEXT( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glEnableIndexedEXT( int target, int index );	( target index -- )
EXTERN: "C" void glDisableIndexedEXT( int target, int index );	( target index -- )
EXTERN: "C" char glIsEnabledIndexedEXT( int target, int index );	( target index -- )
EXTERN: "C" void glGetIntegerIndexedvEXT( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glGetBooleanIndexedvEXT( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glCompressedTextureImage3DEXT( int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, void * bits );	( texture target level internalformat width height depth border imageSize bits -- )
EXTERN: "C" void glCompressedTextureImage2DEXT( int texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, void * bits );	( texture target level internalformat width height border imageSize bits -- )
EXTERN: "C" void glCompressedTextureImage1DEXT( int texture, int target, int level, int internalformat, int width, int border, int imageSize, void * bits );	( texture target level internalformat width border imageSize bits -- )
EXTERN: "C" void glCompressedTextureSubImage3DEXT( int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, void * bits );	( texture target level xoffset yoffset zoffset width height depth format imageSize bits -- )
EXTERN: "C" void glCompressedTextureSubImage2DEXT( int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, void * bits );	( texture target level xoffset yoffset width height format imageSize bits -- )
EXTERN: "C" void glCompressedTextureSubImage1DEXT( int texture, int target, int level, int xoffset, int width, int format, int imageSize, void * bits );	( texture target level xoffset width format imageSize bits -- )
EXTERN: "C" void glGetCompressedTextureImageEXT( int texture, int target, int lod, void * img );	( texture target lod img -- )
EXTERN: "C" void glCompressedMultiTexImage3DEXT( int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, void * bits );	( texunit target level internalformat width height depth border imageSize bits -- )
EXTERN: "C" void glCompressedMultiTexImage2DEXT( int texunit, int target, int level, int internalformat, int width, int height, int border, int imageSize, void * bits );	( texunit target level internalformat width height border imageSize bits -- )
EXTERN: "C" void glCompressedMultiTexImage1DEXT( int texunit, int target, int level, int internalformat, int width, int border, int imageSize, void * bits );	( texunit target level internalformat width border imageSize bits -- )
EXTERN: "C" void glCompressedMultiTexSubImage3DEXT( int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, void * bits );	( texunit target level xoffset yoffset zoffset width height depth format imageSize bits -- )
EXTERN: "C" void glCompressedMultiTexSubImage2DEXT( int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, void * bits );	( texunit target level xoffset yoffset width height format imageSize bits -- )
EXTERN: "C" void glCompressedMultiTexSubImage1DEXT( int texunit, int target, int level, int xoffset, int width, int format, int imageSize, void * bits );	( texunit target level xoffset width format imageSize bits -- )
EXTERN: "C" void glGetCompressedMultiTexImageEXT( int texunit, int target, int lod, void * img );	( texunit target lod img -- )
EXTERN: "C" void glMatrixLoadTransposefEXT( int mode, void * m );	( mode m -- )
EXTERN: "C" void glMatrixLoadTransposedEXT( int mode, void * m );	( mode m -- )
EXTERN: "C" void glMatrixMultTransposefEXT( int mode, void * m );	( mode m -- )
EXTERN: "C" void glMatrixMultTransposedEXT( int mode, void * m );	( mode m -- )
EXTERN: "C" void glNamedBufferDataEXT( int buffer, long size, void * data, int usage );	( buffer size data usage -- )
EXTERN: "C" void glNamedBufferSubDataEXT( int buffer, long offset, long size, void * data );	( buffer offset size data -- )
EXTERN: "C" void * glMapNamedBufferEXT( int buffer, int access );	( buffer access -- )
EXTERN: "C" char glUnmapNamedBufferEXT( int buffer );	( buffer -- )
EXTERN: "C" void glGetNamedBufferParameterivEXT( int buffer, int pname, void * params );	( buffer pname params -- )
EXTERN: "C" void glGetNamedBufferPointervEXT( int buffer, int pname, void * params );	( buffer pname params -- )
EXTERN: "C" void glGetNamedBufferSubDataEXT( int buffer, long offset, long size, void * data );	( buffer offset size data -- )
EXTERN: "C" void glProgramUniform1fEXT( int program, int location, float v0 );	( program location v0 -- )
EXTERN: "C" void glProgramUniform2fEXT( int program, int location, float v0, float v1 );	( program location v0 v1 -- )
EXTERN: "C" void glProgramUniform3fEXT( int program, int location, float v0, float v1, float v2 );	( program location v0 v1 v2 -- )
EXTERN: "C" void glProgramUniform4fEXT( int program, int location, float v0, float v1, float v2, float v3 );	( program location v0 v1 v2 v3 -- )
EXTERN: "C" void glProgramUniform1iEXT( int program, int location, int v0 );	( program location v0 -- )
EXTERN: "C" void glProgramUniform2iEXT( int program, int location, int v0, int v1 );	( program location v0 v1 -- )
EXTERN: "C" void glProgramUniform3iEXT( int program, int location, int v0, int v1, int v2 );	( program location v0 v1 v2 -- )
EXTERN: "C" void glProgramUniform4iEXT( int program, int location, int v0, int v1, int v2, int v3 );	( program location v0 v1 v2 v3 -- )
EXTERN: "C" void glProgramUniform1fvEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2fvEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3fvEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4fvEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform1ivEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2ivEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3ivEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4ivEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniformMatrix2fvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3fvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4fvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix2x3fvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3x2fvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix2x4fvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4x2fvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3x4fvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4x3fvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glTextureBufferEXT( int texture, int target, int internalformat, int buffer );	( texture target internalformat buffer -- )
EXTERN: "C" void glMultiTexBufferEXT( int texunit, int target, int internalformat, int buffer );	( texunit target internalformat buffer -- )
EXTERN: "C" void glTextureParameterIivEXT( int texture, int target, int pname, void * params );	( texture target pname params -- )
EXTERN: "C" void glTextureParameterIuivEXT( int texture, int target, int pname, void * params );	( texture target pname params -- )
EXTERN: "C" void glGetTextureParameterIivEXT( int texture, int target, int pname, void * params );	( texture target pname params -- )
EXTERN: "C" void glGetTextureParameterIuivEXT( int texture, int target, int pname, void * params );	( texture target pname params -- )
EXTERN: "C" void glMultiTexParameterIivEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glMultiTexParameterIuivEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glGetMultiTexParameterIivEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glGetMultiTexParameterIuivEXT( int texunit, int target, int pname, void * params );	( texunit target pname params -- )
EXTERN: "C" void glProgramUniform1uiEXT( int program, int location, int v0 );	( program location v0 -- )
EXTERN: "C" void glProgramUniform2uiEXT( int program, int location, int v0, int v1 );	( program location v0 v1 -- )
EXTERN: "C" void glProgramUniform3uiEXT( int program, int location, int v0, int v1, int v2 );	( program location v0 v1 v2 -- )
EXTERN: "C" void glProgramUniform4uiEXT( int program, int location, int v0, int v1, int v2, int v3 );	( program location v0 v1 v2 v3 -- )
EXTERN: "C" void glProgramUniform1uivEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2uivEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3uivEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4uivEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glNamedProgramLocalParameters4fvEXT( int program, int target, int index, int count, void * params );	( program target index count params -- )
EXTERN: "C" void glNamedProgramLocalParameterI4iEXT( int program, int target, int index, int x, int y, int z, int w );	( program target index x y z w -- )
EXTERN: "C" void glNamedProgramLocalParameterI4ivEXT( int program, int target, int index, void * params );	( program target index params -- )
EXTERN: "C" void glNamedProgramLocalParametersI4ivEXT( int program, int target, int index, int count, void * params );	( program target index count params -- )
EXTERN: "C" void glNamedProgramLocalParameterI4uiEXT( int program, int target, int index, int x, int y, int z, int w );	( program target index x y z w -- )
EXTERN: "C" void glNamedProgramLocalParameterI4uivEXT( int program, int target, int index, void * params );	( program target index params -- )
EXTERN: "C" void glNamedProgramLocalParametersI4uivEXT( int program, int target, int index, int count, void * params );	( program target index count params -- )
EXTERN: "C" void glGetNamedProgramLocalParameterIivEXT( int program, int target, int index, void * params );	( program target index params -- )
EXTERN: "C" void glGetNamedProgramLocalParameterIuivEXT( int program, int target, int index, void * params );	( program target index params -- )
EXTERN: "C" void glEnableClientStateiEXT( int array, int index );	( array index -- )
EXTERN: "C" void glDisableClientStateiEXT( int array, int index );	( array index -- )
EXTERN: "C" void glGetFloati_vEXT( int pname, int index, void * params );	( pname index params -- )
EXTERN: "C" void glGetDoublei_vEXT( int pname, int index, void * params );	( pname index params -- )
EXTERN: "C" void glGetPointeri_vEXT( int pname, int index, void * params );	( pname index params -- )
EXTERN: "C" void glNamedProgramStringEXT( int program, int target, int format, int len, void * string );	( program target format len string -- )
EXTERN: "C" void glNamedProgramLocalParameter4dEXT( int program, int target, int index, double x, double y, double z, double w );	( program target index x y z w -- )
EXTERN: "C" void glNamedProgramLocalParameter4dvEXT( int program, int target, int index, void * params );	( program target index params -- )
EXTERN: "C" void glNamedProgramLocalParameter4fEXT( int program, int target, int index, float x, float y, float z, float w );	( program target index x y z w -- )
EXTERN: "C" void glNamedProgramLocalParameter4fvEXT( int program, int target, int index, void * params );	( program target index params -- )
EXTERN: "C" void glGetNamedProgramLocalParameterdvEXT( int program, int target, int index, void * params );	( program target index params -- )
EXTERN: "C" void glGetNamedProgramLocalParameterfvEXT( int program, int target, int index, void * params );	( program target index params -- )
EXTERN: "C" void glGetNamedProgramivEXT( int program, int target, int pname, void * params );	( program target pname params -- )
EXTERN: "C" void glGetNamedProgramStringEXT( int program, int target, int pname, void * string );	( program target pname string -- )
EXTERN: "C" void glNamedRenderbufferStorageEXT( int renderbuffer, int internalformat, int width, int height );	( renderbuffer internalformat width height -- )
EXTERN: "C" void glGetNamedRenderbufferParameterivEXT( int renderbuffer, int pname, void * params );	( renderbuffer pname params -- )
EXTERN: "C" void glNamedRenderbufferStorageMultisampleEXT( int renderbuffer, int samples, int internalformat, int width, int height );	( renderbuffer samples internalformat width height -- )
EXTERN: "C" void glNamedRenderbufferStorageMultisampleCoverageEXT( int renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height );	( renderbuffer coverageSamples colorSamples internalformat width height -- )
EXTERN: "C" int glCheckNamedFramebufferStatusEXT( int framebuffer, int target );	( framebuffer target -- )
EXTERN: "C" void glNamedFramebufferTexture1DEXT( int framebuffer, int attachment, int textarget, int texture, int level );	( framebuffer attachment textarget texture level -- )
EXTERN: "C" void glNamedFramebufferTexture2DEXT( int framebuffer, int attachment, int textarget, int texture, int level );	( framebuffer attachment textarget texture level -- )
EXTERN: "C" void glNamedFramebufferTexture3DEXT( int framebuffer, int attachment, int textarget, int texture, int level, int zoffset );	( framebuffer attachment textarget texture level zoffset -- )
EXTERN: "C" void glNamedFramebufferRenderbufferEXT( int framebuffer, int attachment, int renderbuffertarget, int renderbuffer );	( framebuffer attachment renderbuffertarget renderbuffer -- )
EXTERN: "C" void glGetNamedFramebufferAttachmentParameterivEXT( int framebuffer, int attachment, int pname, void * params );	( framebuffer attachment pname params -- )
EXTERN: "C" void glGenerateTextureMipmapEXT( int texture, int target );	( texture target -- )
EXTERN: "C" void glGenerateMultiTexMipmapEXT( int texunit, int target );	( texunit target -- )
EXTERN: "C" void glFramebufferDrawBufferEXT( int framebuffer, int mode );	( framebuffer mode -- )
EXTERN: "C" void glFramebufferDrawBuffersEXT( int framebuffer, int n, void * bufs );	( framebuffer n bufs -- )
EXTERN: "C" void glFramebufferReadBufferEXT( int framebuffer, int mode );	( framebuffer mode -- )
EXTERN: "C" void glGetFramebufferParameterivEXT( int framebuffer, int pname, void * params );	( framebuffer pname params -- )
EXTERN: "C" void glNamedCopyBufferSubDataEXT( int readBuffer, int writeBuffer, long readOffset, long writeOffset, long size );	( readBuffer writeBuffer readOffset writeOffset size -- )
EXTERN: "C" void glNamedFramebufferTextureEXT( int framebuffer, int attachment, int texture, int level );	( framebuffer attachment texture level -- )
EXTERN: "C" void glNamedFramebufferTextureLayerEXT( int framebuffer, int attachment, int texture, int level, int layer );	( framebuffer attachment texture level layer -- )
EXTERN: "C" void glNamedFramebufferTextureFaceEXT( int framebuffer, int attachment, int texture, int level, int face );	( framebuffer attachment texture level face -- )
EXTERN: "C" void glTextureRenderbufferEXT( int texture, int target, int renderbuffer );	( texture target renderbuffer -- )
EXTERN: "C" void glMultiTexRenderbufferEXT( int texunit, int target, int renderbuffer );	( texunit target renderbuffer -- )
EXTERN: "C" void glVertexArrayVertexOffsetEXT( int vaobj, int buffer, int size, int type, int stride, long offset );	( vaobj buffer size type stride offset -- )
EXTERN: "C" void glVertexArrayColorOffsetEXT( int vaobj, int buffer, int size, int type, int stride, long offset );	( vaobj buffer size type stride offset -- )
EXTERN: "C" void glVertexArrayEdgeFlagOffsetEXT( int vaobj, int buffer, int stride, long offset );	( vaobj buffer stride offset -- )
EXTERN: "C" void glVertexArrayIndexOffsetEXT( int vaobj, int buffer, int type, int stride, long offset );	( vaobj buffer type stride offset -- )
EXTERN: "C" void glVertexArrayNormalOffsetEXT( int vaobj, int buffer, int type, int stride, long offset );	( vaobj buffer type stride offset -- )
EXTERN: "C" void glVertexArrayTexCoordOffsetEXT( int vaobj, int buffer, int size, int type, int stride, long offset );	( vaobj buffer size type stride offset -- )
EXTERN: "C" void glVertexArrayMultiTexCoordOffsetEXT( int vaobj, int buffer, int texunit, int size, int type, int stride, long offset );	( vaobj buffer texunit size type stride offset -- )
EXTERN: "C" void glVertexArrayFogCoordOffsetEXT( int vaobj, int buffer, int type, int stride, long offset );	( vaobj buffer type stride offset -- )
EXTERN: "C" void glVertexArraySecondaryColorOffsetEXT( int vaobj, int buffer, int size, int type, int stride, long offset );	( vaobj buffer size type stride offset -- )
EXTERN: "C" void glVertexArrayVertexAttribOffsetEXT( int vaobj, int buffer, int index, int size, int type, char normalized, int stride, long offset );	( vaobj buffer index size type normalized stride offset -- )
EXTERN: "C" void glVertexArrayVertexAttribIOffsetEXT( int vaobj, int buffer, int index, int size, int type, int stride, long offset );	( vaobj buffer index size type stride offset -- )
EXTERN: "C" void glEnableVertexArrayEXT( int vaobj, int array );	( vaobj array -- )
EXTERN: "C" void glDisableVertexArrayEXT( int vaobj, int array );	( vaobj array -- )
EXTERN: "C" void glEnableVertexArrayAttribEXT( int vaobj, int index );	( vaobj index -- )
EXTERN: "C" void glDisableVertexArrayAttribEXT( int vaobj, int index );	( vaobj index -- )
EXTERN: "C" void glGetVertexArrayIntegervEXT( int vaobj, int pname, void * param );	( vaobj pname param -- )
EXTERN: "C" void glGetVertexArrayPointervEXT( int vaobj, int pname, void * param );	( vaobj pname param -- )
EXTERN: "C" void glGetVertexArrayIntegeri_vEXT( int vaobj, int index, int pname, void * param );	( vaobj index pname param -- )
EXTERN: "C" void glGetVertexArrayPointeri_vEXT( int vaobj, int index, int pname, void * param );	( vaobj index pname param -- )
EXTERN: "C" void * glMapNamedBufferRangeEXT( int buffer, long offset, long length, int access );	( buffer offset length access -- )
EXTERN: "C" void glFlushMappedNamedBufferRangeEXT( int buffer, long offset, long length );	( buffer offset length -- )
EXTERN: "C" void glNamedBufferStorageEXT( int buffer, long size, void * data, int flags );	( buffer size data flags -- )
EXTERN: "C" void glClearNamedBufferDataEXT( int buffer, int internalformat, int format, int type, void * data );	( buffer internalformat format type data -- )
EXTERN: "C" void glClearNamedBufferSubDataEXT( int buffer, int internalformat, long offset, long size, int format, int type, void * data );	( buffer internalformat offset size format type data -- )
EXTERN: "C" void glNamedFramebufferParameteriEXT( int framebuffer, int pname, int param );	( framebuffer pname param -- )
EXTERN: "C" void glGetNamedFramebufferParameterivEXT( int framebuffer, int pname, void * params );	( framebuffer pname params -- )
EXTERN: "C" void glProgramUniform1dEXT( int program, int location, double x );	( program location x -- )
EXTERN: "C" void glProgramUniform2dEXT( int program, int location, double x, double y );	( program location x y -- )
EXTERN: "C" void glProgramUniform3dEXT( int program, int location, double x, double y, double z );	( program location x y z -- )
EXTERN: "C" void glProgramUniform4dEXT( int program, int location, double x, double y, double z, double w );	( program location x y z w -- )
EXTERN: "C" void glProgramUniform1dvEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform2dvEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform3dvEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniform4dvEXT( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glProgramUniformMatrix2dvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3dvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4dvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix2x3dvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix2x4dvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3x2dvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix3x4dvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4x2dvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glProgramUniformMatrix4x3dvEXT( int program, int location, int count, char transpose, void * value );	( program location count transpose value -- )
EXTERN: "C" void glTextureBufferRangeEXT( int texture, int target, int internalformat, int buffer, long offset, long size );	( texture target internalformat buffer offset size -- )
EXTERN: "C" void glTextureStorage1DEXT( int texture, int target, int levels, int internalformat, int width );	( texture target levels internalformat width -- )
EXTERN: "C" void glTextureStorage2DEXT( int texture, int target, int levels, int internalformat, int width, int height );	( texture target levels internalformat width height -- )
EXTERN: "C" void glTextureStorage3DEXT( int texture, int target, int levels, int internalformat, int width, int height, int depth );	( texture target levels internalformat width height depth -- )
EXTERN: "C" void glTextureStorage2DMultisampleEXT( int texture, int target, int samples, int internalformat, int width, int height, char fixedsamplelocations );	( texture target samples internalformat width height fixedsamplelocations -- )
EXTERN: "C" void glTextureStorage3DMultisampleEXT( int texture, int target, int samples, int internalformat, int width, int height, int depth, char fixedsamplelocations );	( texture target samples internalformat width height depth fixedsamplelocations -- )
EXTERN: "C" void glVertexArrayBindVertexBufferEXT( int vaobj, int bindingindex, int buffer, long offset, int stride );	( vaobj bindingindex buffer offset stride -- )
EXTERN: "C" void glVertexArrayVertexAttribFormatEXT( int vaobj, int attribindex, int size, int type, char normalized, int relativeoffset );	( vaobj attribindex size type normalized relativeoffset -- )
EXTERN: "C" void glVertexArrayVertexAttribIFormatEXT( int vaobj, int attribindex, int size, int type, int relativeoffset );	( vaobj attribindex size type relativeoffset -- )
EXTERN: "C" void glVertexArrayVertexAttribLFormatEXT( int vaobj, int attribindex, int size, int type, int relativeoffset );	( vaobj attribindex size type relativeoffset -- )
EXTERN: "C" void glVertexArrayVertexAttribBindingEXT( int vaobj, int attribindex, int bindingindex );	( vaobj attribindex bindingindex -- )
EXTERN: "C" void glVertexArrayVertexBindingDivisorEXT( int vaobj, int bindingindex, int divisor );	( vaobj bindingindex divisor -- )
EXTERN: "C" void glVertexArrayVertexAttribLOffsetEXT( int vaobj, int buffer, int index, int size, int type, int stride, long offset );	( vaobj buffer index size type stride offset -- )
EXTERN: "C" void glTexturePageCommitmentEXT( int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, char commit );	( texture level xoffset yoffset zoffset width height depth commit -- )
EXTERN: "C" void glVertexArrayVertexAttribDivisorEXT( int vaobj, int index, int divisor );	( vaobj index divisor -- )
EXTERN: "C" void glColorMaskIndexedEXT( int index, char r, char g, char b, char a );	( index r g b a -- )
EXTERN: "C" void glDrawArraysInstancedEXT( int mode, int start, int count, int primcount );	( mode start count primcount -- )
EXTERN: "C" void glDrawElementsInstancedEXT( int mode, int count, int type, void * indices, int primcount );	( mode count type indices primcount -- )
EXTERN: "C" void glDrawRangeElementsEXT( int mode, int start, int end, int count, int type, void * indices );	( mode start end count type indices -- )
EXTERN: "C" void glBufferStorageExternalEXT( int target, long offset, long size, void * clientBuffer, int flags );	( target offset size clientBuffer flags -- )
EXTERN: "C" void glNamedBufferStorageExternalEXT( int buffer, long offset, long size, void * clientBuffer, int flags );	( buffer offset size clientBuffer flags -- )
EXTERN: "C" void glFogCoordfEXT( float coord );	( coord -- )
EXTERN: "C" void glFogCoordfvEXT( void * coord );	( coord -- )
EXTERN: "C" void glFogCoorddEXT( double coord );	( coord -- )
EXTERN: "C" void glFogCoorddvEXT( void * coord );	( coord -- )
EXTERN: "C" void glFogCoordPointerEXT( int type, int stride, void * pointer );	( type stride pointer -- )
EXTERN: "C" void glBlitFramebufferEXT( int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter );	( srcX0 srcY0 srcX1 srcY1 dstX0 dstY0 dstX1 dstY1 mask filter -- )
EXTERN: "C" void glRenderbufferStorageMultisampleEXT( int target, int samples, int internalformat, int width, int height );	( target samples internalformat width height -- )
EXTERN: "C" char glIsRenderbufferEXT( int renderbuffer );	( renderbuffer -- )
EXTERN: "C" void glBindRenderbufferEXT( int target, int renderbuffer );	( target renderbuffer -- )
EXTERN: "C" void glDeleteRenderbuffersEXT( int n, void * renderbuffers );	( n renderbuffers -- )
EXTERN: "C" void glGenRenderbuffersEXT( int n, void * renderbuffers );	( n renderbuffers -- )
EXTERN: "C" void glRenderbufferStorageEXT( int target, int internalformat, int width, int height );	( target internalformat width height -- )
EXTERN: "C" void glGetRenderbufferParameterivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" char glIsFramebufferEXT( int framebuffer );	( framebuffer -- )
EXTERN: "C" void glBindFramebufferEXT( int target, int framebuffer );	( target framebuffer -- )
EXTERN: "C" void glDeleteFramebuffersEXT( int n, void * framebuffers );	( n framebuffers -- )
EXTERN: "C" void glGenFramebuffersEXT( int n, void * framebuffers );	( n framebuffers -- )
EXTERN: "C" int glCheckFramebufferStatusEXT( int target );	( target -- )
EXTERN: "C" void glFramebufferTexture1DEXT( int target, int attachment, int textarget, int texture, int level );	( target attachment textarget texture level -- )
EXTERN: "C" void glFramebufferTexture2DEXT( int target, int attachment, int textarget, int texture, int level );	( target attachment textarget texture level -- )
EXTERN: "C" void glFramebufferTexture3DEXT( int target, int attachment, int textarget, int texture, int level, int zoffset );	( target attachment textarget texture level zoffset -- )
EXTERN: "C" void glFramebufferRenderbufferEXT( int target, int attachment, int renderbuffertarget, int renderbuffer );	( target attachment renderbuffertarget renderbuffer -- )
EXTERN: "C" void glGetFramebufferAttachmentParameterivEXT( int target, int attachment, int pname, void * params );	( target attachment pname params -- )
EXTERN: "C" void glGenerateMipmapEXT( int target );	( target -- )
EXTERN: "C" void glProgramParameteriEXT( int program, int pname, int value );	( program pname value -- )
EXTERN: "C" void glProgramEnvParameters4fvEXT( int target, int index, int count, void * params );	( target index count params -- )
EXTERN: "C" void glProgramLocalParameters4fvEXT( int target, int index, int count, void * params );	( target index count params -- )
EXTERN: "C" void glGetUniformuivEXT( int program, int location, void * params );	( program location params -- )
EXTERN: "C" void glBindFragDataLocationEXT( int program, int color, char * name );	( program color name -- )
EXTERN: "C" int glGetFragDataLocationEXT( int program, char * name );	( program name -- )
EXTERN: "C" void glUniform1uiEXT( int location, int v0 );	( location v0 -- )
EXTERN: "C" void glUniform2uiEXT( int location, int v0, int v1 );	( location v0 v1 -- )
EXTERN: "C" void glUniform3uiEXT( int location, int v0, int v1, int v2 );	( location v0 v1 v2 -- )
EXTERN: "C" void glUniform4uiEXT( int location, int v0, int v1, int v2, int v3 );	( location v0 v1 v2 v3 -- )
EXTERN: "C" void glUniform1uivEXT( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform2uivEXT( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform3uivEXT( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glUniform4uivEXT( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glGetHistogramEXT( int target, char reset, int format, int type, void * values );	( target reset format type values -- )
EXTERN: "C" void glGetHistogramParameterfvEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetHistogramParameterivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetMinmaxEXT( int target, char reset, int format, int type, void * values );	( target reset format type values -- )
EXTERN: "C" void glGetMinmaxParameterfvEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetMinmaxParameterivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glHistogramEXT( int target, int width, int internalformat, char sink );	( target width internalformat sink -- )
EXTERN: "C" void glMinmaxEXT( int target, int internalformat, char sink );	( target internalformat sink -- )
EXTERN: "C" void glResetHistogramEXT( int target );	( target -- )
EXTERN: "C" void glResetMinmaxEXT( int target );	( target -- )
EXTERN: "C" void glIndexFuncEXT( int func, float ref );	( func ref -- )
EXTERN: "C" void glIndexMaterialEXT( int face, int mode );	( face mode -- )
EXTERN: "C" void glApplyTextureEXT( int mode );	( mode -- )
EXTERN: "C" void glTextureLightEXT( int pname );	( pname -- )
EXTERN: "C" void glTextureMaterialEXT( int face, int mode );	( face mode -- )
EXTERN: "C" void glGetUnsignedBytevEXT( int pname, void * data );	( pname data -- )
EXTERN: "C" void glGetUnsignedBytei_vEXT( int target, int index, void * data );	( target index data -- )
EXTERN: "C" void glDeleteMemoryObjectsEXT( int n, void * memoryObjects );	( n memoryObjects -- )
EXTERN: "C" char glIsMemoryObjectEXT( int memoryObject );	( memoryObject -- )
EXTERN: "C" void glCreateMemoryObjectsEXT( int n, void * memoryObjects );	( n memoryObjects -- )
EXTERN: "C" void glMemoryObjectParameterivEXT( int memoryObject, int pname, void * params );	( memoryObject pname params -- )
EXTERN: "C" void glGetMemoryObjectParameterivEXT( int memoryObject, int pname, void * params );	( memoryObject pname params -- )
EXTERN: "C" void glTexStorageMem2DEXT( int target, int levels, int internalFormat, int width, int height, int memory, long long offset );	( target levels internalFormat width height memory offset -- )
EXTERN: "C" void glTexStorageMem2DMultisampleEXT( int target, int samples, int internalFormat, int width, int height, char fixedSampleLocations, int memory, long long offset );	( target samples internalFormat width height fixedSampleLocations memory offset -- )
EXTERN: "C" void glTexStorageMem3DEXT( int target, int levels, int internalFormat, int width, int height, int depth, int memory, long long offset );	( target levels internalFormat width height depth memory offset -- )
EXTERN: "C" void glTexStorageMem3DMultisampleEXT( int target, int samples, int internalFormat, int width, int height, int depth, char fixedSampleLocations, int memory, long long offset );	( target samples internalFormat width height depth fixedSampleLocations memory offset -- )
EXTERN: "C" void glBufferStorageMemEXT( int target, long size, int memory, long long offset );	( target size memory offset -- )
EXTERN: "C" void glTextureStorageMem2DEXT( int texture, int levels, int internalFormat, int width, int height, int memory, long long offset );	( texture levels internalFormat width height memory offset -- )
EXTERN: "C" void glTextureStorageMem2DMultisampleEXT( int texture, int samples, int internalFormat, int width, int height, char fixedSampleLocations, int memory, long long offset );	( texture samples internalFormat width height fixedSampleLocations memory offset -- )
EXTERN: "C" void glTextureStorageMem3DEXT( int texture, int levels, int internalFormat, int width, int height, int depth, int memory, long long offset );	( texture levels internalFormat width height depth memory offset -- )
EXTERN: "C" void glTextureStorageMem3DMultisampleEXT( int texture, int samples, int internalFormat, int width, int height, int depth, char fixedSampleLocations, int memory, long long offset );	( texture samples internalFormat width height depth fixedSampleLocations memory offset -- )
EXTERN: "C" void glNamedBufferStorageMemEXT( int buffer, long size, int memory, long long offset );	( buffer size memory offset -- )
EXTERN: "C" void glTexStorageMem1DEXT( int target, int levels, int internalFormat, int width, int memory, long long offset );	( target levels internalFormat width memory offset -- )
EXTERN: "C" void glTextureStorageMem1DEXT( int texture, int levels, int internalFormat, int width, int memory, long long offset );	( texture levels internalFormat width memory offset -- )
EXTERN: "C" void glImportMemoryFdEXT( int memory, long long size, int handleType, int fd );	( memory size handleType fd -- )
EXTERN: "C" void glImportMemoryWin32HandleEXT( int memory, long long size, int handleType, void * handle );	( memory size handleType handle -- )
EXTERN: "C" void glImportMemoryWin32NameEXT( int memory, long long size, int handleType, void * name );	( memory size handleType name -- )
EXTERN: "C" void glMultiDrawArraysEXT( int mode, void * first, void * count, int primcount );	( mode first count primcount -- )
EXTERN: "C" void glMultiDrawElementsEXT( int mode, void * count, int type, void * indices, int primcount );	( mode count type indices primcount -- )
EXTERN: "C" void glSampleMaskEXT( float value, char invert );	( value invert -- )
EXTERN: "C" void glSamplePatternEXT( int pattern );	( pattern -- )
EXTERN: "C" void glColorTableEXT( int target, int internalFormat, int width, int format, int type, void * table );	( target internalFormat width format type table -- )
EXTERN: "C" void glGetColorTableEXT( int target, int format, int type, void * data );	( target format type data -- )
EXTERN: "C" void glGetColorTableParameterivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetColorTableParameterfvEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glPixelTransformParameteriEXT( int target, int pname, int param );	( target pname param -- )
EXTERN: "C" void glPixelTransformParameterfEXT( int target, int pname, float param );	( target pname param -- )
EXTERN: "C" void glPixelTransformParameterivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glPixelTransformParameterfvEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetPixelTransformParameterivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetPixelTransformParameterfvEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glPointParameterfEXT( int pname, float param );	( pname param -- )
EXTERN: "C" void glPointParameterfvEXT( int pname, void * params );	( pname params -- )
EXTERN: "C" void glPolygonOffsetEXT( float factor, float bias );	( factor bias -- )
EXTERN: "C" void glPolygonOffsetClampEXT( float factor, float units, float clamp );	( factor units clamp -- )
EXTERN: "C" void glProvokingVertexEXT( int mode );	( mode -- )
EXTERN: "C" void glRasterSamplesEXT( int samples, char fixedsamplelocations );	( samples fixedsamplelocations -- )
EXTERN: "C" void glSecondaryColor3bEXT( char red, char green, char blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3bvEXT( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3dEXT( double red, double green, double blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3dvEXT( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3fEXT( float red, float green, float blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3fvEXT( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3iEXT( int red, int green, int blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3ivEXT( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3sEXT( short red, short green, short blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3svEXT( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3ubEXT( char red, char green, char blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3ubvEXT( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3uiEXT( int red, int green, int blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3uivEXT( void * v );	( v -- )
EXTERN: "C" void glSecondaryColor3usEXT( short red, short green, short blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3usvEXT( void * v );	( v -- )
EXTERN: "C" void glSecondaryColorPointerEXT( int size, int type, int stride, void * pointer );	( size type stride pointer -- )
EXTERN: "C" void glGenSemaphoresEXT( int n, void * semaphores );	( n semaphores -- )
EXTERN: "C" void glDeleteSemaphoresEXT( int n, void * semaphores );	( n semaphores -- )
EXTERN: "C" char glIsSemaphoreEXT( int semaphore );	( semaphore -- )
EXTERN: "C" void glSemaphoreParameterui64vEXT( int semaphore, int pname, void * params );	( semaphore pname params -- )
EXTERN: "C" void glGetSemaphoreParameterui64vEXT( int semaphore, int pname, void * params );	( semaphore pname params -- )
EXTERN: "C" void glWaitSemaphoreEXT( int semaphore, int numBufferBarriers, void * buffers, int numTextureBarriers, void * textures, void * srcLayouts );	( semaphore numBufferBarriers buffers numTextureBarriers textures srcLayouts -- )
EXTERN: "C" void glSignalSemaphoreEXT( int semaphore, int numBufferBarriers, void * buffers, int numTextureBarriers, void * textures, void * dstLayouts );	( semaphore numBufferBarriers buffers numTextureBarriers textures dstLayouts -- )
EXTERN: "C" void glImportSemaphoreFdEXT( int semaphore, int handleType, int fd );	( semaphore handleType fd -- )
EXTERN: "C" void glImportSemaphoreWin32HandleEXT( int semaphore, int handleType, void * handle );	( semaphore handleType handle -- )
EXTERN: "C" void glImportSemaphoreWin32NameEXT( int semaphore, int handleType, void * name );	( semaphore handleType name -- )
EXTERN: "C" void glUseShaderProgramEXT( int type, int program );	( type program -- )
EXTERN: "C" void glActiveProgramEXT( int program );	( program -- )
EXTERN: "C" int glCreateShaderProgramEXT( int type, char * string );	( type string -- )
EXTERN: "C" void glBindImageTextureEXT( int index, int texture, int level, char layered, int layer, int access, int format );	( index texture level layered layer access format -- )
EXTERN: "C" void glMemoryBarrierEXT( int barriers );	( barriers -- )
EXTERN: "C" void glStencilClearTagEXT( int stencilTagBits, int stencilClearTag );	( stencilTagBits stencilClearTag -- )
EXTERN: "C" void glActiveStencilFaceEXT( int face );	( face -- )
EXTERN: "C" void glTexSubImage1DEXT( int target, int level, int xoffset, int width, int format, int type, void * pixels );	( target level xoffset width format type pixels -- )
EXTERN: "C" void glTexSubImage2DEXT( int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, void * pixels );	( target level xoffset yoffset width height format type pixels -- )
EXTERN: "C" void glTexImage3DEXT( int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, void * pixels );	( target level internalformat width height depth border format type pixels -- )
EXTERN: "C" void glTexSubImage3DEXT( int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, void * pixels );	( target level xoffset yoffset zoffset width height depth format type pixels -- )
EXTERN: "C" void glFramebufferTextureLayerEXT( int target, int attachment, int texture, int level, int layer );	( target attachment texture level layer -- )
EXTERN: "C" void glTexBufferEXT( int target, int internalformat, int buffer );	( target internalformat buffer -- )
EXTERN: "C" void glTexParameterIivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glTexParameterIuivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexParameterIivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetTexParameterIuivEXT( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glClearColorIiEXT( int red, int green, int blue, int alpha );	( red green blue alpha -- )
EXTERN: "C" void glClearColorIuiEXT( int red, int green, int blue, int alpha );	( red green blue alpha -- )
EXTERN: "C" char glAreTexturesResidentEXT( int n, void * textures, void * residences );	( n textures residences -- )
EXTERN: "C" void glBindTextureEXT( int target, int texture );	( target texture -- )
EXTERN: "C" void glDeleteTexturesEXT( int n, void * textures );	( n textures -- )
EXTERN: "C" void glGenTexturesEXT( int n, void * textures );	( n textures -- )
EXTERN: "C" char glIsTextureEXT( int texture );	( texture -- )
EXTERN: "C" void glPrioritizeTexturesEXT( int n, void * textures, void * priorities );	( n textures priorities -- )
EXTERN: "C" void glTextureNormalEXT( int mode );	( mode -- )
EXTERN: "C" void glGetQueryObjecti64vEXT( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glGetQueryObjectui64vEXT( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glBeginTransformFeedbackEXT( int primitiveMode );	( primitiveMode -- )
EXTERN: "C" void glEndTransformFeedbackEXT(  );	( -- )
EXTERN: "C" void glBindBufferRangeEXT( int target, int index, int buffer, long offset, long size );	( target index buffer offset size -- )
EXTERN: "C" void glBindBufferOffsetEXT( int target, int index, int buffer, long offset );	( target index buffer offset -- )
EXTERN: "C" void glBindBufferBaseEXT( int target, int index, int buffer );	( target index buffer -- )
EXTERN: "C" void glTransformFeedbackVaryingsEXT( int program, int count, void * varyings, int bufferMode );	( program count varyings bufferMode -- )
EXTERN: "C" void glGetTransformFeedbackVaryingEXT( int program, int index, int bufSize, void * length, void * size, void * type, void * name );	( program index bufSize length size type name -- )
EXTERN: "C" void glArrayElementEXT( int i );	( i -- )
EXTERN: "C" void glColorPointerEXT( int size, int type, int stride, int count, void * pointer );	( size type stride count pointer -- )
EXTERN: "C" void glDrawArraysEXT( int mode, int first, int count );	( mode first count -- )
EXTERN: "C" void glEdgeFlagPointerEXT( int stride, int count, void * pointer );	( stride count pointer -- )
EXTERN: "C" void glGetPointervEXT( int pname, void * params );	( pname params -- )
EXTERN: "C" void glIndexPointerEXT( int type, int stride, int count, void * pointer );	( type stride count pointer -- )
EXTERN: "C" void glNormalPointerEXT( int type, int stride, int count, void * pointer );	( type stride count pointer -- )
EXTERN: "C" void glTexCoordPointerEXT( int size, int type, int stride, int count, void * pointer );	( size type stride count pointer -- )
EXTERN: "C" void glVertexPointerEXT( int size, int type, int stride, int count, void * pointer );	( size type stride count pointer -- )
EXTERN: "C" void glVertexAttribL1dEXT( int index, double x );	( index x -- )
EXTERN: "C" void glVertexAttribL2dEXT( int index, double x, double y );	( index x y -- )
EXTERN: "C" void glVertexAttribL3dEXT( int index, double x, double y, double z );	( index x y z -- )
EXTERN: "C" void glVertexAttribL4dEXT( int index, double x, double y, double z, double w );	( index x y z w -- )
EXTERN: "C" void glVertexAttribL1dvEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL2dvEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL3dvEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL4dvEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribLPointerEXT( int index, int size, int type, int stride, void * pointer );	( index size type stride pointer -- )
EXTERN: "C" void glGetVertexAttribLdvEXT( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glBeginVertexShaderEXT(  );	( -- )
EXTERN: "C" void glEndVertexShaderEXT(  );	( -- )
EXTERN: "C" void glBindVertexShaderEXT( int id );	( id -- )
EXTERN: "C" int glGenVertexShadersEXT( int range );	( range -- )
EXTERN: "C" void glDeleteVertexShaderEXT( int id );	( id -- )
EXTERN: "C" void glShaderOp1EXT( int op, int res, int arg1 );	( op res arg1 -- )
EXTERN: "C" void glShaderOp2EXT( int op, int res, int arg1, int arg2 );	( op res arg1 arg2 -- )
EXTERN: "C" void glShaderOp3EXT( int op, int res, int arg1, int arg2, int arg3 );	( op res arg1 arg2 arg3 -- )
EXTERN: "C" void glSwizzleEXT( int res, int in, int outX, int outY, int outZ, int outW );	( res in outX outY outZ outW -- )
EXTERN: "C" void glWriteMaskEXT( int res, int in, int outX, int outY, int outZ, int outW );	( res in outX outY outZ outW -- )
EXTERN: "C" void glInsertComponentEXT( int res, int src, int num );	( res src num -- )
EXTERN: "C" void glExtractComponentEXT( int res, int src, int num );	( res src num -- )
EXTERN: "C" int glGenSymbolsEXT( int datatype, int storagetype, int range, int components );	( datatype storagetype range components -- )
EXTERN: "C" void glSetInvariantEXT( int id, int type, void * addr );	( id type addr -- )
EXTERN: "C" void glSetLocalConstantEXT( int id, int type, void * addr );	( id type addr -- )
EXTERN: "C" void glVariantbvEXT( int id, void * addr );	( id addr -- )
EXTERN: "C" void glVariantsvEXT( int id, void * addr );	( id addr -- )
EXTERN: "C" void glVariantivEXT( int id, void * addr );	( id addr -- )
EXTERN: "C" void glVariantfvEXT( int id, void * addr );	( id addr -- )
EXTERN: "C" void glVariantdvEXT( int id, void * addr );	( id addr -- )
EXTERN: "C" void glVariantubvEXT( int id, void * addr );	( id addr -- )
EXTERN: "C" void glVariantusvEXT( int id, void * addr );	( id addr -- )
EXTERN: "C" void glVariantuivEXT( int id, void * addr );	( id addr -- )
EXTERN: "C" void glVariantPointerEXT( int id, int type, int stride, void * addr );	( id type stride addr -- )
EXTERN: "C" void glEnableVariantClientStateEXT( int id );	( id -- )
EXTERN: "C" void glDisableVariantClientStateEXT( int id );	( id -- )
EXTERN: "C" int glBindLightParameterEXT( int light, int value );	( light value -- )
EXTERN: "C" int glBindMaterialParameterEXT( int face, int value );	( face value -- )
EXTERN: "C" int glBindTexGenParameterEXT( int unit, int coord, int value );	( unit coord value -- )
EXTERN: "C" int glBindTextureUnitParameterEXT( int unit, int value );	( unit value -- )
EXTERN: "C" int glBindParameterEXT( int value );	( value -- )
EXTERN: "C" char glIsVariantEnabledEXT( int id, int cap );	( id cap -- )
EXTERN: "C" void glGetVariantBooleanvEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glGetVariantIntegervEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glGetVariantFloatvEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glGetVariantPointervEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glGetInvariantBooleanvEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glGetInvariantIntegervEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glGetInvariantFloatvEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glGetLocalConstantBooleanvEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glGetLocalConstantIntegervEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glGetLocalConstantFloatvEXT( int id, int value, void * data );	( id value data -- )
EXTERN: "C" void glVertexWeightfEXT( float weight );	( weight -- )
EXTERN: "C" void glVertexWeightfvEXT( void * weight );	( weight -- )
EXTERN: "C" void glVertexWeightPointerEXT( int size, int type, int stride, void * pointer );	( size type stride pointer -- )
EXTERN: "C" char glAcquireKeyedMutexWin32EXT( int memory, long long key, int timeout );	( memory key timeout -- )
EXTERN: "C" char glReleaseKeyedMutexWin32EXT( int memory, long long key );	( memory key -- )
EXTERN: "C" void glWindowRectanglesEXT( int mode, int count, void * box );	( mode count box -- )
EXTERN: "C" void * glImportSyncEXT( int external_sync_type, long external_sync, int flags );	( external_sync_type external_sync flags -- )
EXTERN: "C" void glFrameTerminatorGREMEDY(  );	( -- )
EXTERN: "C" void glStringMarkerGREMEDY( int len, void * string );	( len string -- )
EXTERN: "C" void glImageTransformParameteriHP( int target, int pname, int param );	( target pname param -- )
EXTERN: "C" void glImageTransformParameterfHP( int target, int pname, float param );	( target pname param -- )
EXTERN: "C" void glImageTransformParameterivHP( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glImageTransformParameterfvHP( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetImageTransformParameterivHP( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetImageTransformParameterfvHP( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glMultiModeDrawArraysIBM( void * mode, void * first, void * count, int primcount, int modestride );	( mode first count primcount modestride -- )
EXTERN: "C" void glMultiModeDrawElementsIBM( void * mode, void * count, int type, void * indices, int primcount, int modestride );	( mode count type indices primcount modestride -- )
EXTERN: "C" void glFlushStaticDataIBM( int target );	( target -- )
EXTERN: "C" void glColorPointerListIBM( int size, int type, int stride, void * pointer, int ptrstride );	( size type stride pointer ptrstride -- )
EXTERN: "C" void glSecondaryColorPointerListIBM( int size, int type, int stride, void * pointer, int ptrstride );	( size type stride pointer ptrstride -- )
EXTERN: "C" void glEdgeFlagPointerListIBM( int stride, void * pointer, int ptrstride );	( stride pointer ptrstride -- )
EXTERN: "C" void glFogCoordPointerListIBM( int type, int stride, void * pointer, int ptrstride );	( type stride pointer ptrstride -- )
EXTERN: "C" void glIndexPointerListIBM( int type, int stride, void * pointer, int ptrstride );	( type stride pointer ptrstride -- )
EXTERN: "C" void glNormalPointerListIBM( int type, int stride, void * pointer, int ptrstride );	( type stride pointer ptrstride -- )
EXTERN: "C" void glTexCoordPointerListIBM( int size, int type, int stride, void * pointer, int ptrstride );	( size type stride pointer ptrstride -- )
EXTERN: "C" void glVertexPointerListIBM( int size, int type, int stride, void * pointer, int ptrstride );	( size type stride pointer ptrstride -- )
EXTERN: "C" void glBlendFuncSeparateINGR( int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha );	( sfactorRGB dfactorRGB sfactorAlpha dfactorAlpha -- )
EXTERN: "C" void glApplyFramebufferAttachmentCMAAINTEL(  );	( -- )
EXTERN: "C" void glSyncTextureINTEL( int texture );	( texture -- )
EXTERN: "C" void glUnmapTexture2DINTEL( int texture, int level );	( texture level -- )
EXTERN: "C" void * glMapTexture2DINTEL( int texture, int level, int access, void * stride, void * layout );	( texture level access stride layout -- )
EXTERN: "C" void glVertexPointervINTEL( int size, int type, void * pointer );	( size type pointer -- )
EXTERN: "C" void glNormalPointervINTEL( int type, void * pointer );	( type pointer -- )
EXTERN: "C" void glColorPointervINTEL( int size, int type, void * pointer );	( size type pointer -- )
EXTERN: "C" void glTexCoordPointervINTEL( int size, int type, void * pointer );	( size type pointer -- )
EXTERN: "C" void glBeginPerfQueryINTEL( int queryHandle );	( queryHandle -- )
EXTERN: "C" void glCreatePerfQueryINTEL( int queryId, void * queryHandle );	( queryId queryHandle -- )
EXTERN: "C" void glDeletePerfQueryINTEL( int queryHandle );	( queryHandle -- )
EXTERN: "C" void glEndPerfQueryINTEL( int queryHandle );	( queryHandle -- )
EXTERN: "C" void glGetFirstPerfQueryIdINTEL( void * queryId );	( queryId -- )
EXTERN: "C" void glGetNextPerfQueryIdINTEL( int queryId, void * nextQueryId );	( queryId nextQueryId -- )
EXTERN: "C" void glGetPerfCounterInfoINTEL( int queryId, int counterId, int counterNameLength, void * counterName, int counterDescLength, void * counterDesc, void * counterOffset, void * counterDataSize, void * counterTypeEnum, void * counterDataTypeEnum, void * rawCounterMaxValue );	( queryId counterId counterNameLength counterName counterDescLength counterDesc counterOffset counterDataSize counterTypeEnum counterDataTypeEnum rawCounterMaxValue -- )
EXTERN: "C" void glGetPerfQueryDataINTEL( int queryHandle, int flags, int dataSize, void * data, void * bytesWritten );	( queryHandle flags dataSize data bytesWritten -- )
EXTERN: "C" void glGetPerfQueryIdByNameINTEL( void * queryName, void * queryId );	( queryName queryId -- )
EXTERN: "C" void glGetPerfQueryInfoINTEL( int queryId, int queryNameLength, void * queryName, void * dataSize, void * noCounters, void * noInstances, void * capsMask );	( queryId queryNameLength queryName dataSize noCounters noInstances capsMask -- )
EXTERN: "C" void glResizeBuffersMESA(  );	( -- )
EXTERN: "C" void glWindowPos2dMESA( double x, double y );	( x y -- )
EXTERN: "C" void glWindowPos2dvMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos2fMESA( float x, float y );	( x y -- )
EXTERN: "C" void glWindowPos2fvMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos2iMESA( int x, int y );	( x y -- )
EXTERN: "C" void glWindowPos2ivMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos2sMESA( short x, short y );	( x y -- )
EXTERN: "C" void glWindowPos2svMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos3dMESA( double x, double y, double z );	( x y z -- )
EXTERN: "C" void glWindowPos3dvMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos3fMESA( float x, float y, float z );	( x y z -- )
EXTERN: "C" void glWindowPos3fvMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos3iMESA( int x, int y, int z );	( x y z -- )
EXTERN: "C" void glWindowPos3ivMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos3sMESA( short x, short y, short z );	( x y z -- )
EXTERN: "C" void glWindowPos3svMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos4dMESA( double x, double y, double z, double w );	( x y z w -- )
EXTERN: "C" void glWindowPos4dvMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos4fMESA( float x, float y, float z, float w );	( x y z w -- )
EXTERN: "C" void glWindowPos4fvMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos4iMESA( int x, int y, int z, int w );	( x y z w -- )
EXTERN: "C" void glWindowPos4ivMESA( void * v );	( v -- )
EXTERN: "C" void glWindowPos4sMESA( short x, short y, short z, short w );	( x y z w -- )
EXTERN: "C" void glWindowPos4svMESA( void * v );	( v -- )
EXTERN: "C" void glBeginConditionalRenderNVX( int id );	( id -- )
EXTERN: "C" void glEndConditionalRenderNVX(  );	( -- )
EXTERN: "C" void glLGPUNamedBufferSubDataNVX( int gpuMask, int buffer, long offset, long size, void * data );	( gpuMask buffer offset size data -- )
EXTERN: "C" void glLGPUCopyImageSubDataNVX( int sourceGpu, int destinationGpuMask, int srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth );	( sourceGpu destinationGpuMask srcName srcTarget srcLevel srcX srxY srcZ dstName dstTarget dstLevel dstX dstY dstZ width height depth -- )
EXTERN: "C" void glLGPUInterlockNVX(  );	( -- )
EXTERN: "C" void glAlphaToCoverageDitherControlNV( int mode );	( mode -- )
EXTERN: "C" void glMultiDrawArraysIndirectBindlessNV( int mode, void * indirect, int drawCount, int stride, int vertexBufferCount );	( mode indirect drawCount stride vertexBufferCount -- )
EXTERN: "C" void glMultiDrawElementsIndirectBindlessNV( int mode, int type, void * indirect, int drawCount, int stride, int vertexBufferCount );	( mode type indirect drawCount stride vertexBufferCount -- )
EXTERN: "C" void glMultiDrawArraysIndirectBindlessCountNV( int mode, void * indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount );	( mode indirect drawCount maxDrawCount stride vertexBufferCount -- )
EXTERN: "C" void glMultiDrawElementsIndirectBindlessCountNV( int mode, int type, void * indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount );	( mode type indirect drawCount maxDrawCount stride vertexBufferCount -- )
EXTERN: "C" long long glGetTextureHandleNV( int texture );	( texture -- )
EXTERN: "C" long long glGetTextureSamplerHandleNV( int texture, int sampler );	( texture sampler -- )
EXTERN: "C" void glMakeTextureHandleResidentNV( long long handle );	( handle -- )
EXTERN: "C" void glMakeTextureHandleNonResidentNV( long long handle );	( handle -- )
EXTERN: "C" long long glGetImageHandleNV( int texture, int level, char layered, int layer, int format );	( texture level layered layer format -- )
EXTERN: "C" void glMakeImageHandleResidentNV( long long handle, int access );	( handle access -- )
EXTERN: "C" void glMakeImageHandleNonResidentNV( long long handle );	( handle -- )
EXTERN: "C" void glUniformHandleui64NV( int location, long long value );	( location value -- )
EXTERN: "C" void glUniformHandleui64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glProgramUniformHandleui64NV( int program, int location, long long value );	( program location value -- )
EXTERN: "C" void glProgramUniformHandleui64vNV( int program, int location, int count, void * values );	( program location count values -- )
EXTERN: "C" char glIsTextureHandleResidentNV( long long handle );	( handle -- )
EXTERN: "C" char glIsImageHandleResidentNV( long long handle );	( handle -- )
EXTERN: "C" void glBlendParameteriNV( int pname, int value );	( pname value -- )
EXTERN: "C" void glBlendBarrierNV(  );	( -- )
EXTERN: "C" void glViewportPositionWScaleNV( int index, float xcoeff, float ycoeff );	( index xcoeff ycoeff -- )
EXTERN: "C" void glCreateStatesNV( int n, void * states );	( n states -- )
EXTERN: "C" void glDeleteStatesNV( int n, void * states );	( n states -- )
EXTERN: "C" char glIsStateNV( int state );	( state -- )
EXTERN: "C" void glStateCaptureNV( int state, int mode );	( state mode -- )
EXTERN: "C" int glGetCommandHeaderNV( int tokenID, int size );	( tokenID size -- )
EXTERN: "C" short glGetStageIndexNV( int shadertype );	( shadertype -- )
EXTERN: "C" void glDrawCommandsNV( int primitiveMode, int buffer, void * indirects, void * sizes, int count );	( primitiveMode buffer indirects sizes count -- )
EXTERN: "C" void glDrawCommandsAddressNV( int primitiveMode, void * indirects, void * sizes, int count );	( primitiveMode indirects sizes count -- )
EXTERN: "C" void glDrawCommandsStatesNV( int buffer, void * indirects, void * sizes, void * states, void * fbos, int count );	( buffer indirects sizes states fbos count -- )
EXTERN: "C" void glDrawCommandsStatesAddressNV( void * indirects, void * sizes, void * states, void * fbos, int count );	( indirects sizes states fbos count -- )
EXTERN: "C" void glCreateCommandListsNV( int n, void * lists );	( n lists -- )
EXTERN: "C" void glDeleteCommandListsNV( int n, void * lists );	( n lists -- )
EXTERN: "C" char glIsCommandListNV( int list );	( list -- )
EXTERN: "C" void glListDrawCommandsStatesClientNV( int list, int segment, void * indirects, void * sizes, void * states, void * fbos, int count );	( list segment indirects sizes states fbos count -- )
EXTERN: "C" void glCommandListSegmentsNV( int list, int segments );	( list segments -- )
EXTERN: "C" void glCompileCommandListNV( int list );	( list -- )
EXTERN: "C" void glCallCommandListNV( int list );	( list -- )
EXTERN: "C" void glBeginConditionalRenderNV( int id, int mode );	( id mode -- )
EXTERN: "C" void glEndConditionalRenderNV(  );	( -- )
EXTERN: "C" void glSubpixelPrecisionBiasNV( int xbits, int ybits );	( xbits ybits -- )
EXTERN: "C" void glConservativeRasterParameterfNV( int pname, float value );	( pname value -- )
EXTERN: "C" void glConservativeRasterParameteriNV( int pname, int param );	( pname param -- )
EXTERN: "C" void glCopyImageSubDataNV( int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth );	( srcName srcTarget srcLevel srcX srcY srcZ dstName dstTarget dstLevel dstX dstY dstZ width height depth -- )
EXTERN: "C" void glDepthRangedNV( double zNear, double zFar );	( zNear zFar -- )
EXTERN: "C" void glClearDepthdNV( double depth );	( depth -- )
EXTERN: "C" void glDepthBoundsdNV( double zmin, double zmax );	( zmin zmax -- )
EXTERN: "C" void glDrawTextureNV( int texture, int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1 );	( texture sampler x0 y0 x1 y1 z s0 t0 s1 t1 -- )
EXTERN: "C" void glDrawVkImageNV( long long vkImage, int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1 );	( vkImage sampler x0 y0 x1 y1 z s0 t0 s1 t1 -- )
EXTERN: "C" void * glGetVkProcAddrNV( char * name );	( name -- )
EXTERN: "C" void glWaitVkSemaphoreNV( long long vkSemaphore );	( vkSemaphore -- )
EXTERN: "C" void glSignalVkSemaphoreNV( long long vkSemaphore );	( vkSemaphore -- )
EXTERN: "C" void glSignalVkFenceNV( long long vkFence );	( vkFence -- )
EXTERN: "C" void glMapControlPointsNV( int target, int index, int type, int ustride, int vstride, int uorder, int vorder, char packed, void * points );	( target index type ustride vstride uorder vorder packed points -- )
EXTERN: "C" void glMapParameterivNV( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glMapParameterfvNV( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetMapControlPointsNV( int target, int index, int type, int ustride, int vstride, char packed, void * points );	( target index type ustride vstride packed points -- )
EXTERN: "C" void glGetMapParameterivNV( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetMapParameterfvNV( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetMapAttribParameterivNV( int target, int index, int pname, void * params );	( target index pname params -- )
EXTERN: "C" void glGetMapAttribParameterfvNV( int target, int index, int pname, void * params );	( target index pname params -- )
EXTERN: "C" void glEvalMapsNV( int target, int mode );	( target mode -- )
EXTERN: "C" void glGetMultisamplefvNV( int pname, int index, void * val );	( pname index val -- )
EXTERN: "C" void glSampleMaskIndexedNV( int index, int mask );	( index mask -- )
EXTERN: "C" void glTexRenderbufferNV( int target, int renderbuffer );	( target renderbuffer -- )
EXTERN: "C" void glDeleteFencesNV( int n, void * fences );	( n fences -- )
EXTERN: "C" void glGenFencesNV( int n, void * fences );	( n fences -- )
EXTERN: "C" char glIsFenceNV( int fence );	( fence -- )
EXTERN: "C" char glTestFenceNV( int fence );	( fence -- )
EXTERN: "C" void glGetFenceivNV( int fence, int pname, void * params );	( fence pname params -- )
EXTERN: "C" void glFinishFenceNV( int fence );	( fence -- )
EXTERN: "C" void glSetFenceNV( int fence, int condition );	( fence condition -- )
EXTERN: "C" void glFragmentCoverageColorNV( int color );	( color -- )
EXTERN: "C" void glProgramNamedParameter4fNV( int id, int len, void * name, float x, float y, float z, float w );	( id len name x y z w -- )
EXTERN: "C" void glProgramNamedParameter4fvNV( int id, int len, void * name, void * v );	( id len name v -- )
EXTERN: "C" void glProgramNamedParameter4dNV( int id, int len, void * name, double x, double y, double z, double w );	( id len name x y z w -- )
EXTERN: "C" void glProgramNamedParameter4dvNV( int id, int len, void * name, void * v );	( id len name v -- )
EXTERN: "C" void glGetProgramNamedParameterfvNV( int id, int len, void * name, void * params );	( id len name params -- )
EXTERN: "C" void glGetProgramNamedParameterdvNV( int id, int len, void * name, void * params );	( id len name params -- )
EXTERN: "C" void glCoverageModulationTableNV( int n, void * v );	( n v -- )
EXTERN: "C" void glGetCoverageModulationTableNV( int bufsize, void * v );	( bufsize v -- )
EXTERN: "C" void glCoverageModulationNV( int components );	( components -- )
EXTERN: "C" void glRenderbufferStorageMultisampleCoverageNV( int target, int coverageSamples, int colorSamples, int internalformat, int width, int height );	( target coverageSamples colorSamples internalformat width height -- )
EXTERN: "C" void glProgramVertexLimitNV( int target, int limit );	( target limit -- )
EXTERN: "C" void glFramebufferTextureEXT( int target, int attachment, int texture, int level );	( target attachment texture level -- )
EXTERN: "C" void glFramebufferTextureFaceEXT( int target, int attachment, int texture, int level, int face );	( target attachment texture level face -- )
EXTERN: "C" void glRenderGpuMaskNV( int mask );	( mask -- )
EXTERN: "C" void glMulticastBufferSubDataNV( int gpuMask, int buffer, long offset, long size, void * data );	( gpuMask buffer offset size data -- )
EXTERN: "C" void glMulticastCopyBufferSubDataNV( int readGpu, int writeGpuMask, int readBuffer, int writeBuffer, long readOffset, long writeOffset, long size );	( readGpu writeGpuMask readBuffer writeBuffer readOffset writeOffset size -- )
EXTERN: "C" void glMulticastCopyImageSubDataNV( int srcGpu, int dstGpuMask, int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth );	( srcGpu dstGpuMask srcName srcTarget srcLevel srcX srcY srcZ dstName dstTarget dstLevel dstX dstY dstZ srcWidth srcHeight srcDepth -- )
EXTERN: "C" void glMulticastBlitFramebufferNV( int srcGpu, int dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter );	( srcGpu dstGpu srcX0 srcY0 srcX1 srcY1 dstX0 dstY0 dstX1 dstY1 mask filter -- )
EXTERN: "C" void glMulticastFramebufferSampleLocationsfvNV( int gpu, int framebuffer, int start, int count, void * v );	( gpu framebuffer start count v -- )
EXTERN: "C" void glMulticastBarrierNV(  );	( -- )
EXTERN: "C" void glMulticastWaitSyncNV( int signalGpu, int waitGpuMask );	( signalGpu waitGpuMask -- )
EXTERN: "C" void glMulticastGetQueryObjectivNV( int gpu, int id, int pname, void * params );	( gpu id pname params -- )
EXTERN: "C" void glMulticastGetQueryObjectuivNV( int gpu, int id, int pname, void * params );	( gpu id pname params -- )
EXTERN: "C" void glMulticastGetQueryObjecti64vNV( int gpu, int id, int pname, void * params );	( gpu id pname params -- )
EXTERN: "C" void glMulticastGetQueryObjectui64vNV( int gpu, int id, int pname, void * params );	( gpu id pname params -- )
EXTERN: "C" void glProgramLocalParameterI4iNV( int target, int index, int x, int y, int z, int w );	( target index x y z w -- )
EXTERN: "C" void glProgramLocalParameterI4ivNV( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glProgramLocalParametersI4ivNV( int target, int index, int count, void * params );	( target index count params -- )
EXTERN: "C" void glProgramLocalParameterI4uiNV( int target, int index, int x, int y, int z, int w );	( target index x y z w -- )
EXTERN: "C" void glProgramLocalParameterI4uivNV( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glProgramLocalParametersI4uivNV( int target, int index, int count, void * params );	( target index count params -- )
EXTERN: "C" void glProgramEnvParameterI4iNV( int target, int index, int x, int y, int z, int w );	( target index x y z w -- )
EXTERN: "C" void glProgramEnvParameterI4ivNV( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glProgramEnvParametersI4ivNV( int target, int index, int count, void * params );	( target index count params -- )
EXTERN: "C" void glProgramEnvParameterI4uiNV( int target, int index, int x, int y, int z, int w );	( target index x y z w -- )
EXTERN: "C" void glProgramEnvParameterI4uivNV( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glProgramEnvParametersI4uivNV( int target, int index, int count, void * params );	( target index count params -- )
EXTERN: "C" void glGetProgramLocalParameterIivNV( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glGetProgramLocalParameterIuivNV( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glGetProgramEnvParameterIivNV( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glGetProgramEnvParameterIuivNV( int target, int index, void * params );	( target index params -- )
EXTERN: "C" void glProgramSubroutineParametersuivNV( int target, int count, void * params );	( target count params -- )
EXTERN: "C" void glGetProgramSubroutineParameteruivNV( int target, int index, void * param );	( target index param -- )
EXTERN: "C" void glVertex2hNV( short x, short y );	( x y -- )
EXTERN: "C" void glVertex2hvNV( void * v );	( v -- )
EXTERN: "C" void glVertex3hNV( short x, short y, short z );	( x y z -- )
EXTERN: "C" void glVertex3hvNV( void * v );	( v -- )
EXTERN: "C" void glVertex4hNV( short x, short y, short z, short w );	( x y z w -- )
EXTERN: "C" void glVertex4hvNV( void * v );	( v -- )
EXTERN: "C" void glNormal3hNV( short nx, short ny, short nz );	( nx ny nz -- )
EXTERN: "C" void glNormal3hvNV( void * v );	( v -- )
EXTERN: "C" void glColor3hNV( short red, short green, short blue );	( red green blue -- )
EXTERN: "C" void glColor3hvNV( void * v );	( v -- )
EXTERN: "C" void glColor4hNV( short red, short green, short blue, short alpha );	( red green blue alpha -- )
EXTERN: "C" void glColor4hvNV( void * v );	( v -- )
EXTERN: "C" void glTexCoord1hNV( short s );	( s -- )
EXTERN: "C" void glTexCoord1hvNV( void * v );	( v -- )
EXTERN: "C" void glTexCoord2hNV( short s, short t );	( s t -- )
EXTERN: "C" void glTexCoord2hvNV( void * v );	( v -- )
EXTERN: "C" void glTexCoord3hNV( short s, short t, short r );	( s t r -- )
EXTERN: "C" void glTexCoord3hvNV( void * v );	( v -- )
EXTERN: "C" void glTexCoord4hNV( short s, short t, short r, short q );	( s t r q -- )
EXTERN: "C" void glTexCoord4hvNV( void * v );	( v -- )
EXTERN: "C" void glMultiTexCoord1hNV( int target, short s );	( target s -- )
EXTERN: "C" void glMultiTexCoord1hvNV( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord2hNV( int target, short s, short t );	( target s t -- )
EXTERN: "C" void glMultiTexCoord2hvNV( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord3hNV( int target, short s, short t, short r );	( target s t r -- )
EXTERN: "C" void glMultiTexCoord3hvNV( int target, void * v );	( target v -- )
EXTERN: "C" void glMultiTexCoord4hNV( int target, short s, short t, short r, short q );	( target s t r q -- )
EXTERN: "C" void glMultiTexCoord4hvNV( int target, void * v );	( target v -- )
EXTERN: "C" void glFogCoordhNV( short fog );	( fog -- )
EXTERN: "C" void glFogCoordhvNV( void * fog );	( fog -- )
EXTERN: "C" void glSecondaryColor3hNV( short red, short green, short blue );	( red green blue -- )
EXTERN: "C" void glSecondaryColor3hvNV( void * v );	( v -- )
EXTERN: "C" void glVertexWeighthNV( short weight );	( weight -- )
EXTERN: "C" void glVertexWeighthvNV( void * weight );	( weight -- )
EXTERN: "C" void glVertexAttrib1hNV( int index, short x );	( index x -- )
EXTERN: "C" void glVertexAttrib1hvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2hNV( int index, short x, short y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2hvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3hNV( int index, short x, short y, short z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3hvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4hNV( int index, short x, short y, short z, short w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4hvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribs1hvNV( int index, int n, void * v );	( index n v -- )
EXTERN: "C" void glVertexAttribs2hvNV( int index, int n, void * v );	( index n v -- )
EXTERN: "C" void glVertexAttribs3hvNV( int index, int n, void * v );	( index n v -- )
EXTERN: "C" void glVertexAttribs4hvNV( int index, int n, void * v );	( index n v -- )
EXTERN: "C" void glGetInternalformatSampleivNV( int target, int internalformat, int samples, int pname, int bufSize, void * params );	( target internalformat samples pname bufSize params -- )
EXTERN: "C" void glGenOcclusionQueriesNV( int n, void * ids );	( n ids -- )
EXTERN: "C" void glDeleteOcclusionQueriesNV( int n, void * ids );	( n ids -- )
EXTERN: "C" char glIsOcclusionQueryNV( int id );	( id -- )
EXTERN: "C" void glBeginOcclusionQueryNV( int id );	( id -- )
EXTERN: "C" void glEndOcclusionQueryNV(  );	( -- )
EXTERN: "C" void glGetOcclusionQueryivNV( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glGetOcclusionQueryuivNV( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glProgramBufferParametersfvNV( int target, int bindingIndex, int wordIndex, int count, void * params );	( target bindingIndex wordIndex count params -- )
EXTERN: "C" void glProgramBufferParametersIivNV( int target, int bindingIndex, int wordIndex, int count, void * params );	( target bindingIndex wordIndex count params -- )
EXTERN: "C" void glProgramBufferParametersIuivNV( int target, int bindingIndex, int wordIndex, int count, void * params );	( target bindingIndex wordIndex count params -- )
EXTERN: "C" int glGenPathsNV( int range );	( range -- )
EXTERN: "C" void glDeletePathsNV( int path, int range );	( path range -- )
EXTERN: "C" char glIsPathNV( int path );	( path -- )
EXTERN: "C" void glPathCommandsNV( int path, int numCommands, void * commands, int numCoords, int coordType, void * coords );	( path numCommands commands numCoords coordType coords -- )
EXTERN: "C" void glPathCoordsNV( int path, int numCoords, int coordType, void * coords );	( path numCoords coordType coords -- )
EXTERN: "C" void glPathSubCommandsNV( int path, int commandStart, int commandsToDelete, int numCommands, void * commands, int numCoords, int coordType, void * coords );	( path commandStart commandsToDelete numCommands commands numCoords coordType coords -- )
EXTERN: "C" void glPathSubCoordsNV( int path, int coordStart, int numCoords, int coordType, void * coords );	( path coordStart numCoords coordType coords -- )
EXTERN: "C" void glPathStringNV( int path, int format, int length, void * pathString );	( path format length pathString -- )
EXTERN: "C" void glPathGlyphsNV( int firstPathName, int fontTarget, void * fontName, int fontStyle, int numGlyphs, int type, void * charcodes, int handleMissingGlyphs, int pathParameterTemplate, float emScale );	( firstPathName fontTarget fontName fontStyle numGlyphs type charcodes handleMissingGlyphs pathParameterTemplate emScale -- )
EXTERN: "C" void glPathGlyphRangeNV( int firstPathName, int fontTarget, void * fontName, int fontStyle, int firstGlyph, int numGlyphs, int handleMissingGlyphs, int pathParameterTemplate, float emScale );	( firstPathName fontTarget fontName fontStyle firstGlyph numGlyphs handleMissingGlyphs pathParameterTemplate emScale -- )
EXTERN: "C" void glWeightPathsNV( int resultPath, int numPaths, void * paths, void * weights );	( resultPath numPaths paths weights -- )
EXTERN: "C" void glCopyPathNV( int resultPath, int srcPath );	( resultPath srcPath -- )
EXTERN: "C" void glInterpolatePathsNV( int resultPath, int pathA, int pathB, float weight );	( resultPath pathA pathB weight -- )
EXTERN: "C" void glTransformPathNV( int resultPath, int srcPath, int transformType, void * transformValues );	( resultPath srcPath transformType transformValues -- )
EXTERN: "C" void glPathParameterivNV( int path, int pname, void * value );	( path pname value -- )
EXTERN: "C" void glPathParameteriNV( int path, int pname, int value );	( path pname value -- )
EXTERN: "C" void glPathParameterfvNV( int path, int pname, void * value );	( path pname value -- )
EXTERN: "C" void glPathParameterfNV( int path, int pname, float value );	( path pname value -- )
EXTERN: "C" void glPathDashArrayNV( int path, int dashCount, void * dashArray );	( path dashCount dashArray -- )
EXTERN: "C" void glPathStencilFuncNV( int func, int ref, int mask );	( func ref mask -- )
EXTERN: "C" void glPathStencilDepthOffsetNV( float factor, float units );	( factor units -- )
EXTERN: "C" void glStencilFillPathNV( int path, int fillMode, int mask );	( path fillMode mask -- )
EXTERN: "C" void glStencilStrokePathNV( int path, int reference, int mask );	( path reference mask -- )
EXTERN: "C" void glStencilFillPathInstancedNV( int numPaths, int pathNameType, void * paths, int pathBase, int fillMode, int mask, int transformType, void * transformValues );	( numPaths pathNameType paths pathBase fillMode mask transformType transformValues -- )
EXTERN: "C" void glStencilStrokePathInstancedNV( int numPaths, int pathNameType, void * paths, int pathBase, int reference, int mask, int transformType, void * transformValues );	( numPaths pathNameType paths pathBase reference mask transformType transformValues -- )
EXTERN: "C" void glPathCoverDepthFuncNV( int func );	( func -- )
EXTERN: "C" void glCoverFillPathNV( int path, int coverMode );	( path coverMode -- )
EXTERN: "C" void glCoverStrokePathNV( int path, int coverMode );	( path coverMode -- )
EXTERN: "C" void glCoverFillPathInstancedNV( int numPaths, int pathNameType, void * paths, int pathBase, int coverMode, int transformType, void * transformValues );	( numPaths pathNameType paths pathBase coverMode transformType transformValues -- )
EXTERN: "C" void glCoverStrokePathInstancedNV( int numPaths, int pathNameType, void * paths, int pathBase, int coverMode, int transformType, void * transformValues );	( numPaths pathNameType paths pathBase coverMode transformType transformValues -- )
EXTERN: "C" void glGetPathParameterivNV( int path, int pname, void * value );	( path pname value -- )
EXTERN: "C" void glGetPathParameterfvNV( int path, int pname, void * value );	( path pname value -- )
EXTERN: "C" void glGetPathCommandsNV( int path, void * commands );	( path commands -- )
EXTERN: "C" void glGetPathCoordsNV( int path, void * coords );	( path coords -- )
EXTERN: "C" void glGetPathDashArrayNV( int path, void * dashArray );	( path dashArray -- )
EXTERN: "C" void glGetPathMetricsNV( int metricQueryMask, int numPaths, int pathNameType, void * paths, int pathBase, int stride, void * metrics );	( metricQueryMask numPaths pathNameType paths pathBase stride metrics -- )
EXTERN: "C" void glGetPathMetricRangeNV( int metricQueryMask, int firstPathName, int numPaths, int stride, void * metrics );	( metricQueryMask firstPathName numPaths stride metrics -- )
EXTERN: "C" void glGetPathSpacingNV( int pathListMode, int numPaths, int pathNameType, void * paths, int pathBase, float advanceScale, float kerningScale, int transformType, void * returnedSpacing );	( pathListMode numPaths pathNameType paths pathBase advanceScale kerningScale transformType returnedSpacing -- )
EXTERN: "C" char glIsPointInFillPathNV( int path, int mask, float x, float y );	( path mask x y -- )
EXTERN: "C" char glIsPointInStrokePathNV( int path, float x, float y );	( path x y -- )
EXTERN: "C" float glGetPathLengthNV( int path, int startSegment, int numSegments );	( path startSegment numSegments -- )
EXTERN: "C" char glPointAlongPathNV( int path, int startSegment, int numSegments, float distance, void * x, void * y, void * tangentX, void * tangentY );	( path startSegment numSegments distance x y tangentX tangentY -- )
EXTERN: "C" void glMatrixLoad3x2fNV( int matrixMode, void * m );	( matrixMode m -- )
EXTERN: "C" void glMatrixLoad3x3fNV( int matrixMode, void * m );	( matrixMode m -- )
EXTERN: "C" void glMatrixLoadTranspose3x3fNV( int matrixMode, void * m );	( matrixMode m -- )
EXTERN: "C" void glMatrixMult3x2fNV( int matrixMode, void * m );	( matrixMode m -- )
EXTERN: "C" void glMatrixMult3x3fNV( int matrixMode, void * m );	( matrixMode m -- )
EXTERN: "C" void glMatrixMultTranspose3x3fNV( int matrixMode, void * m );	( matrixMode m -- )
EXTERN: "C" void glStencilThenCoverFillPathNV( int path, int fillMode, int mask, int coverMode );	( path fillMode mask coverMode -- )
EXTERN: "C" void glStencilThenCoverStrokePathNV( int path, int reference, int mask, int coverMode );	( path reference mask coverMode -- )
EXTERN: "C" void glStencilThenCoverFillPathInstancedNV( int numPaths, int pathNameType, void * paths, int pathBase, int fillMode, int mask, int coverMode, int transformType, void * transformValues );	( numPaths pathNameType paths pathBase fillMode mask coverMode transformType transformValues -- )
EXTERN: "C" void glStencilThenCoverStrokePathInstancedNV( int numPaths, int pathNameType, void * paths, int pathBase, int reference, int mask, int coverMode, int transformType, void * transformValues );	( numPaths pathNameType paths pathBase reference mask coverMode transformType transformValues -- )
EXTERN: "C" int glPathGlyphIndexRangeNV( int fontTarget, void * fontName, int fontStyle, int pathParameterTemplate, float emScale, void * baseAndCount );	( fontTarget fontName fontStyle pathParameterTemplate emScale baseAndCount -- )
EXTERN: "C" int glPathGlyphIndexArrayNV( int firstPathName, int fontTarget, void * fontName, int fontStyle, int firstGlyphIndex, int numGlyphs, int pathParameterTemplate, float emScale );	( firstPathName fontTarget fontName fontStyle firstGlyphIndex numGlyphs pathParameterTemplate emScale -- )
EXTERN: "C" int glPathMemoryGlyphIndexArrayNV( int firstPathName, int fontTarget, long fontSize, void * fontData, int faceIndex, int firstGlyphIndex, int numGlyphs, int pathParameterTemplate, float emScale );	( firstPathName fontTarget fontSize fontData faceIndex firstGlyphIndex numGlyphs pathParameterTemplate emScale -- )
EXTERN: "C" void glProgramPathFragmentInputGenNV( int program, int location, int genMode, int components, void * coeffs );	( program location genMode components coeffs -- )
EXTERN: "C" void glGetProgramResourcefvNV( int program, int programInterface, int index, int propCount, void * props, int bufSize, void * length, void * params );	( program programInterface index propCount props bufSize length params -- )
EXTERN: "C" void glPathColorGenNV( int color, int genMode, int colorFormat, void * coeffs );	( color genMode colorFormat coeffs -- )
EXTERN: "C" void glPathTexGenNV( int texCoordSet, int genMode, int components, void * coeffs );	( texCoordSet genMode components coeffs -- )
EXTERN: "C" void glPathFogGenNV( int genMode );	( genMode -- )
EXTERN: "C" void glGetPathColorGenivNV( int color, int pname, void * value );	( color pname value -- )
EXTERN: "C" void glGetPathColorGenfvNV( int color, int pname, void * value );	( color pname value -- )
EXTERN: "C" void glGetPathTexGenivNV( int texCoordSet, int pname, void * value );	( texCoordSet pname value -- )
EXTERN: "C" void glGetPathTexGenfvNV( int texCoordSet, int pname, void * value );	( texCoordSet pname value -- )
EXTERN: "C" void glPixelDataRangeNV( int target, int length, void * pointer );	( target length pointer -- )
EXTERN: "C" void glFlushPixelDataRangeNV( int target );	( target -- )
EXTERN: "C" void glPointParameteriNV( int pname, int param );	( pname param -- )
EXTERN: "C" void glPointParameterivNV( int pname, void * params );	( pname params -- )
EXTERN: "C" void glPresentFrameKeyedNV( int video_slot, long long minPresentTime, int beginPresentTimeId, int presentDurationId, int type, int target0, int fill0, int key0, int target1, int fill1, int key1 );	( video_slot minPresentTime beginPresentTimeId presentDurationId type target0 fill0 key0 target1 fill1 key1 -- )
EXTERN: "C" void glPresentFrameDualFillNV( int video_slot, long long minPresentTime, int beginPresentTimeId, int presentDurationId, int type, int target0, int fill0, int target1, int fill1, int target2, int fill2, int target3, int fill3 );	( video_slot minPresentTime beginPresentTimeId presentDurationId type target0 fill0 target1 fill1 target2 fill2 target3 fill3 -- )
EXTERN: "C" void glGetVideoivNV( int video_slot, int pname, void * params );	( video_slot pname params -- )
EXTERN: "C" void glGetVideouivNV( int video_slot, int pname, void * params );	( video_slot pname params -- )
EXTERN: "C" void glGetVideoi64vNV( int video_slot, int pname, void * params );	( video_slot pname params -- )
EXTERN: "C" void glGetVideoui64vNV( int video_slot, int pname, void * params );	( video_slot pname params -- )
EXTERN: "C" void glPrimitiveRestartNV(  );	( -- )
EXTERN: "C" void glPrimitiveRestartIndexNV( int index );	( index -- )
EXTERN: "C" int glQueryResourceNV( int queryType, int tagId, int bufSize, void * buffer );	( queryType tagId bufSize buffer -- )
EXTERN: "C" void glGenQueryResourceTagNV( int n, void * tagIds );	( n tagIds -- )
EXTERN: "C" void glDeleteQueryResourceTagNV( int n, void * tagIds );	( n tagIds -- )
EXTERN: "C" void glQueryResourceTagNV( int tagId, char * tagString );	( tagId tagString -- )
EXTERN: "C" void glCombinerParameterfvNV( int pname, void * params );	( pname params -- )
EXTERN: "C" void glCombinerParameterfNV( int pname, float param );	( pname param -- )
EXTERN: "C" void glCombinerParameterivNV( int pname, void * params );	( pname params -- )
EXTERN: "C" void glCombinerParameteriNV( int pname, int param );	( pname param -- )
EXTERN: "C" void glCombinerInputNV( int stage, int portion, int variable, int input, int mapping, int componentUsage );	( stage portion variable input mapping componentUsage -- )
EXTERN: "C" void glCombinerOutputNV( int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, char abDotProduct, char cdDotProduct, char muxSum );	( stage portion abOutput cdOutput sumOutput scale bias abDotProduct cdDotProduct muxSum -- )
EXTERN: "C" void glFinalCombinerInputNV( int variable, int input, int mapping, int componentUsage );	( variable input mapping componentUsage -- )
EXTERN: "C" void glGetCombinerInputParameterfvNV( int stage, int portion, int variable, int pname, void * params );	( stage portion variable pname params -- )
EXTERN: "C" void glGetCombinerInputParameterivNV( int stage, int portion, int variable, int pname, void * params );	( stage portion variable pname params -- )
EXTERN: "C" void glGetCombinerOutputParameterfvNV( int stage, int portion, int pname, void * params );	( stage portion pname params -- )
EXTERN: "C" void glGetCombinerOutputParameterivNV( int stage, int portion, int pname, void * params );	( stage portion pname params -- )
EXTERN: "C" void glGetFinalCombinerInputParameterfvNV( int variable, int pname, void * params );	( variable pname params -- )
EXTERN: "C" void glGetFinalCombinerInputParameterivNV( int variable, int pname, void * params );	( variable pname params -- )
EXTERN: "C" void glCombinerStageParameterfvNV( int stage, int pname, void * params );	( stage pname params -- )
EXTERN: "C" void glGetCombinerStageParameterfvNV( int stage, int pname, void * params );	( stage pname params -- )
EXTERN: "C" void glFramebufferSampleLocationsfvNV( int target, int start, int count, void * v );	( target start count v -- )
EXTERN: "C" void glNamedFramebufferSampleLocationsfvNV( int framebuffer, int start, int count, void * v );	( framebuffer start count v -- )
EXTERN: "C" void glResolveDepthValuesNV(  );	( -- )
EXTERN: "C" void glMakeBufferResidentNV( int target, int access );	( target access -- )
EXTERN: "C" void glMakeBufferNonResidentNV( int target );	( target -- )
EXTERN: "C" char glIsBufferResidentNV( int target );	( target -- )
EXTERN: "C" void glMakeNamedBufferResidentNV( int buffer, int access );	( buffer access -- )
EXTERN: "C" void glMakeNamedBufferNonResidentNV( int buffer );	( buffer -- )
EXTERN: "C" char glIsNamedBufferResidentNV( int buffer );	( buffer -- )
EXTERN: "C" void glGetBufferParameterui64vNV( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetNamedBufferParameterui64vNV( int buffer, int pname, void * params );	( buffer pname params -- )
EXTERN: "C" void glGetIntegerui64vNV( int value, void * result );	( value result -- )
EXTERN: "C" void glUniformui64NV( int location, long long value );	( location value -- )
EXTERN: "C" void glUniformui64vNV( int location, int count, void * value );	( location count value -- )
EXTERN: "C" void glProgramUniformui64NV( int program, int location, long long value );	( program location value -- )
EXTERN: "C" void glProgramUniformui64vNV( int program, int location, int count, void * value );	( program location count value -- )
EXTERN: "C" void glTextureBarrierNV(  );	( -- )
EXTERN: "C" void glTexImage2DMultisampleCoverageNV( int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, char fixedSampleLocations );	( target coverageSamples colorSamples internalFormat width height fixedSampleLocations -- )
EXTERN: "C" void glTexImage3DMultisampleCoverageNV( int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, char fixedSampleLocations );	( target coverageSamples colorSamples internalFormat width height depth fixedSampleLocations -- )
EXTERN: "C" void glTextureImage2DMultisampleNV( int texture, int target, int samples, int internalFormat, int width, int height, char fixedSampleLocations );	( texture target samples internalFormat width height fixedSampleLocations -- )
EXTERN: "C" void glTextureImage3DMultisampleNV( int texture, int target, int samples, int internalFormat, int width, int height, int depth, char fixedSampleLocations );	( texture target samples internalFormat width height depth fixedSampleLocations -- )
EXTERN: "C" void glTextureImage2DMultisampleCoverageNV( int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, char fixedSampleLocations );	( texture target coverageSamples colorSamples internalFormat width height fixedSampleLocations -- )
EXTERN: "C" void glTextureImage3DMultisampleCoverageNV( int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, char fixedSampleLocations );	( texture target coverageSamples colorSamples internalFormat width height depth fixedSampleLocations -- )
EXTERN: "C" void glBeginTransformFeedbackNV( int primitiveMode );	( primitiveMode -- )
EXTERN: "C" void glEndTransformFeedbackNV(  );	( -- )
EXTERN: "C" void glTransformFeedbackAttribsNV( int count, void * attribs, int bufferMode );	( count attribs bufferMode -- )
EXTERN: "C" void glBindBufferRangeNV( int target, int index, int buffer, long offset, long size );	( target index buffer offset size -- )
EXTERN: "C" void glBindBufferOffsetNV( int target, int index, int buffer, long offset );	( target index buffer offset -- )
EXTERN: "C" void glBindBufferBaseNV( int target, int index, int buffer );	( target index buffer -- )
EXTERN: "C" void glTransformFeedbackVaryingsNV( int program, int count, void * locations, int bufferMode );	( program count locations bufferMode -- )
EXTERN: "C" void glActiveVaryingNV( int program, char * name );	( program name -- )
EXTERN: "C" int glGetVaryingLocationNV( int program, char * name );	( program name -- )
EXTERN: "C" void glGetActiveVaryingNV( int program, int index, int bufSize, void * length, void * size, void * type, void * name );	( program index bufSize length size type name -- )
EXTERN: "C" void glGetTransformFeedbackVaryingNV( int program, int index, void * location );	( program index location -- )
EXTERN: "C" void glTransformFeedbackStreamAttribsNV( int count, void * attribs, int nbuffers, void * bufstreams, int bufferMode );	( count attribs nbuffers bufstreams bufferMode -- )
EXTERN: "C" void glBindTransformFeedbackNV( int target, int id );	( target id -- )
EXTERN: "C" void glDeleteTransformFeedbacksNV( int n, void * ids );	( n ids -- )
EXTERN: "C" void glGenTransformFeedbacksNV( int n, void * ids );	( n ids -- )
EXTERN: "C" char glIsTransformFeedbackNV( int id );	( id -- )
EXTERN: "C" void glPauseTransformFeedbackNV(  );	( -- )
EXTERN: "C" void glResumeTransformFeedbackNV(  );	( -- )
EXTERN: "C" void glDrawTransformFeedbackNV( int mode, int id );	( mode id -- )
EXTERN: "C" void glVDPAUInitNV( void * vdpDevice, void * getProcAddress );	( vdpDevice getProcAddress -- )
EXTERN: "C" void glVDPAUFiniNV(  );	( -- )
EXTERN: "C" long glVDPAURegisterVideoSurfaceNV( void * vdpSurface, int target, int numTextureNames, void * textureNames );	( vdpSurface target numTextureNames textureNames -- )
EXTERN: "C" long glVDPAURegisterOutputSurfaceNV( void * vdpSurface, int target, int numTextureNames, void * textureNames );	( vdpSurface target numTextureNames textureNames -- )
EXTERN: "C" char glVDPAUIsSurfaceNV( long surface );	( surface -- )
EXTERN: "C" void glVDPAUUnregisterSurfaceNV( long surface );	( surface -- )
EXTERN: "C" void glVDPAUGetSurfaceivNV( long surface, int pname, int bufSize, void * length, void * values );	( surface pname bufSize length values -- )
EXTERN: "C" void glVDPAUSurfaceAccessNV( long surface, int access );	( surface access -- )
EXTERN: "C" void glVDPAUMapSurfacesNV( int numSurfaces, void * surfaces );	( numSurfaces surfaces -- )
EXTERN: "C" void glVDPAUUnmapSurfacesNV( int numSurface, void * surfaces );	( numSurface surfaces -- )
EXTERN: "C" void glFlushVertexArrayRangeNV(  );	( -- )
EXTERN: "C" void glVertexArrayRangeNV( int length, void * pointer );	( length pointer -- )
EXTERN: "C" void glVertexAttribL1i64NV( int index, long long x );	( index x -- )
EXTERN: "C" void glVertexAttribL2i64NV( int index, long long x, long long y );	( index x y -- )
EXTERN: "C" void glVertexAttribL3i64NV( int index, long long x, long long y, long long z );	( index x y z -- )
EXTERN: "C" void glVertexAttribL4i64NV( int index, long long x, long long y, long long z, long long w );	( index x y z w -- )
EXTERN: "C" void glVertexAttribL1i64vNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL2i64vNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL3i64vNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL4i64vNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL1ui64NV( int index, long long x );	( index x -- )
EXTERN: "C" void glVertexAttribL2ui64NV( int index, long long x, long long y );	( index x y -- )
EXTERN: "C" void glVertexAttribL3ui64NV( int index, long long x, long long y, long long z );	( index x y z -- )
EXTERN: "C" void glVertexAttribL4ui64NV( int index, long long x, long long y, long long z, long long w );	( index x y z w -- )
EXTERN: "C" void glVertexAttribL1ui64vNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL2ui64vNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL3ui64vNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribL4ui64vNV( int index, void * v );	( index v -- )
EXTERN: "C" void glGetVertexAttribLi64vNV( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribLui64vNV( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glVertexAttribLFormatNV( int index, int size, int type, int stride );	( index size type stride -- )
EXTERN: "C" void glBufferAddressRangeNV( int pname, int index, long long address, long length );	( pname index address length -- )
EXTERN: "C" void glVertexFormatNV( int size, int type, int stride );	( size type stride -- )
EXTERN: "C" void glNormalFormatNV( int type, int stride );	( type stride -- )
EXTERN: "C" void glColorFormatNV( int size, int type, int stride );	( size type stride -- )
EXTERN: "C" void glIndexFormatNV( int type, int stride );	( type stride -- )
EXTERN: "C" void glTexCoordFormatNV( int size, int type, int stride );	( size type stride -- )
EXTERN: "C" void glEdgeFlagFormatNV( int stride );	( stride -- )
EXTERN: "C" void glSecondaryColorFormatNV( int size, int type, int stride );	( size type stride -- )
EXTERN: "C" void glFogCoordFormatNV( int type, int stride );	( type stride -- )
EXTERN: "C" void glVertexAttribFormatNV( int index, int size, int type, char normalized, int stride );	( index size type normalized stride -- )
EXTERN: "C" void glVertexAttribIFormatNV( int index, int size, int type, int stride );	( index size type stride -- )
EXTERN: "C" void glGetIntegerui64i_vNV( int value, int index, void * result );	( value index result -- )
EXTERN: "C" char glAreProgramsResidentNV( int n, void * programs, void * residences );	( n programs residences -- )
EXTERN: "C" void glBindProgramNV( int target, int id );	( target id -- )
EXTERN: "C" void glDeleteProgramsNV( int n, void * programs );	( n programs -- )
EXTERN: "C" void glExecuteProgramNV( int target, int id, void * params );	( target id params -- )
EXTERN: "C" void glGenProgramsNV( int n, void * programs );	( n programs -- )
EXTERN: "C" void glGetProgramParameterdvNV( int target, int index, int pname, void * params );	( target index pname params -- )
EXTERN: "C" void glGetProgramParameterfvNV( int target, int index, int pname, void * params );	( target index pname params -- )
EXTERN: "C" void glGetProgramivNV( int id, int pname, void * params );	( id pname params -- )
EXTERN: "C" void glGetProgramStringNV( int id, int pname, void * program );	( id pname program -- )
EXTERN: "C" void glGetTrackMatrixivNV( int target, int address, int pname, void * params );	( target address pname params -- )
EXTERN: "C" void glGetVertexAttribdvNV( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribfvNV( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribivNV( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribPointervNV( int index, int pname, void * pointer );	( index pname pointer -- )
EXTERN: "C" char glIsProgramNV( int id );	( id -- )
EXTERN: "C" void glLoadProgramNV( int target, int id, int len, void * program );	( target id len program -- )
EXTERN: "C" void glProgramParameter4dNV( int target, int index, double x, double y, double z, double w );	( target index x y z w -- )
EXTERN: "C" void glProgramParameter4dvNV( int target, int index, void * v );	( target index v -- )
EXTERN: "C" void glProgramParameter4fNV( int target, int index, float x, float y, float z, float w );	( target index x y z w -- )
EXTERN: "C" void glProgramParameter4fvNV( int target, int index, void * v );	( target index v -- )
EXTERN: "C" void glProgramParameters4dvNV( int target, int index, int count, void * v );	( target index count v -- )
EXTERN: "C" void glProgramParameters4fvNV( int target, int index, int count, void * v );	( target index count v -- )
EXTERN: "C" void glRequestResidentProgramsNV( int n, void * programs );	( n programs -- )
EXTERN: "C" void glTrackMatrixNV( int target, int address, int matrix, int transform );	( target address matrix transform -- )
EXTERN: "C" void glVertexAttribPointerNV( int index, int fsize, int type, int stride, void * pointer );	( index fsize type stride pointer -- )
EXTERN: "C" void glVertexAttrib1dNV( int index, double x );	( index x -- )
EXTERN: "C" void glVertexAttrib1dvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib1fNV( int index, float x );	( index x -- )
EXTERN: "C" void glVertexAttrib1fvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib1sNV( int index, short x );	( index x -- )
EXTERN: "C" void glVertexAttrib1svNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2dNV( int index, double x, double y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2dvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2fNV( int index, float x, float y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2fvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib2sNV( int index, short x, short y );	( index x y -- )
EXTERN: "C" void glVertexAttrib2svNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3dNV( int index, double x, double y, double z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3dvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3fNV( int index, float x, float y, float z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3fvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib3sNV( int index, short x, short y, short z );	( index x y z -- )
EXTERN: "C" void glVertexAttrib3svNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4dNV( int index, double x, double y, double z, double w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4dvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4fNV( int index, float x, float y, float z, float w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4fvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4sNV( int index, short x, short y, short z, short w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4svNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttrib4ubNV( int index, char x, char y, char z, char w );	( index x y z w -- )
EXTERN: "C" void glVertexAttrib4ubvNV( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribs1dvNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs1fvNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs1svNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs2dvNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs2fvNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs2svNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs3dvNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs3fvNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs3svNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs4dvNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs4fvNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs4svNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribs4ubvNV( int index, int count, void * v );	( index count v -- )
EXTERN: "C" void glVertexAttribI1iEXT( int index, int x );	( index x -- )
EXTERN: "C" void glVertexAttribI2iEXT( int index, int x, int y );	( index x y -- )
EXTERN: "C" void glVertexAttribI3iEXT( int index, int x, int y, int z );	( index x y z -- )
EXTERN: "C" void glVertexAttribI4iEXT( int index, int x, int y, int z, int w );	( index x y z w -- )
EXTERN: "C" void glVertexAttribI1uiEXT( int index, int x );	( index x -- )
EXTERN: "C" void glVertexAttribI2uiEXT( int index, int x, int y );	( index x y -- )
EXTERN: "C" void glVertexAttribI3uiEXT( int index, int x, int y, int z );	( index x y z -- )
EXTERN: "C" void glVertexAttribI4uiEXT( int index, int x, int y, int z, int w );	( index x y z w -- )
EXTERN: "C" void glVertexAttribI1ivEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI2ivEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI3ivEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4ivEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI1uivEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI2uivEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI3uivEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4uivEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4bvEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4svEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4ubvEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribI4usvEXT( int index, void * v );	( index v -- )
EXTERN: "C" void glVertexAttribIPointerEXT( int index, int size, int type, int stride, void * pointer );	( index size type stride pointer -- )
EXTERN: "C" void glGetVertexAttribIivEXT( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glGetVertexAttribIuivEXT( int index, int pname, void * params );	( index pname params -- )
EXTERN: "C" void glBeginVideoCaptureNV( int video_capture_slot );	( video_capture_slot -- )
EXTERN: "C" void glBindVideoCaptureStreamBufferNV( int video_capture_slot, int stream, int frame_region, long offset );	( video_capture_slot stream frame_region offset -- )
EXTERN: "C" void glBindVideoCaptureStreamTextureNV( int video_capture_slot, int stream, int frame_region, int target, int texture );	( video_capture_slot stream frame_region target texture -- )
EXTERN: "C" void glEndVideoCaptureNV( int video_capture_slot );	( video_capture_slot -- )
EXTERN: "C" void glGetVideoCaptureivNV( int video_capture_slot, int pname, void * params );	( video_capture_slot pname params -- )
EXTERN: "C" void glGetVideoCaptureStreamivNV( int video_capture_slot, int stream, int pname, void * params );	( video_capture_slot stream pname params -- )
EXTERN: "C" void glGetVideoCaptureStreamfvNV( int video_capture_slot, int stream, int pname, void * params );	( video_capture_slot stream pname params -- )
EXTERN: "C" void glGetVideoCaptureStreamdvNV( int video_capture_slot, int stream, int pname, void * params );	( video_capture_slot stream pname params -- )
EXTERN: "C" int glVideoCaptureNV( int video_capture_slot, void * sequence_num, void * capture_time );	( video_capture_slot sequence_num capture_time -- )
EXTERN: "C" void glVideoCaptureStreamParameterivNV( int video_capture_slot, int stream, int pname, void * params );	( video_capture_slot stream pname params -- )
EXTERN: "C" void glVideoCaptureStreamParameterfvNV( int video_capture_slot, int stream, int pname, void * params );	( video_capture_slot stream pname params -- )
EXTERN: "C" void glVideoCaptureStreamParameterdvNV( int video_capture_slot, int stream, int pname, void * params );	( video_capture_slot stream pname params -- )
EXTERN: "C" void glViewportSwizzleNV( int index, int swizzlex, int swizzley, int swizzlez, int swizzlew );	( index swizzlex swizzley swizzlez swizzlew -- )
EXTERN: "C" void glFramebufferTextureMultiviewOVR( int target, int attachment, int texture, int level, int baseViewIndex, int numViews );	( target attachment texture level baseViewIndex numViews -- )
EXTERN: "C" void glHintPGI( int target, int mode );	( target mode -- )
EXTERN: "C" void glDetailTexFuncSGIS( int target, int n, void * points );	( target n points -- )
EXTERN: "C" void glGetDetailTexFuncSGIS( int target, void * points );	( target points -- )
EXTERN: "C" void glFogFuncSGIS( int n, void * points );	( n points -- )
EXTERN: "C" void glGetFogFuncSGIS( void * points );	( points -- )
EXTERN: "C" void glSampleMaskSGIS( float value, char invert );	( value invert -- )
EXTERN: "C" void glSamplePatternSGIS( int pattern );	( pattern -- )
EXTERN: "C" void glPixelTexGenParameteriSGIS( int pname, int param );	( pname param -- )
EXTERN: "C" void glPixelTexGenParameterivSGIS( int pname, void * params );	( pname params -- )
EXTERN: "C" void glPixelTexGenParameterfSGIS( int pname, float param );	( pname param -- )
EXTERN: "C" void glPixelTexGenParameterfvSGIS( int pname, void * params );	( pname params -- )
EXTERN: "C" void glGetPixelTexGenParameterivSGIS( int pname, void * params );	( pname params -- )
EXTERN: "C" void glGetPixelTexGenParameterfvSGIS( int pname, void * params );	( pname params -- )
EXTERN: "C" void glPointParameterfSGIS( int pname, float param );	( pname param -- )
EXTERN: "C" void glPointParameterfvSGIS( int pname, void * params );	( pname params -- )
EXTERN: "C" void glSharpenTexFuncSGIS( int target, int n, void * points );	( target n points -- )
EXTERN: "C" void glGetSharpenTexFuncSGIS( int target, void * points );	( target points -- )
EXTERN: "C" void glTexImage4DSGIS( int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, void * pixels );	( target level internalformat width height depth size4d border format type pixels -- )
EXTERN: "C" void glTexSubImage4DSGIS( int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, void * pixels );	( target level xoffset yoffset zoffset woffset width height depth size4d format type pixels -- )
EXTERN: "C" void glTextureColorMaskSGIS( char red, char green, char blue, char alpha );	( red green blue alpha -- )
EXTERN: "C" void glGetTexFilterFuncSGIS( int target, int filter, void * weights );	( target filter weights -- )
EXTERN: "C" void glTexFilterFuncSGIS( int target, int filter, int n, void * weights );	( target filter n weights -- )
EXTERN: "C" void glAsyncMarkerSGIX( int marker );	( marker -- )
EXTERN: "C" int glFinishAsyncSGIX( void * markerp );	( markerp -- )
EXTERN: "C" int glPollAsyncSGIX( void * markerp );	( markerp -- )
EXTERN: "C" int glGenAsyncMarkersSGIX( int range );	( range -- )
EXTERN: "C" void glDeleteAsyncMarkersSGIX( int marker, int range );	( marker range -- )
EXTERN: "C" char glIsAsyncMarkerSGIX( int marker );	( marker -- )
EXTERN: "C" void glFlushRasterSGIX(  );	( -- )
EXTERN: "C" void glFragmentColorMaterialSGIX( int face, int mode );	( face mode -- )
EXTERN: "C" void glFragmentLightfSGIX( int light, int pname, float param );	( light pname param -- )
EXTERN: "C" void glFragmentLightfvSGIX( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glFragmentLightiSGIX( int light, int pname, int param );	( light pname param -- )
EXTERN: "C" void glFragmentLightivSGIX( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glFragmentLightModelfSGIX( int pname, float param );	( pname param -- )
EXTERN: "C" void glFragmentLightModelfvSGIX( int pname, void * params );	( pname params -- )
EXTERN: "C" void glFragmentLightModeliSGIX( int pname, int param );	( pname param -- )
EXTERN: "C" void glFragmentLightModelivSGIX( int pname, void * params );	( pname params -- )
EXTERN: "C" void glFragmentMaterialfSGIX( int face, int pname, float param );	( face pname param -- )
EXTERN: "C" void glFragmentMaterialfvSGIX( int face, int pname, void * params );	( face pname params -- )
EXTERN: "C" void glFragmentMaterialiSGIX( int face, int pname, int param );	( face pname param -- )
EXTERN: "C" void glFragmentMaterialivSGIX( int face, int pname, void * params );	( face pname params -- )
EXTERN: "C" void glGetFragmentLightfvSGIX( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glGetFragmentLightivSGIX( int light, int pname, void * params );	( light pname params -- )
EXTERN: "C" void glGetFragmentMaterialfvSGIX( int face, int pname, void * params );	( face pname params -- )
EXTERN: "C" void glGetFragmentMaterialivSGIX( int face, int pname, void * params );	( face pname params -- )
EXTERN: "C" void glLightEnviSGIX( int pname, int param );	( pname param -- )
EXTERN: "C" void glFrameZoomSGIX( int factor );	( factor -- )
EXTERN: "C" void glIglooInterfaceSGIX( int pname, void * params );	( pname params -- )
EXTERN: "C" int glGetInstrumentsSGIX(  );	( -- )
EXTERN: "C" void glInstrumentsBufferSGIX( int size, void * buffer );	( size buffer -- )
EXTERN: "C" int glPollInstrumentsSGIX( void * marker_p );	( marker_p -- )
EXTERN: "C" void glReadInstrumentsSGIX( int marker );	( marker -- )
EXTERN: "C" void glStartInstrumentsSGIX(  );	( -- )
EXTERN: "C" void glStopInstrumentsSGIX( int marker );	( marker -- )
EXTERN: "C" void glGetListParameterfvSGIX( int list, int pname, void * params );	( list pname params -- )
EXTERN: "C" void glGetListParameterivSGIX( int list, int pname, void * params );	( list pname params -- )
EXTERN: "C" void glListParameterfSGIX( int list, int pname, float param );	( list pname param -- )
EXTERN: "C" void glListParameterfvSGIX( int list, int pname, void * params );	( list pname params -- )
EXTERN: "C" void glListParameteriSGIX( int list, int pname, int param );	( list pname param -- )
EXTERN: "C" void glListParameterivSGIX( int list, int pname, void * params );	( list pname params -- )
EXTERN: "C" void glPixelTexGenSGIX( int mode );	( mode -- )
EXTERN: "C" void glDeformationMap3dSGIX( int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, void * points );	( target u1 u2 ustride uorder v1 v2 vstride vorder w1 w2 wstride worder points -- )
EXTERN: "C" void glDeformationMap3fSGIX( int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, void * points );	( target u1 u2 ustride uorder v1 v2 vstride vorder w1 w2 wstride worder points -- )
EXTERN: "C" void glDeformSGIX( int mask );	( mask -- )
EXTERN: "C" void glLoadIdentityDeformationMapSGIX( int mask );	( mask -- )
EXTERN: "C" void glReferencePlaneSGIX( void * equation );	( equation -- )
EXTERN: "C" void glSpriteParameterfSGIX( int pname, float param );	( pname param -- )
EXTERN: "C" void glSpriteParameterfvSGIX( int pname, void * params );	( pname params -- )
EXTERN: "C" void glSpriteParameteriSGIX( int pname, int param );	( pname param -- )
EXTERN: "C" void glSpriteParameterivSGIX( int pname, void * params );	( pname params -- )
EXTERN: "C" void glTagSampleBufferSGIX(  );	( -- )
EXTERN: "C" void glColorTableSGI( int target, int internalformat, int width, int format, int type, void * table );	( target internalformat width format type table -- )
EXTERN: "C" void glColorTableParameterfvSGI( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glColorTableParameterivSGI( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glCopyColorTableSGI( int target, int internalformat, int x, int y, int width );	( target internalformat x y width -- )
EXTERN: "C" void glGetColorTableSGI( int target, int format, int type, void * table );	( target format type table -- )
EXTERN: "C" void glGetColorTableParameterfvSGI( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glGetColorTableParameterivSGI( int target, int pname, void * params );	( target pname params -- )
EXTERN: "C" void glFinishTextureSUNX(  );	( -- )
EXTERN: "C" void glGlobalAlphaFactorbSUN( char factor );	( factor -- )
EXTERN: "C" void glGlobalAlphaFactorsSUN( short factor );	( factor -- )
EXTERN: "C" void glGlobalAlphaFactoriSUN( int factor );	( factor -- )
EXTERN: "C" void glGlobalAlphaFactorfSUN( float factor );	( factor -- )
EXTERN: "C" void glGlobalAlphaFactordSUN( double factor );	( factor -- )
EXTERN: "C" void glGlobalAlphaFactorubSUN( char factor );	( factor -- )
EXTERN: "C" void glGlobalAlphaFactorusSUN( short factor );	( factor -- )
EXTERN: "C" void glGlobalAlphaFactoruiSUN( int factor );	( factor -- )
EXTERN: "C" void glDrawMeshArraysSUN( int mode, int first, int count, int width );	( mode first count width -- )
EXTERN: "C" void glReplacementCodeuiSUN( int code );	( code -- )
EXTERN: "C" void glReplacementCodeusSUN( short code );	( code -- )
EXTERN: "C" void glReplacementCodeubSUN( char code );	( code -- )
EXTERN: "C" void glReplacementCodeuivSUN( void * code );	( code -- )
EXTERN: "C" void glReplacementCodeusvSUN( void * code );	( code -- )
EXTERN: "C" void glReplacementCodeubvSUN( void * code );	( code -- )
EXTERN: "C" void glReplacementCodePointerSUN( int type, int stride, void * pointer );	( type stride pointer -- )
EXTERN: "C" void glColor4ubVertex2fSUN( char r, char g, char b, char a, float x, float y );	( r g b a x y -- )
EXTERN: "C" void glColor4ubVertex2fvSUN( void * c, void * v );	( c v -- )
EXTERN: "C" void glColor4ubVertex3fSUN( char r, char g, char b, char a, float x, float y, float z );	( r g b a x y z -- )
EXTERN: "C" void glColor4ubVertex3fvSUN( void * c, void * v );	( c v -- )
EXTERN: "C" void glColor3fVertex3fSUN( float r, float g, float b, float x, float y, float z );	( r g b x y z -- )
EXTERN: "C" void glColor3fVertex3fvSUN( void * c, void * v );	( c v -- )
EXTERN: "C" void glNormal3fVertex3fSUN( float nx, float ny, float nz, float x, float y, float z );	( nx ny nz x y z -- )
EXTERN: "C" void glNormal3fVertex3fvSUN( void * n, void * v );	( n v -- )
EXTERN: "C" void glColor4fNormal3fVertex3fSUN( float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z );	( r g b a nx ny nz x y z -- )
EXTERN: "C" void glColor4fNormal3fVertex3fvSUN( void * c, void * n, void * v );	( c n v -- )
EXTERN: "C" void glTexCoord2fVertex3fSUN( float s, float t, float x, float y, float z );	( s t x y z -- )
EXTERN: "C" void glTexCoord2fVertex3fvSUN( void * tc, void * v );	( tc v -- )
EXTERN: "C" void glTexCoord4fVertex4fSUN( float s, float t, float p, float q, float x, float y, float z, float w );	( s t p q x y z w -- )
EXTERN: "C" void glTexCoord4fVertex4fvSUN( void * tc, void * v );	( tc v -- )
EXTERN: "C" void glTexCoord2fColor4ubVertex3fSUN( float s, float t, char r, char g, char b, char a, float x, float y, float z );	( s t r g b a x y z -- )
EXTERN: "C" void glTexCoord2fColor4ubVertex3fvSUN( void * tc, void * c, void * v );	( tc c v -- )
EXTERN: "C" void glTexCoord2fColor3fVertex3fSUN( float s, float t, float r, float g, float b, float x, float y, float z );	( s t r g b x y z -- )
EXTERN: "C" void glTexCoord2fColor3fVertex3fvSUN( void * tc, void * c, void * v );	( tc c v -- )
EXTERN: "C" void glTexCoord2fNormal3fVertex3fSUN( float s, float t, float nx, float ny, float nz, float x, float y, float z );	( s t nx ny nz x y z -- )
EXTERN: "C" void glTexCoord2fNormal3fVertex3fvSUN( void * tc, void * n, void * v );	( tc n v -- )
EXTERN: "C" void glTexCoord2fColor4fNormal3fVertex3fSUN( float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z );	( s t r g b a nx ny nz x y z -- )
EXTERN: "C" void glTexCoord2fColor4fNormal3fVertex3fvSUN( void * tc, void * c, void * n, void * v );	( tc c n v -- )
EXTERN: "C" void glTexCoord4fColor4fNormal3fVertex4fSUN( float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w );	( s t p q r g b a nx ny nz x y z w -- )
EXTERN: "C" void glTexCoord4fColor4fNormal3fVertex4fvSUN( void * tc, void * c, void * n, void * v );	( tc c n v -- )
EXTERN: "C" void glReplacementCodeuiVertex3fSUN( int rc, float x, float y, float z );	( rc x y z -- )
EXTERN: "C" void glReplacementCodeuiVertex3fvSUN( void * rc, void * v );	( rc v -- )
EXTERN: "C" void glReplacementCodeuiColor4ubVertex3fSUN( int rc, char r, char g, char b, char a, float x, float y, float z );	( rc r g b a x y z -- )
EXTERN: "C" void glReplacementCodeuiColor4ubVertex3fvSUN( void * rc, void * c, void * v );	( rc c v -- )
EXTERN: "C" void glReplacementCodeuiColor3fVertex3fSUN( int rc, float r, float g, float b, float x, float y, float z );	( rc r g b x y z -- )
EXTERN: "C" void glReplacementCodeuiColor3fVertex3fvSUN( void * rc, void * c, void * v );	( rc c v -- )
EXTERN: "C" void glReplacementCodeuiNormal3fVertex3fSUN( int rc, float nx, float ny, float nz, float x, float y, float z );	( rc nx ny nz x y z -- )
EXTERN: "C" void glReplacementCodeuiNormal3fVertex3fvSUN( void * rc, void * n, void * v );	( rc n v -- )
EXTERN: "C" void glReplacementCodeuiColor4fNormal3fVertex3fSUN( int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z );	( rc r g b a nx ny nz x y z -- )
EXTERN: "C" void glReplacementCodeuiColor4fNormal3fVertex3fvSUN( void * rc, void * c, void * n, void * v );	( rc c n v -- )
EXTERN: "C" void glReplacementCodeuiTexCoord2fVertex3fSUN( int rc, float s, float t, float x, float y, float z );	( rc s t x y z -- )
EXTERN: "C" void glReplacementCodeuiTexCoord2fVertex3fvSUN( void * rc, void * tc, void * v );	( rc tc v -- )
EXTERN: "C" void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN( int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z );	( rc s t nx ny nz x y z -- )
EXTERN: "C" void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN( void * rc, void * tc, void * n, void * v );	( rc tc n v -- )
EXTERN: "C" void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN( int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z );	( rc s t r g b a nx ny nz x y z -- )
EXTERN: "C" void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN( void * rc, void * tc, void * c, void * n, void * v );	( rc tc c n v -- )

\ ----===< postfix >===-----
( none )
